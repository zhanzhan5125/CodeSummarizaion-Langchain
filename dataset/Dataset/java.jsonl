{"repo": "tiefaces/TieFaces", "path": "src/org/tiefaces/components/websheet/utility/ChartUtility.java", "func_name": "ChartUtility.getChartIdFromChildNodeAttributes", "original_string": "private static String getChartIdFromChildNodeAttributes(\r\n            final NamedNodeMap attrs) {\r\n        for (int j = 0; j < attrs.getLength(); j++) {\r\n            Attr attribute = (Attr) attrs.item(j);\r\n            if (\"r:id\".equalsIgnoreCase(attribute.getName())) {\r\n                return attribute.getValue();\r\n            }\r\n        }\r\n        return null;\r\n    }", "language": "java", "code": "private static String getChartIdFromChildNodeAttributes(\r\n            final NamedNodeMap attrs) {\r\n        for (int j = 0; j < attrs.getLength(); j++) {\r\n            Attr attribute = (Attr) attrs.item(j);\r\n            if (\"r:id\".equalsIgnoreCase(attribute.getName())) {\r\n                return attribute.getValue();\r\n            }\r\n        }\r\n        return null;\r\n    }", "code_tokens": ["private", "static", "String", "getChartIdFromChildNodeAttributes", "(", "final", "NamedNodeMap", "attrs", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "attrs", ".", "getLength", "(", ")", ";", "j", "++", ")", "{", "Attr", "attribute", "=", "(", "Attr", ")", "attrs", ".", "item", "(", "j", ")", ";", "if", "(", "\"r:id\"", ".", "equalsIgnoreCase", "(", "attribute", ".", "getName", "(", ")", ")", ")", "{", "return", "attribute", ".", "getValue", "(", ")", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Gets the chart id from child node attributes.\n\n@param attrs\nthe attrs\n@return the chart id from child node attributes", "docstring_tokens": ["Gets", "the", "chart", "id", "from", "child", "node", "attributes", "."], "sha": "3b57b9701ed0f080b5fa4fa78269cc0c422b34ba", "url": "https://github.com/tiefaces/TieFaces/blob/3b57b9701ed0f080b5fa4fa78269cc0c422b34ba/src/org/tiefaces/components/websheet/utility/ChartUtility.java#L312-L321", "partition": "test"}
{"repo": "orientechnologies/orientdb", "path": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/OMatchStatement.java", "func_name": "OMatchStatement.execute", "original_string": "@Override\n  public Object execute(Map<Object, Object> iArgs) {\n    this.context.setInputParameters(iArgs);\n    return execute(this.request, this.context, this.progressListener);\n  }", "language": "java", "code": "@Override\n  public Object execute(Map<Object, Object> iArgs) {\n    this.context.setInputParameters(iArgs);\n    return execute(this.request, this.context, this.progressListener);\n  }", "code_tokens": ["@", "Override", "public", "Object", "execute", "(", "Map", "<", "Object", ",", "Object", ">", "iArgs", ")", "{", "this", ".", "context", ".", "setInputParameters", "(", "iArgs", ")", ";", "return", "execute", "(", "this", ".", "request", ",", "this", ".", "context", ",", "this", ".", "progressListener", ")", ";", "}"], "docstring": "this method works statefully, using request and context variables from current Match statement. This method will be deprecated\nin next releases\n\n@param iArgs Optional variable arguments to pass to the command.\n\n@return", "docstring_tokens": ["this", "method", "works", "statefully", "using", "request", "and", "context", "variables", "from", "current", "Match", "statement", ".", "This", "method", "will", "be", "deprecated", "in", "next", "releases"], "sha": "d970b12033f0462f0239ea0ad8ed41207e6e26f1", "url": "https://github.com/orientechnologies/orientdb/blob/d970b12033f0462f0239ea0ad8ed41207e6e26f1/core/src/main/java/com/orientechnologies/orient/core/sql/parser/OMatchStatement.java#L324-L328", "partition": "test"}
{"repo": "Unidata/thredds", "path": "cdm/src/main/java/ucar/ma2/MAMath.java", "func_name": "MAMath.copyBoolean", "original_string": "public static void copyBoolean(Array result, Array a) throws IllegalArgumentException {\r\n    if (!conformable(a, result))\r\n      throw new IllegalArgumentException(\"copy arrays are not conformable\");\r\n\r\n    IndexIterator iterA = a.getIndexIterator();\r\n    IndexIterator iterR = result.getIndexIterator();\r\n    while (iterA.hasNext())\r\n      iterR.setBooleanNext(iterA.getBooleanNext());\r\n  }", "language": "java", "code": "public static void copyBoolean(Array result, Array a) throws IllegalArgumentException {\r\n    if (!conformable(a, result))\r\n      throw new IllegalArgumentException(\"copy arrays are not conformable\");\r\n\r\n    IndexIterator iterA = a.getIndexIterator();\r\n    IndexIterator iterR = result.getIndexIterator();\r\n    while (iterA.hasNext())\r\n      iterR.setBooleanNext(iterA.getBooleanNext());\r\n  }", "code_tokens": ["public", "static", "void", "copyBoolean", "(", "Array", "result", ",", "Array", "a", ")", "throws", "IllegalArgumentException", "{", "if", "(", "!", "conformable", "(", "a", ",", "result", ")", ")", "throw", "new", "IllegalArgumentException", "(", "\"copy arrays are not conformable\"", ")", ";", "IndexIterator", "iterA", "=", "a", ".", "getIndexIterator", "(", ")", ";", "IndexIterator", "iterR", "=", "result", ".", "getIndexIterator", "(", ")", ";", "while", "(", "iterA", ".", "hasNext", "(", ")", ")", "iterR", ".", "setBooleanNext", "(", "iterA", ".", "getBooleanNext", "(", ")", ")", ";", "}"], "docstring": "copy array a to array result as bytes\nThe array a and result must be type boolean\n\n@param result copy to here\n@param a copy from here\n\n@throws IllegalArgumentException a and result are not conformable", "docstring_tokens": ["copy", "array", "a", "to", "array", "result", "as", "bytes", "The", "array", "a", "and", "result", "must", "be", "type", "boolean"], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/cdm/src/main/java/ucar/ma2/MAMath.java#L351-L359", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-mail/src/main/java/jodd/mail/EmailAttachmentBuilder.java", "func_name": "EmailAttachmentBuilder.setContentIdFromNameIfMissing", "original_string": "protected EmailAttachmentBuilder setContentIdFromNameIfMissing() {\n\t\tif (contentId == null) {\n\t\t\tif (name != null) {\n\t\t\t\tcontentId(FileNameUtil.getName(name));\n\t\t\t} else {\n\t\t\t\tcontentId(NO_NAME);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}", "language": "java", "code": "protected EmailAttachmentBuilder setContentIdFromNameIfMissing() {\n\t\tif (contentId == null) {\n\t\t\tif (name != null) {\n\t\t\t\tcontentId(FileNameUtil.getName(name));\n\t\t\t} else {\n\t\t\t\tcontentId(NO_NAME);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}", "code_tokens": ["protected", "EmailAttachmentBuilder", "setContentIdFromNameIfMissing", "(", ")", "{", "if", "(", "contentId", "==", "null", ")", "{", "if", "(", "name", "!=", "null", ")", "{", "contentId", "(", "FileNameUtil", ".", "getName", "(", "name", ")", ")", ";", "}", "else", "{", "contentId", "(", "NO_NAME", ")", ";", "}", "}", "return", "this", ";", "}"], "docstring": "Set content ID if it is missing.\n\n@return this\n@see #contentId(String)", "docstring_tokens": ["Set", "content", "ID", "if", "it", "is", "missing", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-mail/src/main/java/jodd/mail/EmailAttachmentBuilder.java#L262-L271", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-bean/src/main/java/jodd/introspector/Ctors.java", "func_name": "Ctors.getCtorDescriptor", "original_string": "public CtorDescriptor getCtorDescriptor(final Class... args) {\n\t\tctors:\n\t\tfor (CtorDescriptor ctorDescriptor : allCtors) {\n\t\t\tClass[] arg = ctorDescriptor.getParameters();\n\n\t\t\tif (arg.length != args.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (int j = 0; j < arg.length; j++) {\n\t\t\t\tif (arg[j] != args[j]) {\n\t\t\t\t\tcontinue ctors;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ctorDescriptor;\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "public CtorDescriptor getCtorDescriptor(final Class... args) {\n\t\tctors:\n\t\tfor (CtorDescriptor ctorDescriptor : allCtors) {\n\t\t\tClass[] arg = ctorDescriptor.getParameters();\n\n\t\t\tif (arg.length != args.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (int j = 0; j < arg.length; j++) {\n\t\t\t\tif (arg[j] != args[j]) {\n\t\t\t\t\tcontinue ctors;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ctorDescriptor;\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["public", "CtorDescriptor", "getCtorDescriptor", "(", "final", "Class", "...", "args", ")", "{", "ctors", ":", "for", "(", "CtorDescriptor", "ctorDescriptor", ":", "allCtors", ")", "{", "Class", "[", "]", "arg", "=", "ctorDescriptor", ".", "getParameters", "(", ")", ";", "if", "(", "arg", ".", "length", "!=", "args", ".", "length", ")", "{", "continue", ";", "}", "for", "(", "int", "j", "=", "0", ";", "j", "<", "arg", ".", "length", ";", "j", "++", ")", "{", "if", "(", "arg", "[", "j", "]", "!=", "args", "[", "j", "]", ")", "{", "continue", "ctors", ";", "}", "}", "return", "ctorDescriptor", ";", "}", "return", "null", ";", "}"], "docstring": "Finds constructor description that matches given argument types.", "docstring_tokens": ["Finds", "constructor", "description", "that", "matches", "given", "argument", "types", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-bean/src/main/java/jodd/introspector/Ctors.java#L86-L104", "partition": "test"}
{"repo": "orientechnologies/orientdb", "path": "graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientVertex.java", "func_name": "OrientVertex.getConnection", "original_string": "protected OPair<Direction, String> getConnection(final Direction iDirection, final String iFieldName, String... iClassNames) {\n    if (iClassNames != null && iClassNames.length == 1 && iClassNames[0].equalsIgnoreCase(\"E\"))\n      // DEFAULT CLASS, TREAT IT AS NO CLASS/LABEL\n      iClassNames = null;\n\n    final OrientBaseGraph graph = getGraph();\n    if (iDirection == Direction.OUT || iDirection == Direction.BOTH) {\n      if (settings.isUseVertexFieldsForEdgeLabels()) {\n        // FIELDS THAT STARTS WITH \"out_\"\n        if (iFieldName.startsWith(CONNECTION_OUT_PREFIX)) {\n          String connClass = getConnectionClass(Direction.OUT, iFieldName);\n          if (iClassNames == null || iClassNames.length == 0)\n            return new OPair<Direction, String>(Direction.OUT, connClass);\n\n          // CHECK AGAINST ALL THE CLASS NAMES\n          OrientEdgeType edgeType = graph.getEdgeType(connClass);\n          if (edgeType != null) {\n            for (String clsName : iClassNames) {\n              if (edgeType.isSubClassOf(clsName))\n                return new OPair<Direction, String>(Direction.OUT, connClass);\n            }\n          }\n        }\n      } else if (iFieldName.equals(OrientBaseGraph.CONNECTION_OUT))\n        // CHECK FOR \"out\"\n        return new OPair<Direction, String>(Direction.OUT, null);\n    }\n\n    if (iDirection == Direction.IN || iDirection == Direction.BOTH) {\n      if (settings.isUseVertexFieldsForEdgeLabels()) {\n        // FIELDS THAT STARTS WITH \"in_\"\n        if (iFieldName.startsWith(CONNECTION_IN_PREFIX)) {\n          String connClass = getConnectionClass(Direction.IN, iFieldName);\n          if (iClassNames == null || iClassNames.length == 0)\n            return new OPair<Direction, String>(Direction.IN, connClass);\n\n          // CHECK AGAINST ALL THE CLASS NAMES\n          OrientEdgeType edgeType = graph.getEdgeType(connClass);\n          if (edgeType != null) {\n            for (String clsName : iClassNames) {\n              if (edgeType.isSubClassOf(clsName))\n                return new OPair<Direction, String>(Direction.IN, connClass);\n            }\n          }\n        }\n      } else if (iFieldName.equals(OrientBaseGraph.CONNECTION_IN))\n        // CHECK FOR \"in\"\n        return new OPair<Direction, String>(Direction.IN, null);\n    }\n\n    // NOT FOUND\n    return null;\n  }", "language": "java", "code": "protected OPair<Direction, String> getConnection(final Direction iDirection, final String iFieldName, String... iClassNames) {\n    if (iClassNames != null && iClassNames.length == 1 && iClassNames[0].equalsIgnoreCase(\"E\"))\n      // DEFAULT CLASS, TREAT IT AS NO CLASS/LABEL\n      iClassNames = null;\n\n    final OrientBaseGraph graph = getGraph();\n    if (iDirection == Direction.OUT || iDirection == Direction.BOTH) {\n      if (settings.isUseVertexFieldsForEdgeLabels()) {\n        // FIELDS THAT STARTS WITH \"out_\"\n        if (iFieldName.startsWith(CONNECTION_OUT_PREFIX)) {\n          String connClass = getConnectionClass(Direction.OUT, iFieldName);\n          if (iClassNames == null || iClassNames.length == 0)\n            return new OPair<Direction, String>(Direction.OUT, connClass);\n\n          // CHECK AGAINST ALL THE CLASS NAMES\n          OrientEdgeType edgeType = graph.getEdgeType(connClass);\n          if (edgeType != null) {\n            for (String clsName : iClassNames) {\n              if (edgeType.isSubClassOf(clsName))\n                return new OPair<Direction, String>(Direction.OUT, connClass);\n            }\n          }\n        }\n      } else if (iFieldName.equals(OrientBaseGraph.CONNECTION_OUT))\n        // CHECK FOR \"out\"\n        return new OPair<Direction, String>(Direction.OUT, null);\n    }\n\n    if (iDirection == Direction.IN || iDirection == Direction.BOTH) {\n      if (settings.isUseVertexFieldsForEdgeLabels()) {\n        // FIELDS THAT STARTS WITH \"in_\"\n        if (iFieldName.startsWith(CONNECTION_IN_PREFIX)) {\n          String connClass = getConnectionClass(Direction.IN, iFieldName);\n          if (iClassNames == null || iClassNames.length == 0)\n            return new OPair<Direction, String>(Direction.IN, connClass);\n\n          // CHECK AGAINST ALL THE CLASS NAMES\n          OrientEdgeType edgeType = graph.getEdgeType(connClass);\n          if (edgeType != null) {\n            for (String clsName : iClassNames) {\n              if (edgeType.isSubClassOf(clsName))\n                return new OPair<Direction, String>(Direction.IN, connClass);\n            }\n          }\n        }\n      } else if (iFieldName.equals(OrientBaseGraph.CONNECTION_IN))\n        // CHECK FOR \"in\"\n        return new OPair<Direction, String>(Direction.IN, null);\n    }\n\n    // NOT FOUND\n    return null;\n  }", "code_tokens": ["protected", "OPair", "<", "Direction", ",", "String", ">", "getConnection", "(", "final", "Direction", "iDirection", ",", "final", "String", "iFieldName", ",", "String", "...", "iClassNames", ")", "{", "if", "(", "iClassNames", "!=", "null", "&&", "iClassNames", ".", "length", "==", "1", "&&", "iClassNames", "[", "0", "]", ".", "equalsIgnoreCase", "(", "\"E\"", ")", ")", "// DEFAULT CLASS, TREAT IT AS NO CLASS/LABEL", "iClassNames", "=", "null", ";", "final", "OrientBaseGraph", "graph", "=", "getGraph", "(", ")", ";", "if", "(", "iDirection", "==", "Direction", ".", "OUT", "||", "iDirection", "==", "Direction", ".", "BOTH", ")", "{", "if", "(", "settings", ".", "isUseVertexFieldsForEdgeLabels", "(", ")", ")", "{", "// FIELDS THAT STARTS WITH \"out_\"", "if", "(", "iFieldName", ".", "startsWith", "(", "CONNECTION_OUT_PREFIX", ")", ")", "{", "String", "connClass", "=", "getConnectionClass", "(", "Direction", ".", "OUT", ",", "iFieldName", ")", ";", "if", "(", "iClassNames", "==", "null", "||", "iClassNames", ".", "length", "==", "0", ")", "return", "new", "OPair", "<", "Direction", ",", "String", ">", "(", "Direction", ".", "OUT", ",", "connClass", ")", ";", "// CHECK AGAINST ALL THE CLASS NAMES", "OrientEdgeType", "edgeType", "=", "graph", ".", "getEdgeType", "(", "connClass", ")", ";", "if", "(", "edgeType", "!=", "null", ")", "{", "for", "(", "String", "clsName", ":", "iClassNames", ")", "{", "if", "(", "edgeType", ".", "isSubClassOf", "(", "clsName", ")", ")", "return", "new", "OPair", "<", "Direction", ",", "String", ">", "(", "Direction", ".", "OUT", ",", "connClass", ")", ";", "}", "}", "}", "}", "else", "if", "(", "iFieldName", ".", "equals", "(", "OrientBaseGraph", ".", "CONNECTION_OUT", ")", ")", "// CHECK FOR \"out\"", "return", "new", "OPair", "<", "Direction", ",", "String", ">", "(", "Direction", ".", "OUT", ",", "null", ")", ";", "}", "if", "(", "iDirection", "==", "Direction", ".", "IN", "||", "iDirection", "==", "Direction", ".", "BOTH", ")", "{", "if", "(", "settings", ".", "isUseVertexFieldsForEdgeLabels", "(", ")", ")", "{", "// FIELDS THAT STARTS WITH \"in_\"", "if", "(", "iFieldName", ".", "startsWith", "(", "CONNECTION_IN_PREFIX", ")", ")", "{", "String", "connClass", "=", "getConnectionClass", "(", "Direction", ".", "IN", ",", "iFieldName", ")", ";", "if", "(", "iClassNames", "==", "null", "||", "iClassNames", ".", "length", "==", "0", ")", "return", "new", "OPair", "<", "Direction", ",", "String", ">", "(", "Direction", ".", "IN", ",", "connClass", ")", ";", "// CHECK AGAINST ALL THE CLASS NAMES", "OrientEdgeType", "edgeType", "=", "graph", ".", "getEdgeType", "(", "connClass", ")", ";", "if", "(", "edgeType", "!=", "null", ")", "{", "for", "(", "String", "clsName", ":", "iClassNames", ")", "{", "if", "(", "edgeType", ".", "isSubClassOf", "(", "clsName", ")", ")", "return", "new", "OPair", "<", "Direction", ",", "String", ">", "(", "Direction", ".", "IN", ",", "connClass", ")", ";", "}", "}", "}", "}", "else", "if", "(", "iFieldName", ".", "equals", "(", "OrientBaseGraph", ".", "CONNECTION_IN", ")", ")", "// CHECK FOR \"in\"", "return", "new", "OPair", "<", "Direction", ",", "String", ">", "(", "Direction", ".", "IN", ",", "null", ")", ";", "}", "// NOT FOUND", "return", "null", ";", "}"], "docstring": "Determines if a field is a connections or not.\n\n@param iDirection  Direction to check\n@param iFieldName  Field name\n@param iClassNames Optional array of class names\n\n@return The found direction if any", "docstring_tokens": ["Determines", "if", "a", "field", "is", "a", "connections", "or", "not", "."], "sha": "d970b12033f0462f0239ea0ad8ed41207e6e26f1", "url": "https://github.com/orientechnologies/orientdb/blob/d970b12033f0462f0239ea0ad8ed41207e6e26f1/graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientVertex.java#L977-L1029", "partition": "test"}
{"repo": "apache/parquet-mr", "path": "parquet-avro/src/main/java/org/apache/parquet/avro/AvroWriteSupport.java", "func_name": "AvroWriteSupport.writeValueWithoutConversion", "original_string": "@SuppressWarnings(\"unchecked\")\n  private void writeValueWithoutConversion(Type type, Schema avroSchema, Object value) {\n    switch (avroSchema.getType()) {\n      case BOOLEAN:\n        recordConsumer.addBoolean((Boolean) value);\n        break;\n      case INT:\n        if (value instanceof Character) {\n          recordConsumer.addInteger((Character) value);\n        } else {\n          recordConsumer.addInteger(((Number) value).intValue());\n        }\n        break;\n      case LONG:\n        recordConsumer.addLong(((Number) value).longValue());\n        break;\n      case FLOAT:\n        recordConsumer.addFloat(((Number) value).floatValue());\n        break;\n      case DOUBLE:\n        recordConsumer.addDouble(((Number) value).doubleValue());\n        break;\n      case FIXED:\n        recordConsumer.addBinary(Binary.fromReusedByteArray(((GenericFixed) value).bytes()));\n        break;\n      case BYTES:\n        if (value instanceof byte[]) {\n          recordConsumer.addBinary(Binary.fromReusedByteArray((byte[]) value));\n        } else {\n          recordConsumer.addBinary(Binary.fromReusedByteBuffer((ByteBuffer) value));\n        }\n        break;\n      case STRING:\n        recordConsumer.addBinary(fromAvroString(value));\n        break;\n      case RECORD:\n        writeRecord(type.asGroupType(), avroSchema, value);\n        break;\n      case ENUM:\n        recordConsumer.addBinary(Binary.fromString(value.toString()));\n        break;\n      case ARRAY:\n        listWriter.writeList(type.asGroupType(), avroSchema, value);\n        break;\n      case MAP:\n        writeMap(type.asGroupType(), avroSchema, (Map<CharSequence, ?>) value);\n        break;\n      case UNION:\n        writeUnion(type.asGroupType(), avroSchema, value);\n        break;\n    }", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n  private void writeValueWithoutConversion(Type type, Schema avroSchema, Object value) {\n    switch (avroSchema.getType()) {\n      case BOOLEAN:\n        recordConsumer.addBoolean((Boolean) value);\n        break;\n      case INT:\n        if (value instanceof Character) {\n          recordConsumer.addInteger((Character) value);\n        } else {\n          recordConsumer.addInteger(((Number) value).intValue());\n        }\n        break;\n      case LONG:\n        recordConsumer.addLong(((Number) value).longValue());\n        break;\n      case FLOAT:\n        recordConsumer.addFloat(((Number) value).floatValue());\n        break;\n      case DOUBLE:\n        recordConsumer.addDouble(((Number) value).doubleValue());\n        break;\n      case FIXED:\n        recordConsumer.addBinary(Binary.fromReusedByteArray(((GenericFixed) value).bytes()));\n        break;\n      case BYTES:\n        if (value instanceof byte[]) {\n          recordConsumer.addBinary(Binary.fromReusedByteArray((byte[]) value));\n        } else {\n          recordConsumer.addBinary(Binary.fromReusedByteBuffer((ByteBuffer) value));\n        }\n        break;\n      case STRING:\n        recordConsumer.addBinary(fromAvroString(value));\n        break;\n      case RECORD:\n        writeRecord(type.asGroupType(), avroSchema, value);\n        break;\n      case ENUM:\n        recordConsumer.addBinary(Binary.fromString(value.toString()));\n        break;\n      case ARRAY:\n        listWriter.writeList(type.asGroupType(), avroSchema, value);\n        break;\n      case MAP:\n        writeMap(type.asGroupType(), avroSchema, (Map<CharSequence, ?>) value);\n        break;\n      case UNION:\n        writeUnion(type.asGroupType(), avroSchema, value);\n        break;\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "private", "void", "writeValueWithoutConversion", "(", "Type", "type", ",", "Schema", "avroSchema", ",", "Object", "value", ")", "{", "switch", "(", "avroSchema", ".", "getType", "(", ")", ")", "{", "case", "BOOLEAN", ":", "recordConsumer", ".", "addBoolean", "(", "(", "Boolean", ")", "value", ")", ";", "break", ";", "case", "INT", ":", "if", "(", "value", "instanceof", "Character", ")", "{", "recordConsumer", ".", "addInteger", "(", "(", "Character", ")", "value", ")", ";", "}", "else", "{", "recordConsumer", ".", "addInteger", "(", "(", "(", "Number", ")", "value", ")", ".", "intValue", "(", ")", ")", ";", "}", "break", ";", "case", "LONG", ":", "recordConsumer", ".", "addLong", "(", "(", "(", "Number", ")", "value", ")", ".", "longValue", "(", ")", ")", ";", "break", ";", "case", "FLOAT", ":", "recordConsumer", ".", "addFloat", "(", "(", "(", "Number", ")", "value", ")", ".", "floatValue", "(", ")", ")", ";", "break", ";", "case", "DOUBLE", ":", "recordConsumer", ".", "addDouble", "(", "(", "(", "Number", ")", "value", ")", ".", "doubleValue", "(", ")", ")", ";", "break", ";", "case", "FIXED", ":", "recordConsumer", ".", "addBinary", "(", "Binary", ".", "fromReusedByteArray", "(", "(", "(", "GenericFixed", ")", "value", ")", ".", "bytes", "(", ")", ")", ")", ";", "break", ";", "case", "BYTES", ":", "if", "(", "value", "instanceof", "byte", "[", "]", ")", "{", "recordConsumer", ".", "addBinary", "(", "Binary", ".", "fromReusedByteArray", "(", "(", "byte", "[", "]", ")", "value", ")", ")", ";", "}", "else", "{", "recordConsumer", ".", "addBinary", "(", "Binary", ".", "fromReusedByteBuffer", "(", "(", "ByteBuffer", ")", "value", ")", ")", ";", "}", "break", ";", "case", "STRING", ":", "recordConsumer", ".", "addBinary", "(", "fromAvroString", "(", "value", ")", ")", ";", "break", ";", "case", "RECORD", ":", "writeRecord", "(", "type", ".", "asGroupType", "(", ")", ",", "avroSchema", ",", "value", ")", ";", "break", ";", "case", "ENUM", ":", "recordConsumer", ".", "addBinary", "(", "Binary", ".", "fromString", "(", "value", ".", "toString", "(", ")", ")", ")", ";", "break", ";", "case", "ARRAY", ":", "listWriter", ".", "writeList", "(", "type", ".", "asGroupType", "(", ")", ",", "avroSchema", ",", "value", ")", ";", "break", ";", "case", "MAP", ":", "writeMap", "(", "type", ".", "asGroupType", "(", ")", ",", "avroSchema", ",", "(", "Map", "<", "CharSequence", ",", "?", ">", ")", "value", ")", ";", "break", ";", "case", "UNION", ":", "writeUnion", "(", "type", ".", "asGroupType", "(", ")", ",", "avroSchema", ",", "value", ")", ";", "break", ";", "}"], "docstring": "Calls an appropriate write method based on the value.\nValue must not be null and the schema must not be nullable.\n\n@param type a Parquet type\n@param avroSchema a non-nullable Avro schema\n@param value a non-null value to write", "docstring_tokens": ["Calls", "an", "appropriate", "write", "method", "based", "on", "the", "value", ".", "Value", "must", "not", "be", "null", "and", "the", "schema", "must", "not", "be", "nullable", "."], "sha": "62dcc68acaf64012bf731e103be780956f1f446d", "url": "https://github.com/apache/parquet-mr/blob/62dcc68acaf64012bf731e103be780956f1f446d/parquet-avro/src/main/java/org/apache/parquet/avro/AvroWriteSupport.java#L313-L363", "partition": "test"}
{"repo": "jbundle/util", "path": "jbackup/src/main/java/org/jbundle/jbackup/source/BaseSourceFile.java", "func_name": "BaseSourceFile.makeInStream", "original_string": "public InputStream makeInStream()\n\t{\n\t\tif (m_InputStream != null)\n\t\t\treturn m_InputStream;\n\t\ttry\t{\n\t\t\treturn new FileInputStream(m_inputFile);\n\t\t} catch (FileNotFoundException ex)\t{\n\t\t\tSystem.out.println(\"Warning: scanned file does not exist: \" + m_inputFile.getPath());\t\t// Skip this file\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "public InputStream makeInStream()\n\t{\n\t\tif (m_InputStream != null)\n\t\t\treturn m_InputStream;\n\t\ttry\t{\n\t\t\treturn new FileInputStream(m_inputFile);\n\t\t} catch (FileNotFoundException ex)\t{\n\t\t\tSystem.out.println(\"Warning: scanned file does not exist: \" + m_inputFile.getPath());\t\t// Skip this file\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["public", "InputStream", "makeInStream", "(", ")", "{", "if", "(", "m_InputStream", "!=", "null", ")", "return", "m_InputStream", ";", "try", "{", "return", "new", "FileInputStream", "(", "m_inputFile", ")", ";", "}", "catch", "(", "FileNotFoundException", "ex", ")", "{", "System", ".", "out", ".", "println", "(", "\"Warning: scanned file does not exist: \"", "+", "m_inputFile", ".", "getPath", "(", ")", ")", ";", "// Skip this file", "}", "return", "null", ";", "}"], "docstring": "If there is no input stream, use the file to create one.", "docstring_tokens": ["If", "there", "is", "no", "input", "stream", "use", "the", "file", "to", "create", "one", "."], "sha": "5af0f2292f56f29f70cbc26d0bfa72f89ae31be0", "url": "https://github.com/jbundle/util/blob/5af0f2292f56f29f70cbc26d0bfa72f89ae31be0/jbackup/src/main/java/org/jbundle/jbackup/source/BaseSourceFile.java#L82-L92", "partition": "test"}
{"repo": "jcodec/jcodec", "path": "src/main/java/org/jcodec/codecs/wav/WavHeader.java", "func_name": "WavHeader.createWavHeader", "original_string": "public static WavHeader createWavHeader(AudioFormat format, int samples) {\n        WavHeader w = new WavHeader(\"RIFF\", 40, \"WAVE\", new FmtChunk((short) 1, (short) format.getChannels(), format.getSampleRate(),\n                format.getSampleRate() * format.getChannels() * (format.getSampleSizeInBits() >> 3),\n                (short) (format.getChannels() * (format.getSampleSizeInBits() >> 3)),\n                (short) format.getSampleSizeInBits()), 44, calcDataSize(format.getChannels(),\n                format.getSampleSizeInBits() >> 3, samples));\n        return w;\n    }", "language": "java", "code": "public static WavHeader createWavHeader(AudioFormat format, int samples) {\n        WavHeader w = new WavHeader(\"RIFF\", 40, \"WAVE\", new FmtChunk((short) 1, (short) format.getChannels(), format.getSampleRate(),\n                format.getSampleRate() * format.getChannels() * (format.getSampleSizeInBits() >> 3),\n                (short) (format.getChannels() * (format.getSampleSizeInBits() >> 3)),\n                (short) format.getSampleSizeInBits()), 44, calcDataSize(format.getChannels(),\n                format.getSampleSizeInBits() >> 3, samples));\n        return w;\n    }", "code_tokens": ["public", "static", "WavHeader", "createWavHeader", "(", "AudioFormat", "format", ",", "int", "samples", ")", "{", "WavHeader", "w", "=", "new", "WavHeader", "(", "\"RIFF\"", ",", "40", ",", "\"WAVE\"", ",", "new", "FmtChunk", "(", "(", "short", ")", "1", ",", "(", "short", ")", "format", ".", "getChannels", "(", ")", ",", "format", ".", "getSampleRate", "(", ")", ",", "format", ".", "getSampleRate", "(", ")", "*", "format", ".", "getChannels", "(", ")", "*", "(", "format", ".", "getSampleSizeInBits", "(", ")", ">>", "3", ")", ",", "(", "short", ")", "(", "format", ".", "getChannels", "(", ")", "*", "(", "format", ".", "getSampleSizeInBits", "(", ")", ">>", "3", ")", ")", ",", "(", "short", ")", "format", ".", "getSampleSizeInBits", "(", ")", ")", ",", "44", ",", "calcDataSize", "(", "format", ".", "getChannels", "(", ")", ",", "format", ".", "getSampleSizeInBits", "(", ")", ">>", "3", ",", "samples", ")", ")", ";", "return", "w", ";", "}"], "docstring": "Creates wav header for the specified audio format\n\n@param format\n@param samples", "docstring_tokens": ["Creates", "wav", "header", "for", "the", "specified", "audio", "format"], "sha": "cd6efa51ef05f409a8ba8cfb7521f4b4f10ccc75", "url": "https://github.com/jcodec/jcodec/blob/cd6efa51ef05f409a8ba8cfb7521f4b4f10ccc75/src/main/java/org/jcodec/codecs/wav/WavHeader.java#L180-L187", "partition": "test"}
{"repo": "real-logic/aeron", "path": "aeron-client/src/main/java/io/aeron/DirectBufferVector.java", "func_name": "DirectBufferVector.validateAndComputeLength", "original_string": "public static int validateAndComputeLength(final DirectBufferVector[] vectors)\n    {\n        int messageLength = 0;\n        for (final DirectBufferVector vector : vectors)\n        {\n            vector.validate();\n            messageLength += vector.length;\n\n            if (messageLength < 0)\n            {\n                throw new IllegalStateException(\"length overflow: \" + Arrays.toString(vectors));\n            }\n        }\n\n        return messageLength;\n    }", "language": "java", "code": "public static int validateAndComputeLength(final DirectBufferVector[] vectors)\n    {\n        int messageLength = 0;\n        for (final DirectBufferVector vector : vectors)\n        {\n            vector.validate();\n            messageLength += vector.length;\n\n            if (messageLength < 0)\n            {\n                throw new IllegalStateException(\"length overflow: \" + Arrays.toString(vectors));\n            }\n        }\n\n        return messageLength;\n    }", "code_tokens": ["public", "static", "int", "validateAndComputeLength", "(", "final", "DirectBufferVector", "[", "]", "vectors", ")", "{", "int", "messageLength", "=", "0", ";", "for", "(", "final", "DirectBufferVector", "vector", ":", "vectors", ")", "{", "vector", ".", "validate", "(", ")", ";", "messageLength", "+=", "vector", ".", "length", ";", "if", "(", "messageLength", "<", "0", ")", "{", "throw", "new", "IllegalStateException", "(", "\"length overflow: \"", "+", "Arrays", ".", "toString", "(", "vectors", ")", ")", ";", "}", "}", "return", "messageLength", ";", "}"], "docstring": "Validate an array of vectors to make up a message and compute the total length.\n\n@param vectors to be validated summed.\n@return the sum of the vector lengths.", "docstring_tokens": ["Validate", "an", "array", "of", "vectors", "to", "make", "up", "a", "message", "and", "compute", "the", "total", "length", "."], "sha": "045c32f0256d1ea35d562520216affc281a41239", "url": "https://github.com/real-logic/aeron/blob/045c32f0256d1ea35d562520216affc281a41239/aeron-client/src/main/java/io/aeron/DirectBufferVector.java#L174-L189", "partition": "test"}
{"repo": "OpenEstate/OpenEstate-IO", "path": "ImmoXML/src/main/jaxb/org/openestate/io/immoxml/xml/Objektart.java", "func_name": "Objektart.getGastgewerbe", "original_string": "@Generated(value = \"com.sun.tools.xjc.Driver\", date = \"2018-10-12T02:50:55+02:00\", comments = \"JAXB RI v2.2.11\")\n    public List<Gastgewerbe> getGastgewerbe() {\n        if (gastgewerbe == null) {\n            gastgewerbe = new ArrayList<Gastgewerbe>();\n        }\n        return this.gastgewerbe;\n    }", "language": "java", "code": "@Generated(value = \"com.sun.tools.xjc.Driver\", date = \"2018-10-12T02:50:55+02:00\", comments = \"JAXB RI v2.2.11\")\n    public List<Gastgewerbe> getGastgewerbe() {\n        if (gastgewerbe == null) {\n            gastgewerbe = new ArrayList<Gastgewerbe>();\n        }\n        return this.gastgewerbe;\n    }", "code_tokens": ["@", "Generated", "(", "value", "=", "\"com.sun.tools.xjc.Driver\"", ",", "date", "=", "\"2018-10-12T02:50:55+02:00\"", ",", "comments", "=", "\"JAXB RI v2.2.11\"", ")", "public", "List", "<", "Gastgewerbe", ">", "getGastgewerbe", "(", ")", "{", "if", "(", "gastgewerbe", "==", "null", ")", "{", "gastgewerbe", "=", "new", "ArrayList", "<", "Gastgewerbe", ">", "(", ")", ";", "}", "return", "this", ".", "gastgewerbe", ";", "}"], "docstring": "Gets the value of the gastgewerbe property.\n\n<p>\nThis accessor method returns a reference to the live list,\nnot a snapshot. Therefore any modification you make to the\nreturned list will be present inside the JAXB object.\nThis is why there is not a <CODE>set</CODE> method for the gastgewerbe property.\n\n<p>\nFor example, to add a new item, do as follows:\n<pre>\ngetGastgewerbe().add(newItem);\n</pre>\n\n\n<p>\nObjects of the following type(s) are allowed in the list\n{@link Gastgewerbe }", "docstring_tokens": ["Gets", "the", "value", "of", "the", "gastgewerbe", "property", "."], "sha": "f961dae78f40823f05a8c0d4e59d639e718aa18a", "url": "https://github.com/OpenEstate/OpenEstate-IO/blob/f961dae78f40823f05a8c0d4e59d639e718aa18a/ImmoXML/src/main/jaxb/org/openestate/io/immoxml/xml/Objektart.java#L284-L290", "partition": "test"}
{"repo": "Unidata/thredds", "path": "opendap/src/main/java/opendap/dap/DConnect2.java", "func_name": "DConnect2.getDDS", "original_string": "public DDS getDDS(String CE) throws IOException, ParseException, DAP2Exception\n    {\n        DDSCommand command = new DDSCommand();\n        command.setURL(CE == null || CE.length() == 0 ? urlString : urlString + \"?\" + CE);\n        if(filePath != null) {\n            try (FileInputStream is = new FileInputStream(filePath + \".dds\")) {\n                command.process(is);\n            }\n        } else if(stream != null) {\n            command.process(stream);\n        } else { // must be a remote url\n            openConnection(urlString + \".dds\" + (getCompleteCE(CE)), command);\n        }\n        return command.dds;\n    }", "language": "java", "code": "public DDS getDDS(String CE) throws IOException, ParseException, DAP2Exception\n    {\n        DDSCommand command = new DDSCommand();\n        command.setURL(CE == null || CE.length() == 0 ? urlString : urlString + \"?\" + CE);\n        if(filePath != null) {\n            try (FileInputStream is = new FileInputStream(filePath + \".dds\")) {\n                command.process(is);\n            }\n        } else if(stream != null) {\n            command.process(stream);\n        } else { // must be a remote url\n            openConnection(urlString + \".dds\" + (getCompleteCE(CE)), command);\n        }\n        return command.dds;\n    }", "code_tokens": ["public", "DDS", "getDDS", "(", "String", "CE", ")", "throws", "IOException", ",", "ParseException", ",", "DAP2Exception", "{", "DDSCommand", "command", "=", "new", "DDSCommand", "(", ")", ";", "command", ".", "setURL", "(", "CE", "==", "null", "||", "CE", ".", "length", "(", ")", "==", "0", "?", "urlString", ":", "urlString", "+", "\"?\"", "+", "CE", ")", ";", "if", "(", "filePath", "!=", "null", ")", "{", "try", "(", "FileInputStream", "is", "=", "new", "FileInputStream", "(", "filePath", "+", "\".dds\"", ")", ")", "{", "command", ".", "process", "(", "is", ")", ";", "}", "}", "else", "if", "(", "stream", "!=", "null", ")", "{", "command", ".", "process", "(", "stream", ")", ";", "}", "else", "{", "// must be a remote url", "openConnection", "(", "urlString", "+", "\".dds\"", "+", "(", "getCompleteCE", "(", "CE", ")", ")", ",", "command", ")", ";", "}", "return", "command", ".", "dds", ";", "}"], "docstring": "Returns the DDS object from the dataset referenced by this object's URL.\nThe DDS object is referred to by appending `.dds' to the end of a OPeNDAP\nURL.\n\n@param CE The constraint expression to be applied to this request by the\nserver.  This is combined with any CE given in the constructor.\n@return the DDS associated with the referenced dataset.\n@throws MalformedURLException if the URL given to the constructor\nhas an error\n@throws IOException           if an error connecting to the remote server\n@throws ParseException        if the DDS parser returned an error\n@throws DDSException          on an error constructing the DDS\n@throws DAP2Exception         if an error returned by the remote server", "docstring_tokens": ["Returns", "the", "DDS", "object", "from", "the", "dataset", "referenced", "by", "this", "object", "s", "URL", ".", "The", "DDS", "object", "is", "referred", "to", "by", "appending", ".", "dds", "to", "the", "end", "of", "a", "OPeNDAP", "URL", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/opendap/src/main/java/opendap/dap/DConnect2.java#L591-L605", "partition": "test"}
{"repo": "Unidata/thredds", "path": "cdm/src/main/java/ucar/nc2/util/rc/RC.java", "func_name": "RC.urlMatch", "original_string": "static boolean\n  urlMatch(URL pattern, URL url) {\n    int relation;\n\n    if (pattern == null)\n      return (url == null);\n\n    if (!(url.getHost().endsWith(pattern.getHost())))\n      return false; // e.g. pattern=x.y.org url=y.org\n\n    if (!(url.getPath().startsWith(pattern.getPath())))\n      return false; // e.g. pattern=y.org/a/b url=y.org/a\n\n    if (pattern.getPort() > 0 && pattern.getPort() != url.getPort())\n      return false;\n\n    // note: all other fields are ignored\n\n    return true;\n  }", "language": "java", "code": "static boolean\n  urlMatch(URL pattern, URL url) {\n    int relation;\n\n    if (pattern == null)\n      return (url == null);\n\n    if (!(url.getHost().endsWith(pattern.getHost())))\n      return false; // e.g. pattern=x.y.org url=y.org\n\n    if (!(url.getPath().startsWith(pattern.getPath())))\n      return false; // e.g. pattern=y.org/a/b url=y.org/a\n\n    if (pattern.getPort() > 0 && pattern.getPort() != url.getPort())\n      return false;\n\n    // note: all other fields are ignored\n\n    return true;\n  }", "code_tokens": ["static", "boolean", "urlMatch", "(", "URL", "pattern", ",", "URL", "url", ")", "{", "int", "relation", ";", "if", "(", "pattern", "==", "null", ")", "return", "(", "url", "==", "null", ")", ";", "if", "(", "!", "(", "url", ".", "getHost", "(", ")", ".", "endsWith", "(", "pattern", ".", "getHost", "(", ")", ")", ")", ")", "return", "false", ";", "// e.g. pattern=x.y.org url=y.org", "if", "(", "!", "(", "url", ".", "getPath", "(", ")", ".", "startsWith", "(", "pattern", ".", "getPath", "(", ")", ")", ")", ")", "return", "false", ";", "// e.g. pattern=y.org/a/b url=y.org/a", "if", "(", "pattern", ".", "getPort", "(", ")", ">", "0", "&&", "pattern", ".", "getPort", "(", ")", "!=", "url", ".", "getPort", "(", ")", ")", "return", "false", ";", "// note: all other fields are ignored", "return", "true", ";", "}"], "docstring": "Match has different semantics than urlCompare", "docstring_tokens": ["Match", "has", "different", "semantics", "than", "urlCompare"], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/cdm/src/main/java/ucar/nc2/util/rc/RC.java#L106-L125", "partition": "test"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/TimerTask.java", "func_name": "TimerTask.retryTimeout", "original_string": "protected void retryTimeout(TimerImpl timer) throws Exception {\n        boolean callTimeout = false;\n\n        timer.lock();\n        try {\n            if (timer.isActive()) {\n                EJB3_TIMER_LOGGER.retryingTimeout(timer);\n                timer.setTimerState(TimerState.RETRY_TIMEOUT, Thread.currentThread());\n                timerService.persistTimer(timer, false);\n                callTimeout = true;\n            } else {\n                EJB3_TIMER_LOGGER.timerNotActive(timer);\n            }\n        } finally {\n            timer.unlock();\n        }\n        if(callTimeout) {\n            this.callTimeout(timer);\n        }\n    }", "language": "java", "code": "protected void retryTimeout(TimerImpl timer) throws Exception {\n        boolean callTimeout = false;\n\n        timer.lock();\n        try {\n            if (timer.isActive()) {\n                EJB3_TIMER_LOGGER.retryingTimeout(timer);\n                timer.setTimerState(TimerState.RETRY_TIMEOUT, Thread.currentThread());\n                timerService.persistTimer(timer, false);\n                callTimeout = true;\n            } else {\n                EJB3_TIMER_LOGGER.timerNotActive(timer);\n            }\n        } finally {\n            timer.unlock();\n        }\n        if(callTimeout) {\n            this.callTimeout(timer);\n        }\n    }", "code_tokens": ["protected", "void", "retryTimeout", "(", "TimerImpl", "timer", ")", "throws", "Exception", "{", "boolean", "callTimeout", "=", "false", ";", "timer", ".", "lock", "(", ")", ";", "try", "{", "if", "(", "timer", ".", "isActive", "(", ")", ")", "{", "EJB3_TIMER_LOGGER", ".", "retryingTimeout", "(", "timer", ")", ";", "timer", ".", "setTimerState", "(", "TimerState", ".", "RETRY_TIMEOUT", ",", "Thread", ".", "currentThread", "(", ")", ")", ";", "timerService", ".", "persistTimer", "(", "timer", ",", "false", ")", ";", "callTimeout", "=", "true", ";", "}", "else", "{", "EJB3_TIMER_LOGGER", ".", "timerNotActive", "(", "timer", ")", ";", "}", "}", "finally", "{", "timer", ".", "unlock", "(", ")", ";", "}", "if", "(", "callTimeout", ")", "{", "this", ".", "callTimeout", "(", "timer", ")", ";", "}", "}"], "docstring": "After a timeout failed the timer need to retried.\nThe method must lock the timer for state check and update but not during callTimeout run.\n\n@param timer timer to retry and state updates\n@throws Exception", "docstring_tokens": ["After", "a", "timeout", "failed", "the", "timer", "need", "to", "retried", ".", "The", "method", "must", "lock", "the", "timer", "for", "state", "check", "and", "update", "but", "not", "during", "callTimeout", "run", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/timerservice/TimerTask.java#L235-L254", "partition": "test"}
{"repo": "rupertlssmith/lojix", "path": "lojix/logic/src/main/com/thesett/aima/logic/fol/isoprologparser/PrologParser.java", "func_name": "PrologParser.main", "original_string": "public static void main(String[] args)\n    {\n        try\n        {\n            SimpleCharStream inputStream = new SimpleCharStream(System.in, null, 1, 1);\n            PrologParserTokenManager tokenManager = new PrologParserTokenManager(inputStream);\n            Source<Token> tokenSource = new TokenSource(tokenManager);\n\n            PrologParser parser =\n                new PrologParser(tokenSource,\n                    new VariableAndFunctorInternerImpl(\"Prolog_Variable_Namespace\", \"Prolog_Functor_Namespace\"));\n\n            while (true)\n            {\n                // Parse the next sentence or directive.\n                Object nextParsing = parser.clause();\n\n                console.info(nextParsing.toString());\n            }\n        }\n        catch (Exception e)\n        {\n            console.log(Level.SEVERE, e.getMessage(), e);\n            System.exit(1);\n        }\n    }", "language": "java", "code": "public static void main(String[] args)\n    {\n        try\n        {\n            SimpleCharStream inputStream = new SimpleCharStream(System.in, null, 1, 1);\n            PrologParserTokenManager tokenManager = new PrologParserTokenManager(inputStream);\n            Source<Token> tokenSource = new TokenSource(tokenManager);\n\n            PrologParser parser =\n                new PrologParser(tokenSource,\n                    new VariableAndFunctorInternerImpl(\"Prolog_Variable_Namespace\", \"Prolog_Functor_Namespace\"));\n\n            while (true)\n            {\n                // Parse the next sentence or directive.\n                Object nextParsing = parser.clause();\n\n                console.info(nextParsing.toString());\n            }\n        }\n        catch (Exception e)\n        {\n            console.log(Level.SEVERE, e.getMessage(), e);\n            System.exit(1);\n        }\n    }", "code_tokens": ["public", "static", "void", "main", "(", "String", "[", "]", "args", ")", "{", "try", "{", "SimpleCharStream", "inputStream", "=", "new", "SimpleCharStream", "(", "System", ".", "in", ",", "null", ",", "1", ",", "1", ")", ";", "PrologParserTokenManager", "tokenManager", "=", "new", "PrologParserTokenManager", "(", "inputStream", ")", ";", "Source", "<", "Token", ">", "tokenSource", "=", "new", "TokenSource", "(", "tokenManager", ")", ";", "PrologParser", "parser", "=", "new", "PrologParser", "(", "tokenSource", ",", "new", "VariableAndFunctorInternerImpl", "(", "\"Prolog_Variable_Namespace\"", ",", "\"Prolog_Functor_Namespace\"", ")", ")", ";", "while", "(", "true", ")", "{", "// Parse the next sentence or directive.", "Object", "nextParsing", "=", "parser", ".", "clause", "(", ")", ";", "console", ".", "info", "(", "nextParsing", ".", "toString", "(", ")", ")", ";", "}", "}", "catch", "(", "Exception", "e", ")", "{", "console", ".", "log", "(", "Level", ".", "SEVERE", ",", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "System", ".", "exit", "(", "1", ")", ";", "}", "}"], "docstring": "Parses statements and print the parse tree to the console for quick interactive testing of the parser.\n\n@param args The command line arguments.", "docstring_tokens": ["Parses", "statements", "and", "print", "the", "parse", "tree", "to", "the", "console", "for", "quick", "interactive", "testing", "of", "the", "parser", "."], "sha": "ad494dc8bce2345567de7689d42291d4b30fbd51", "url": "https://github.com/rupertlssmith/lojix/blob/ad494dc8bce2345567de7689d42291d4b30fbd51/lojix/logic/src/main/com/thesett/aima/logic/fol/isoprologparser/PrologParser.java#L141-L166", "partition": "test"}
{"repo": "streamsets/datacollector", "path": "common/src/main/java/com/streamsets/pipeline/lib/parser/shaded/com/google/code/regexp/Pattern.java", "func_name": "Pattern.isInsideCharClass", "original_string": "static private boolean isInsideCharClass(String s, int pos) {\n\n        boolean openBracketFound = false;\n        boolean closeBracketFound = false;\n\n        // find last non-escaped open-bracket\n        String s2 = s.substring(0, pos);\n        int posOpen = pos;\n        while ((posOpen = s2.lastIndexOf('[', posOpen - 1)) != -1) {\n            if (!isEscapedChar(s2, posOpen)) {\n                openBracketFound = true;\n                break;\n            }\n        }\n\n        if (openBracketFound) {\n            // search remainder of string (after open-bracket) for a close-bracket\n            String s3 = s.substring(posOpen, pos);\n            int posClose = -1;\n            while ((posClose = s3.indexOf(']', posClose + 1)) != -1) {\n                if (!isEscapedChar(s3, posClose)) {\n                    closeBracketFound = true;\n                    break;\n                }\n            }\n        }\n\n        return openBracketFound && !closeBracketFound;\n    }", "language": "java", "code": "static private boolean isInsideCharClass(String s, int pos) {\n\n        boolean openBracketFound = false;\n        boolean closeBracketFound = false;\n\n        // find last non-escaped open-bracket\n        String s2 = s.substring(0, pos);\n        int posOpen = pos;\n        while ((posOpen = s2.lastIndexOf('[', posOpen - 1)) != -1) {\n            if (!isEscapedChar(s2, posOpen)) {\n                openBracketFound = true;\n                break;\n            }\n        }\n\n        if (openBracketFound) {\n            // search remainder of string (after open-bracket) for a close-bracket\n            String s3 = s.substring(posOpen, pos);\n            int posClose = -1;\n            while ((posClose = s3.indexOf(']', posClose + 1)) != -1) {\n                if (!isEscapedChar(s3, posClose)) {\n                    closeBracketFound = true;\n                    break;\n                }\n            }\n        }\n\n        return openBracketFound && !closeBracketFound;\n    }", "code_tokens": ["static", "private", "boolean", "isInsideCharClass", "(", "String", "s", ",", "int", "pos", ")", "{", "boolean", "openBracketFound", "=", "false", ";", "boolean", "closeBracketFound", "=", "false", ";", "// find last non-escaped open-bracket", "String", "s2", "=", "s", ".", "substring", "(", "0", ",", "pos", ")", ";", "int", "posOpen", "=", "pos", ";", "while", "(", "(", "posOpen", "=", "s2", ".", "lastIndexOf", "(", "'", "'", ",", "posOpen", "-", "1", ")", ")", "!=", "-", "1", ")", "{", "if", "(", "!", "isEscapedChar", "(", "s2", ",", "posOpen", ")", ")", "{", "openBracketFound", "=", "true", ";", "break", ";", "}", "}", "if", "(", "openBracketFound", ")", "{", "// search remainder of string (after open-bracket) for a close-bracket", "String", "s3", "=", "s", ".", "substring", "(", "posOpen", ",", "pos", ")", ";", "int", "posClose", "=", "-", "1", ";", "while", "(", "(", "posClose", "=", "s3", ".", "indexOf", "(", "'", "'", ",", "posClose", "+", "1", ")", ")", "!=", "-", "1", ")", "{", "if", "(", "!", "isEscapedChar", "(", "s3", ",", "posClose", ")", ")", "{", "closeBracketFound", "=", "true", ";", "break", ";", "}", "}", "}", "return", "openBracketFound", "&&", "!", "closeBracketFound", ";", "}"], "docstring": "Determines if a string's character is within a regex character class\n\n@param s string to evaluate\n@param pos the position of the character to evaluate\n@return true if the character is inside a character class; otherwise false", "docstring_tokens": ["Determines", "if", "a", "string", "s", "character", "is", "within", "a", "regex", "character", "class"], "sha": "ea63245ea14d59d5229248387f0628f46131eae5", "url": "https://github.com/streamsets/datacollector/blob/ea63245ea14d59d5229248387f0628f46131eae5/common/src/main/java/com/streamsets/pipeline/lib/parser/shaded/com/google/code/regexp/Pattern.java#L360-L388", "partition": "test"}
{"repo": "tiefaces/TieFaces", "path": "src/org/tiefaces/components/websheet/utility/CellStyleUtility.java", "func_name": "CellStyleUtility.getCellFontDecoration", "original_string": "private static String getCellFontDecoration(final Font font) {\r\n\t\tStringBuilder decoration = new StringBuilder();\r\n\t\tif (font.getUnderline() != 0) {\r\n\t\t\tdecoration.append(\" underline\");\r\n\t\t}\r\n\t\tif (font.getStrikeout()) {\r\n\t\t\tdecoration.append(\" line-through\");\r\n\t\t}\r\n\t\treturn decoration.toString();\r\n\t}", "language": "java", "code": "private static String getCellFontDecoration(final Font font) {\r\n\t\tStringBuilder decoration = new StringBuilder();\r\n\t\tif (font.getUnderline() != 0) {\r\n\t\t\tdecoration.append(\" underline\");\r\n\t\t}\r\n\t\tif (font.getStrikeout()) {\r\n\t\t\tdecoration.append(\" line-through\");\r\n\t\t}\r\n\t\treturn decoration.toString();\r\n\t}", "code_tokens": ["private", "static", "String", "getCellFontDecoration", "(", "final", "Font", "font", ")", "{", "StringBuilder", "decoration", "=", "new", "StringBuilder", "(", ")", ";", "if", "(", "font", ".", "getUnderline", "(", ")", "!=", "0", ")", "{", "decoration", ".", "append", "(", "\" underline\"", ")", ";", "}", "if", "(", "font", ".", "getStrikeout", "(", ")", ")", "{", "decoration", ".", "append", "(", "\" line-through\"", ")", ";", "}", "return", "decoration", ".", "toString", "(", ")", ";", "}"], "docstring": "Get font decoration.\n\n@param font\nfont.\n@return font decoration.", "docstring_tokens": ["Get", "font", "decoration", "."], "sha": "3b57b9701ed0f080b5fa4fa78269cc0c422b34ba", "url": "https://github.com/tiefaces/TieFaces/blob/3b57b9701ed0f080b5fa4fa78269cc0c422b34ba/src/org/tiefaces/components/websheet/utility/CellStyleUtility.java#L137-L146", "partition": "test"}
{"repo": "jsevellec/cassandra-unit", "path": "cassandra-unit/src/main/java/org/cassandraunit/utils/EmbeddedCassandraServerHelper.java", "func_name": "EmbeddedCassandraServerHelper.copy", "original_string": "private static Path copy(String resource, String directory) throws IOException {\n        mkdir(directory);\n        String fileName = resource.substring(resource.lastIndexOf(\"/\") + 1);\n        InputStream from = EmbeddedCassandraServerHelper.class.getResourceAsStream(resource);\n        Path copyName = Paths.get(directory, fileName);\n        Files.copy(from, copyName);\n        return copyName;\n    }", "language": "java", "code": "private static Path copy(String resource, String directory) throws IOException {\n        mkdir(directory);\n        String fileName = resource.substring(resource.lastIndexOf(\"/\") + 1);\n        InputStream from = EmbeddedCassandraServerHelper.class.getResourceAsStream(resource);\n        Path copyName = Paths.get(directory, fileName);\n        Files.copy(from, copyName);\n        return copyName;\n    }", "code_tokens": ["private", "static", "Path", "copy", "(", "String", "resource", ",", "String", "directory", ")", "throws", "IOException", "{", "mkdir", "(", "directory", ")", ";", "String", "fileName", "=", "resource", ".", "substring", "(", "resource", ".", "lastIndexOf", "(", "\"/\"", ")", "+", "1", ")", ";", "InputStream", "from", "=", "EmbeddedCassandraServerHelper", ".", "class", ".", "getResourceAsStream", "(", "resource", ")", ";", "Path", "copyName", "=", "Paths", ".", "get", "(", "directory", ",", "fileName", ")", ";", "Files", ".", "copy", "(", "from", ",", "copyName", ")", ";", "return", "copyName", ";", "}"], "docstring": "Copies a resource from within the jar to a directory.\n\n@param resource\n@param directory\n@throws IOException", "docstring_tokens": ["Copies", "a", "resource", "from", "within", "the", "jar", "to", "a", "directory", "."], "sha": "546ef0da4510835b77cb18770209fb0f4568dc14", "url": "https://github.com/jsevellec/cassandra-unit/blob/546ef0da4510835b77cb18770209fb0f4568dc14/cassandra-unit/src/main/java/org/cassandraunit/utils/EmbeddedCassandraServerHelper.java#L309-L316", "partition": "test"}
{"repo": "orientechnologies/orientdb", "path": "core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/OMicroTransaction.java", "func_name": "OMicroTransaction.updateRecordCacheAfterRollback", "original_string": "public void updateRecordCacheAfterRollback() {\n    final OLocalRecordCache databaseLocalCache = database.getLocalCache();\n\n    for (ORecordOperation recordOperation : recordOperations.values())\n      databaseLocalCache.deleteRecord(recordOperation.getRecord().getIdentity());\n  }", "language": "java", "code": "public void updateRecordCacheAfterRollback() {\n    final OLocalRecordCache databaseLocalCache = database.getLocalCache();\n\n    for (ORecordOperation recordOperation : recordOperations.values())\n      databaseLocalCache.deleteRecord(recordOperation.getRecord().getIdentity());\n  }", "code_tokens": ["public", "void", "updateRecordCacheAfterRollback", "(", ")", "{", "final", "OLocalRecordCache", "databaseLocalCache", "=", "database", ".", "getLocalCache", "(", ")", ";", "for", "(", "ORecordOperation", "recordOperation", ":", "recordOperations", ".", "values", "(", ")", ")", "databaseLocalCache", ".", "deleteRecord", "(", "recordOperation", ".", "getRecord", "(", ")", ".", "getIdentity", "(", ")", ")", ";", "}"], "docstring": "Updates the record cache after unsuccessful micro-transaction commit.", "docstring_tokens": ["Updates", "the", "record", "cache", "after", "unsuccessful", "micro", "-", "transaction", "commit", "."], "sha": "d970b12033f0462f0239ea0ad8ed41207e6e26f1", "url": "https://github.com/orientechnologies/orientdb/blob/d970b12033f0462f0239ea0ad8ed41207e6e26f1/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/OMicroTransaction.java#L282-L287", "partition": "test"}
{"repo": "nyla-solutions/gedi-geode", "path": "gedi-geode-extensions-core/src/main/java/gedi/solutions/geode/util/GemFireMgmt.java", "func_name": "GemFireMgmt.shutDown", "original_string": "public static String [] shutDown(JMX jmx)\n\t{\n\t\ttry\n\t\t{\n\t\t\t\n\t\t\tDistributedSystemMXBean bean = toDistributeSystem(jmx);\n\t\t\t\n\n\t\t\treturn bean.shutDownAllMembers();\n\t\t\t\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tthrow new RuntimeException(\" ERROR:\"+e.getMessage(),e);\n\t\t}\n\t\t\n\t}", "language": "java", "code": "public static String [] shutDown(JMX jmx)\n\t{\n\t\ttry\n\t\t{\n\t\t\t\n\t\t\tDistributedSystemMXBean bean = toDistributeSystem(jmx);\n\t\t\t\n\n\t\t\treturn bean.shutDownAllMembers();\n\t\t\t\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tthrow new RuntimeException(\" ERROR:\"+e.getMessage(),e);\n\t\t}\n\t\t\n\t}", "code_tokens": ["public", "static", "String", "[", "]", "shutDown", "(", "JMX", "jmx", ")", "{", "try", "{", "DistributedSystemMXBean", "bean", "=", "toDistributeSystem", "(", "jmx", ")", ";", "return", "bean", ".", "shutDownAllMembers", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "RuntimeException", "(", "\" ERROR:\"", "+", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "docstring": "Does not stop locators", "docstring_tokens": ["Does", "not", "stop", "locators"], "sha": "3dd71d6e66e941ce350b306b70677ee95a7d9eee", "url": "https://github.com/nyla-solutions/gedi-geode/blob/3dd71d6e66e941ce350b306b70677ee95a7d9eee/gedi-geode-extensions-core/src/main/java/gedi/solutions/geode/util/GemFireMgmt.java#L170-L186", "partition": "test"}
{"repo": "Unidata/thredds", "path": "cdm/src/main/java/ucar/ma2/StructureMembers.java", "func_name": "StructureMembers.findMember", "original_string": "public Member findMember(String memberName) {\n    if (memberName == null) return null;\n    \n    if (memberHash == null) { // delay making the hash table until needed\n      int initial_capacity = (int) (members.size() / .75) + 1;\n      memberHash = new HashMap<>(initial_capacity);\n      for (Member m : members)\n        memberHash.put(m.getName(), m);\n    }\n    return memberHash.get(memberName);\n  }", "language": "java", "code": "public Member findMember(String memberName) {\n    if (memberName == null) return null;\n    \n    if (memberHash == null) { // delay making the hash table until needed\n      int initial_capacity = (int) (members.size() / .75) + 1;\n      memberHash = new HashMap<>(initial_capacity);\n      for (Member m : members)\n        memberHash.put(m.getName(), m);\n    }\n    return memberHash.get(memberName);\n  }", "code_tokens": ["public", "Member", "findMember", "(", "String", "memberName", ")", "{", "if", "(", "memberName", "==", "null", ")", "return", "null", ";", "if", "(", "memberHash", "==", "null", ")", "{", "// delay making the hash table until needed", "int", "initial_capacity", "=", "(", "int", ")", "(", "members", ".", "size", "(", ")", "/", ".75", ")", "+", "1", ";", "memberHash", "=", "new", "HashMap", "<>", "(", "initial_capacity", ")", ";", "for", "(", "Member", "m", ":", "members", ")", "memberHash", ".", "put", "(", "m", ".", "getName", "(", ")", ",", "m", ")", ";", "}", "return", "memberHash", ".", "get", "(", "memberName", ")", ";", "}"], "docstring": "Find the member by its name.\n\n@param memberName find by this name\n@return Member matching the name, or null if not found", "docstring_tokens": ["Find", "the", "member", "by", "its", "name", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/cdm/src/main/java/ucar/ma2/StructureMembers.java#L158-L168", "partition": "test"}
{"repo": "subchen/jetbrick-all-1x", "path": "jetbrick-commons/src/main/java/jetbrick/lang/WildcharUtils.java", "func_name": "WildcharUtils.match", "original_string": "public static boolean match(String string, String pattern) {\n        if (string.equals(pattern)) { // speed-up\n            return true;\n        }\n        return match(string, pattern, 0, 0);\n    }", "language": "java", "code": "public static boolean match(String string, String pattern) {\n        if (string.equals(pattern)) { // speed-up\n            return true;\n        }\n        return match(string, pattern, 0, 0);\n    }", "code_tokens": ["public", "static", "boolean", "match", "(", "String", "string", ",", "String", "pattern", ")", "{", "if", "(", "string", ".", "equals", "(", "pattern", ")", ")", "{", "// speed-up", "return", "true", ";", "}", "return", "match", "(", "string", ",", "pattern", ",", "0", ",", "0", ")", ";", "}"], "docstring": "Checks whether a string matches a given wildcard pattern.\n\n@param string    input string\n@param pattern   pattern to match\n@return          <code>true</code> if string matches the pattern, otherwise <code>false</code>", "docstring_tokens": ["Checks", "whether", "a", "string", "matches", "a", "given", "wildcard", "pattern", "."], "sha": "abe54629a508592287afe5ca4ffc93bf8bf4940c", "url": "https://github.com/subchen/jetbrick-all-1x/blob/abe54629a508592287afe5ca4ffc93bf8bf4940c/jetbrick-commons/src/main/java/jetbrick/lang/WildcharUtils.java#L37-L42", "partition": "test"}
{"repo": "Enterprise-Content-Management/infoarchive-sip-sdk", "path": "core/src/main/java/com/opentext/ia/sdk/support/xml/XmlUtil.java", "func_name": "XmlUtil.validate", "original_string": "public static void validate(InputStream xml, InputStream xmlSchema, String humanFriendlyDocumentType)\n      throws IOException {\n    try {\n      newXmlSchemaValidator(xmlSchema).validate(new StreamSource(Objects.requireNonNull(xml)));\n    } catch (SAXException e) {\n      throw new ValidationException(\"Invalid \" + humanFriendlyDocumentType, e);\n    }\n  }", "language": "java", "code": "public static void validate(InputStream xml, InputStream xmlSchema, String humanFriendlyDocumentType)\n      throws IOException {\n    try {\n      newXmlSchemaValidator(xmlSchema).validate(new StreamSource(Objects.requireNonNull(xml)));\n    } catch (SAXException e) {\n      throw new ValidationException(\"Invalid \" + humanFriendlyDocumentType, e);\n    }\n  }", "code_tokens": ["public", "static", "void", "validate", "(", "InputStream", "xml", ",", "InputStream", "xmlSchema", ",", "String", "humanFriendlyDocumentType", ")", "throws", "IOException", "{", "try", "{", "newXmlSchemaValidator", "(", "xmlSchema", ")", ".", "validate", "(", "new", "StreamSource", "(", "Objects", ".", "requireNonNull", "(", "xml", ")", ")", ")", ";", "}", "catch", "(", "SAXException", "e", ")", "{", "throw", "new", "ValidationException", "(", "\"Invalid \"", "+", "humanFriendlyDocumentType", ",", "e", ")", ";", "}", "}"], "docstring": "Validate an XML document against an XML Schema document.\n@param xml The XML document to validate\n@param xmlSchema The XML Schema document to validate against\n@param humanFriendlyDocumentType A human-friendly name that describes the schema\n@throws IOException When an I/O error occurs", "docstring_tokens": ["Validate", "an", "XML", "document", "against", "an", "XML", "Schema", "document", "."], "sha": "3c84a4d9ce569139e9a442034526944d3e63436e", "url": "https://github.com/Enterprise-Content-Management/infoarchive-sip-sdk/blob/3c84a4d9ce569139e9a442034526944d3e63436e/core/src/main/java/com/opentext/ia/sdk/support/xml/XmlUtil.java#L457-L464", "partition": "test"}
{"repo": "FitLayout/api", "path": "src/main/java/org/fit/layout/api/ServiceManager.java", "func_name": "ServiceManager.getServiceParams", "original_string": "public static Map<String, Object> getServiceParams(ParametrizedOperation op)\n    {\n        Map<String, Object> ret = new HashMap<String, Object>();\n        for (Parameter param : op.getParams())\n        {\n            ret.put(param.getName(), op.getParam(param.getName()));\n        }\n        return ret;\n    }", "language": "java", "code": "public static Map<String, Object> getServiceParams(ParametrizedOperation op)\n    {\n        Map<String, Object> ret = new HashMap<String, Object>();\n        for (Parameter param : op.getParams())\n        {\n            ret.put(param.getName(), op.getParam(param.getName()));\n        }\n        return ret;\n    }", "code_tokens": ["public", "static", "Map", "<", "String", ",", "Object", ">", "getServiceParams", "(", "ParametrizedOperation", "op", ")", "{", "Map", "<", "String", ",", "Object", ">", "ret", "=", "new", "HashMap", "<", "String", ",", "Object", ">", "(", ")", ";", "for", "(", "Parameter", "param", ":", "op", ".", "getParams", "(", ")", ")", "{", "ret", ".", "put", "(", "param", ".", "getName", "(", ")", ",", "op", ".", "getParam", "(", "param", ".", "getName", "(", ")", ")", ")", ";", "}", "return", "ret", ";", "}"], "docstring": "Obtains the values of all the parametres of the given operation.\n@param op The operation whose parametres should be set\n@return A map that assigns values to parameter names", "docstring_tokens": ["Obtains", "the", "values", "of", "all", "the", "parametres", "of", "the", "given", "operation", "."], "sha": "fcfa67ce2a7485fbd722576413191fff5d68bae8", "url": "https://github.com/FitLayout/api/blob/fcfa67ce2a7485fbd722576413191fff5d68bae8/src/main/java/org/fit/layout/api/ServiceManager.java#L186-L194", "partition": "test"}
{"repo": "spring-projects/spring-security", "path": "config/src/main/java/org/springframework/security/config/annotation/web/configurers/AbstractAuthenticationFilterConfigurer.java", "func_name": "AbstractAuthenticationFilterConfigurer.updateAuthenticationDefaults", "original_string": "protected final void updateAuthenticationDefaults() {\n\t\tif (loginProcessingUrl == null) {\n\t\t\tloginProcessingUrl(loginPage);\n\t\t}\n\t\tif (failureHandler == null) {\n\t\t\tfailureUrl(loginPage + \"?error\");\n\t\t}\n\n\t\tfinal LogoutConfigurer<B> logoutConfigurer = getBuilder().getConfigurer(\n\t\t\t\tLogoutConfigurer.class);\n\t\tif (logoutConfigurer != null && !logoutConfigurer.isCustomLogoutSuccess()) {\n\t\t\tlogoutConfigurer.logoutSuccessUrl(loginPage + \"?logout\");\n\t\t}\n\t}", "language": "java", "code": "protected final void updateAuthenticationDefaults() {\n\t\tif (loginProcessingUrl == null) {\n\t\t\tloginProcessingUrl(loginPage);\n\t\t}\n\t\tif (failureHandler == null) {\n\t\t\tfailureUrl(loginPage + \"?error\");\n\t\t}\n\n\t\tfinal LogoutConfigurer<B> logoutConfigurer = getBuilder().getConfigurer(\n\t\t\t\tLogoutConfigurer.class);\n\t\tif (logoutConfigurer != null && !logoutConfigurer.isCustomLogoutSuccess()) {\n\t\t\tlogoutConfigurer.logoutSuccessUrl(loginPage + \"?logout\");\n\t\t}\n\t}", "code_tokens": ["protected", "final", "void", "updateAuthenticationDefaults", "(", ")", "{", "if", "(", "loginProcessingUrl", "==", "null", ")", "{", "loginProcessingUrl", "(", "loginPage", ")", ";", "}", "if", "(", "failureHandler", "==", "null", ")", "{", "failureUrl", "(", "loginPage", "+", "\"?error\"", ")", ";", "}", "final", "LogoutConfigurer", "<", "B", ">", "logoutConfigurer", "=", "getBuilder", "(", ")", ".", "getConfigurer", "(", "LogoutConfigurer", ".", "class", ")", ";", "if", "(", "logoutConfigurer", "!=", "null", "&&", "!", "logoutConfigurer", ".", "isCustomLogoutSuccess", "(", ")", ")", "{", "logoutConfigurer", ".", "logoutSuccessUrl", "(", "loginPage", "+", "\"?logout\"", ")", ";", "}", "}"], "docstring": "Updates the default values for authentication.\n\n@throws Exception", "docstring_tokens": ["Updates", "the", "default", "values", "for", "authentication", "."], "sha": "98a8467e4c2ae05b3e09c67ece856944fa48ed23", "url": "https://github.com/spring-projects/spring-security/blob/98a8467e4c2ae05b3e09c67ece856944fa48ed23/config/src/main/java/org/springframework/security/config/annotation/web/configurers/AbstractAuthenticationFilterConfigurer.java#L399-L412", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-json/src/main/java/jodd/json/impl/KeyValueJsonSerializer.java", "func_name": "KeyValueJsonSerializer.serializeKeyValue", "original_string": "protected int serializeKeyValue(final JsonContext jsonContext, final Path currentPath, final Object key, final Object value, int count) {\n\t\tif ((value == null) && jsonContext.isExcludeNulls()) {\n\t\t\treturn count;\n\t\t}\n\n\t\tif (key != null) {\n\t\t\tcurrentPath.push(key.toString());\n\t\t} else {\n\t\t\tcurrentPath.push(StringPool.NULL);\n\t\t}\n\n\t\t// check if we should include the field\n\n\t\tboolean include = true;\n\n\t\tif (value != null) {\n\n\t\t\t// + all collections are not serialized by default\n\n\t\t\tinclude = jsonContext.matchIgnoredPropertyTypes(value.getClass(), false, include);\n\n\t\t\t// + path queries: excludes/includes\n\n\t\t\tinclude = jsonContext.matchPathToQueries(include);\n\t\t}\n\n\t\t// done\n\n\t\tif (!include) {\n\t\t\tcurrentPath.pop();\n\t\t\treturn count;\n\t\t}\n\n\t\tif (key == null) {\n\t\t\tjsonContext.pushName(null, count > 0);\n\t\t} else {\n\t\t\tjsonContext.pushName(key.toString(), count > 0);\n\t\t}\n\n\t\tjsonContext.serialize(value);\n\n\t\tif (jsonContext.isNamePopped()) {\n\t\t\tcount++;\n\t\t}\n\n\t\tcurrentPath.pop();\n\t\treturn count;\n\t}", "language": "java", "code": "protected int serializeKeyValue(final JsonContext jsonContext, final Path currentPath, final Object key, final Object value, int count) {\n\t\tif ((value == null) && jsonContext.isExcludeNulls()) {\n\t\t\treturn count;\n\t\t}\n\n\t\tif (key != null) {\n\t\t\tcurrentPath.push(key.toString());\n\t\t} else {\n\t\t\tcurrentPath.push(StringPool.NULL);\n\t\t}\n\n\t\t// check if we should include the field\n\n\t\tboolean include = true;\n\n\t\tif (value != null) {\n\n\t\t\t// + all collections are not serialized by default\n\n\t\t\tinclude = jsonContext.matchIgnoredPropertyTypes(value.getClass(), false, include);\n\n\t\t\t// + path queries: excludes/includes\n\n\t\t\tinclude = jsonContext.matchPathToQueries(include);\n\t\t}\n\n\t\t// done\n\n\t\tif (!include) {\n\t\t\tcurrentPath.pop();\n\t\t\treturn count;\n\t\t}\n\n\t\tif (key == null) {\n\t\t\tjsonContext.pushName(null, count > 0);\n\t\t} else {\n\t\t\tjsonContext.pushName(key.toString(), count > 0);\n\t\t}\n\n\t\tjsonContext.serialize(value);\n\n\t\tif (jsonContext.isNamePopped()) {\n\t\t\tcount++;\n\t\t}\n\n\t\tcurrentPath.pop();\n\t\treturn count;\n\t}", "code_tokens": ["protected", "int", "serializeKeyValue", "(", "final", "JsonContext", "jsonContext", ",", "final", "Path", "currentPath", ",", "final", "Object", "key", ",", "final", "Object", "value", ",", "int", "count", ")", "{", "if", "(", "(", "value", "==", "null", ")", "&&", "jsonContext", ".", "isExcludeNulls", "(", ")", ")", "{", "return", "count", ";", "}", "if", "(", "key", "!=", "null", ")", "{", "currentPath", ".", "push", "(", "key", ".", "toString", "(", ")", ")", ";", "}", "else", "{", "currentPath", ".", "push", "(", "StringPool", ".", "NULL", ")", ";", "}", "// check if we should include the field", "boolean", "include", "=", "true", ";", "if", "(", "value", "!=", "null", ")", "{", "// + all collections are not serialized by default", "include", "=", "jsonContext", ".", "matchIgnoredPropertyTypes", "(", "value", ".", "getClass", "(", ")", ",", "false", ",", "include", ")", ";", "// + path queries: excludes/includes", "include", "=", "jsonContext", ".", "matchPathToQueries", "(", "include", ")", ";", "}", "// done", "if", "(", "!", "include", ")", "{", "currentPath", ".", "pop", "(", ")", ";", "return", "count", ";", "}", "if", "(", "key", "==", "null", ")", "{", "jsonContext", ".", "pushName", "(", "null", ",", "count", ">", "0", ")", ";", "}", "else", "{", "jsonContext", ".", "pushName", "(", "key", ".", "toString", "(", ")", ",", "count", ">", "0", ")", ";", "}", "jsonContext", ".", "serialize", "(", "value", ")", ";", "if", "(", "jsonContext", ".", "isNamePopped", "(", ")", ")", "{", "count", "++", ";", "}", "currentPath", ".", "pop", "(", ")", ";", "return", "count", ";", "}"], "docstring": "Serializes key and a value.", "docstring_tokens": ["Serializes", "key", "and", "a", "value", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-json/src/main/java/jodd/json/impl/KeyValueJsonSerializer.java#L40-L87", "partition": "test"}
{"repo": "jboss/jboss-common-core", "path": "src/main/java/org/jboss/util/stream/MarshalledValueInputStream.java", "func_name": "MarshalledValueInputStream.resolveClass", "original_string": "protected Class<?> resolveClass(ObjectStreamClass v)\n         throws IOException, ClassNotFoundException\n   {\n      ClassLoader loader = Thread.currentThread().getContextClassLoader();\n      String className = v.getName();\n      try\n      {\n         // JDK 6, by default, only supports array types (ex. [[B)  using Class.forName()\n         return Class.forName(className, false, loader);\n      }\n      catch (ClassNotFoundException cnfe)\n      {\n         Class cl = primClasses.get(className);\n         if (cl == null)\n            throw cnfe;\n         else\n            return cl;\n      }\n   }", "language": "java", "code": "protected Class<?> resolveClass(ObjectStreamClass v)\n         throws IOException, ClassNotFoundException\n   {\n      ClassLoader loader = Thread.currentThread().getContextClassLoader();\n      String className = v.getName();\n      try\n      {\n         // JDK 6, by default, only supports array types (ex. [[B)  using Class.forName()\n         return Class.forName(className, false, loader);\n      }\n      catch (ClassNotFoundException cnfe)\n      {\n         Class cl = primClasses.get(className);\n         if (cl == null)\n            throw cnfe;\n         else\n            return cl;\n      }\n   }", "code_tokens": ["protected", "Class", "<", "?", ">", "resolveClass", "(", "ObjectStreamClass", "v", ")", "throws", "IOException", ",", "ClassNotFoundException", "{", "ClassLoader", "loader", "=", "Thread", ".", "currentThread", "(", ")", ".", "getContextClassLoader", "(", ")", ";", "String", "className", "=", "v", ".", "getName", "(", ")", ";", "try", "{", "// JDK 6, by default, only supports array types (ex. [[B)  using Class.forName()", "return", "Class", ".", "forName", "(", "className", ",", "false", ",", "loader", ")", ";", "}", "catch", "(", "ClassNotFoundException", "cnfe", ")", "{", "Class", "cl", "=", "primClasses", ".", "get", "(", "className", ")", ";", "if", "(", "cl", "==", "null", ")", "throw", "cnfe", ";", "else", "return", "cl", ";", "}", "}"], "docstring": "Use the thread context class loader to resolve the class\n\n@throws java.io.IOException Any exception thrown by the underlying OutputStream.", "docstring_tokens": ["Use", "the", "thread", "context", "class", "loader", "to", "resolve", "the", "class"], "sha": "c191bb18db83fa106c6913cf34ed47989b65dc97", "url": "https://github.com/jboss/jboss-common-core/blob/c191bb18db83fa106c6913cf34ed47989b65dc97/src/main/java/org/jboss/util/stream/MarshalledValueInputStream.java#L69-L87", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-db/src/main/java/jodd/db/DbQuery.java", "func_name": "DbQuery.setMap", "original_string": "public Q setMap(final Map parameters) {\n\t\tif (parameters == null) {\n\t\t\treturn _this();\n\t\t}\n\t\tinit();\n\t\tquery.forEachNamedParameter(p -> {\n\t\t\tfinal String paramName = p.name;\n\t\t\tsetObject(paramName, parameters.get(paramName));\n\t\t});\n\t\treturn _this();\n\t}", "language": "java", "code": "public Q setMap(final Map parameters) {\n\t\tif (parameters == null) {\n\t\t\treturn _this();\n\t\t}\n\t\tinit();\n\t\tquery.forEachNamedParameter(p -> {\n\t\t\tfinal String paramName = p.name;\n\t\t\tsetObject(paramName, parameters.get(paramName));\n\t\t});\n\t\treturn _this();\n\t}", "code_tokens": ["public", "Q", "setMap", "(", "final", "Map", "parameters", ")", "{", "if", "(", "parameters", "==", "null", ")", "{", "return", "_this", "(", ")", ";", "}", "init", "(", ")", ";", "query", ".", "forEachNamedParameter", "(", "p", "->", "{", "final", "String", "paramName", "=", "p", ".", "name", ";", "setObject", "(", "paramName", ",", "parameters", ".", "get", "(", "paramName", ")", ")", ";", "}", ")", ";", "return", "_this", "(", ")", ";", "}"], "docstring": "Sets properties from the map.", "docstring_tokens": ["Sets", "properties", "from", "the", "map", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-db/src/main/java/jodd/db/DbQuery.java#L986-L996", "partition": "test"}
{"repo": "1gravity/Android-RTEditor", "path": "RTEditor/src/main/java/com/onegravity/rteditor/converter/tagsoup/ElementType.java", "func_name": "ElementType.namespace", "original_string": "public String namespace(String name, boolean attribute) {\n        int colon = name.indexOf(':');\n        if (colon == -1) {\n            return attribute ? \"\" : theSchema.getURI();\n        }\n        String prefix = name.substring(0, colon);\n        if (prefix.equals(\"xml\")) {\n            return \"http://www.w3.org/XML/1998/namespace\";\n        } else {\n            return (\"urn:x-prefix:\" + prefix).intern();\n        }\n    }", "language": "java", "code": "public String namespace(String name, boolean attribute) {\n        int colon = name.indexOf(':');\n        if (colon == -1) {\n            return attribute ? \"\" : theSchema.getURI();\n        }\n        String prefix = name.substring(0, colon);\n        if (prefix.equals(\"xml\")) {\n            return \"http://www.w3.org/XML/1998/namespace\";\n        } else {\n            return (\"urn:x-prefix:\" + prefix).intern();\n        }\n    }", "code_tokens": ["public", "String", "namespace", "(", "String", "name", ",", "boolean", "attribute", ")", "{", "int", "colon", "=", "name", ".", "indexOf", "(", "'", "'", ")", ";", "if", "(", "colon", "==", "-", "1", ")", "{", "return", "attribute", "?", "\"\"", ":", "theSchema", ".", "getURI", "(", ")", ";", "}", "String", "prefix", "=", "name", ".", "substring", "(", "0", ",", "colon", ")", ";", "if", "(", "prefix", ".", "equals", "(", "\"xml\"", ")", ")", "{", "return", "\"http://www.w3.org/XML/1998/namespace\"", ";", "}", "else", "{", "return", "(", "\"urn:x-prefix:\"", "+", "prefix", ")", ".", "intern", "(", ")", ";", "}", "}"], "docstring": "Return a namespace name from a Qname. The attribute flag tells us whether\nto return an empty namespace name if there is no prefix, or use the\nschema default instead.\n\n@param name      The Qname\n@param attribute True if name is an attribute name\n@return The namespace name", "docstring_tokens": ["Return", "a", "namespace", "name", "from", "a", "Qname", ".", "The", "attribute", "flag", "tells", "us", "whether", "to", "return", "an", "empty", "namespace", "name", "if", "there", "is", "no", "prefix", "or", "use", "the", "schema", "default", "instead", "."], "sha": "9d8fb4bb865b3b3d011e7633afedcdfb8d21754f", "url": "https://github.com/1gravity/Android-RTEditor/blob/9d8fb4bb865b3b3d011e7633afedcdfb8d21754f/RTEditor/src/main/java/com/onegravity/rteditor/converter/tagsoup/ElementType.java#L72-L83", "partition": "test"}
{"repo": "Netflix/hollow", "path": "hollow/src/main/java/com/netflix/hollow/core/read/engine/SetMapKeyHasher.java", "func_name": "SetMapKeyHasher.hash", "original_string": "public static int hash(Object key[], FieldType fieldType[]) {\n        int hash = 0;\n\n        for (int i = 0; i < key.length; i++) {\n            hash *= 31;\n            hash ^= hash(key[i], fieldType[i]);\n        }\n\n        return hash;\n    }", "language": "java", "code": "public static int hash(Object key[], FieldType fieldType[]) {\n        int hash = 0;\n\n        for (int i = 0; i < key.length; i++) {\n            hash *= 31;\n            hash ^= hash(key[i], fieldType[i]);\n        }\n\n        return hash;\n    }", "code_tokens": ["public", "static", "int", "hash", "(", "Object", "key", "[", "]", ",", "FieldType", "fieldType", "[", "]", ")", "{", "int", "hash", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "key", ".", "length", ";", "i", "++", ")", "{", "hash", "*=", "31", ";", "hash", "^=", "hash", "(", "key", "[", "i", "]", ",", "fieldType", "[", "i", "]", ")", ";", "}", "return", "hash", ";", "}"], "docstring": "Hash a key\n\n@param key the key\n@param fieldType the respective FieldTypes of each key.\n@return the hash code", "docstring_tokens": ["Hash", "a", "key"], "sha": "43ca100034a01050fb764170bd32b085ac9a3c22", "url": "https://github.com/Netflix/hollow/blob/43ca100034a01050fb764170bd32b085ac9a3c22/hollow/src/main/java/com/netflix/hollow/core/read/engine/SetMapKeyHasher.java#L35-L44", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-db/src/main/java/jodd/db/DbQueryBase.java", "func_name": "DbQueryBase.setMaxRows", "original_string": "public Q setMaxRows(final int maxRows) {\n\t\tcheckNotClosed();\n\t\tthis.maxRows = maxRows;\n\t\tif (statement != null) {\n\t\t\ttry {\n\t\t\t\tstatement.setMaxRows(maxRows);\n\t\t\t} catch (SQLException sex) {\n\t\t\t\tthrow new DbSqlException(this, \"Unable to set max rows: \" + maxRows, sex);\n\t\t\t}\n\t\t}\n\t\treturn _this();\n\t}", "language": "java", "code": "public Q setMaxRows(final int maxRows) {\n\t\tcheckNotClosed();\n\t\tthis.maxRows = maxRows;\n\t\tif (statement != null) {\n\t\t\ttry {\n\t\t\t\tstatement.setMaxRows(maxRows);\n\t\t\t} catch (SQLException sex) {\n\t\t\t\tthrow new DbSqlException(this, \"Unable to set max rows: \" + maxRows, sex);\n\t\t\t}\n\t\t}\n\t\treturn _this();\n\t}", "code_tokens": ["public", "Q", "setMaxRows", "(", "final", "int", "maxRows", ")", "{", "checkNotClosed", "(", ")", ";", "this", ".", "maxRows", "=", "maxRows", ";", "if", "(", "statement", "!=", "null", ")", "{", "try", "{", "statement", ".", "setMaxRows", "(", "maxRows", ")", ";", "}", "catch", "(", "SQLException", "sex", ")", "{", "throw", "new", "DbSqlException", "(", "this", ",", "\"Unable to set max rows: \"", "+", "maxRows", ",", "sex", ")", ";", "}", "}", "return", "_this", "(", ")", ";", "}"], "docstring": "Sets the limit for the maximum number of rows that any ResultSet object can contain to the given number.\nIf the limit is exceeded, the excess rows are silently dropped. Zero means there is no limit.\n@see Statement#setMaxRows(int)", "docstring_tokens": ["Sets", "the", "limit", "for", "the", "maximum", "number", "of", "rows", "that", "any", "ResultSet", "object", "can", "contain", "to", "the", "given", "number", ".", "If", "the", "limit", "is", "exceeded", "the", "excess", "rows", "are", "silently", "dropped", ".", "Zero", "means", "there", "is", "no", "limit", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-db/src/main/java/jodd/db/DbQueryBase.java#L648-L659", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/disposables/CompositeDisposable.java", "func_name": "CompositeDisposable.clear", "original_string": "public void clear() {\n        if (disposed) {\n            return;\n        }\n        OpenHashSet<Disposable> set;\n        synchronized (this) {\n            if (disposed) {\n                return;\n            }\n\n            set = resources;\n            resources = null;\n        }\n\n        dispose(set);\n    }", "language": "java", "code": "public void clear() {\n        if (disposed) {\n            return;\n        }\n        OpenHashSet<Disposable> set;\n        synchronized (this) {\n            if (disposed) {\n                return;\n            }\n\n            set = resources;\n            resources = null;\n        }\n\n        dispose(set);\n    }", "code_tokens": ["public", "void", "clear", "(", ")", "{", "if", "(", "disposed", ")", "{", "return", ";", "}", "OpenHashSet", "<", "Disposable", ">", "set", ";", "synchronized", "(", "this", ")", "{", "if", "(", "disposed", ")", "{", "return", ";", "}", "set", "=", "resources", ";", "resources", "=", "null", ";", "}", "dispose", "(", "set", ")", ";", "}"], "docstring": "Atomically clears the container, then disposes all the previously contained Disposables.", "docstring_tokens": ["Atomically", "clears", "the", "container", "then", "disposes", "all", "the", "previously", "contained", "Disposables", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/disposables/CompositeDisposable.java#L192-L207", "partition": "test"}
{"repo": "jcodec/jcodec", "path": "src/main/java/net/sourceforge/jaad/aac/Decoder.java", "func_name": "Decoder.decodeFrame", "original_string": "public void decodeFrame(byte[] frame, SampleBuffer buffer) throws AACException {\n        if (frame != null)\n            _in.setData(frame);\n        Logger.debug(\"bits left \" + _in.getBitsLeft());\n        try {\n            decode(buffer);\n        } catch (AACException e) {\n            if (!e.isEndOfStream())\n                throw e;\n            else\n                Logger.warn(\"unexpected end of frame\");\n        }\n    }", "language": "java", "code": "public void decodeFrame(byte[] frame, SampleBuffer buffer) throws AACException {\n        if (frame != null)\n            _in.setData(frame);\n        Logger.debug(\"bits left \" + _in.getBitsLeft());\n        try {\n            decode(buffer);\n        } catch (AACException e) {\n            if (!e.isEndOfStream())\n                throw e;\n            else\n                Logger.warn(\"unexpected end of frame\");\n        }\n    }", "code_tokens": ["public", "void", "decodeFrame", "(", "byte", "[", "]", "frame", ",", "SampleBuffer", "buffer", ")", "throws", "AACException", "{", "if", "(", "frame", "!=", "null", ")", "_in", ".", "setData", "(", "frame", ")", ";", "Logger", ".", "debug", "(", "\"bits left \"", "+", "_in", ".", "getBitsLeft", "(", ")", ")", ";", "try", "{", "decode", "(", "buffer", ")", ";", "}", "catch", "(", "AACException", "e", ")", "{", "if", "(", "!", "e", ".", "isEndOfStream", "(", ")", ")", "throw", "e", ";", "else", "Logger", ".", "warn", "(", "\"unexpected end of frame\"", ")", ";", "}", "}"], "docstring": "Decodes one frame of AAC data in frame mode and returns the raw PCM data.\n\n@param frame\nthe AAC frame\n@param buffer\na buffer to hold the decoded PCM data\n@throws AACException\nif decoding fails", "docstring_tokens": ["Decodes", "one", "frame", "of", "AAC", "data", "in", "frame", "mode", "and", "returns", "the", "raw", "PCM", "data", "."], "sha": "cd6efa51ef05f409a8ba8cfb7521f4b4f10ccc75", "url": "https://github.com/jcodec/jcodec/blob/cd6efa51ef05f409a8ba8cfb7521f4b4f10ccc75/src/main/java/net/sourceforge/jaad/aac/Decoder.java#L84-L96", "partition": "test"}
{"repo": "fabric8io/fabric8-maven-plugin", "path": "core/src/main/java/io/fabric8/maven/core/util/kubernetes/KubernetesResourceUtil.java", "func_name": "KubernetesResourceUtil.isLocalCustomisation", "original_string": "private static boolean isLocalCustomisation(PodSpec podSpec) {\n        List<Container> containers = podSpec.getContainers() != null ? podSpec.getContainers() : Collections.<Container>emptyList();\n        for (Container container : containers) {\n            if (StringUtils.isNotBlank(container.getImage())) {\n                return false;\n            }\n        }\n        return true;\n    }", "language": "java", "code": "private static boolean isLocalCustomisation(PodSpec podSpec) {\n        List<Container> containers = podSpec.getContainers() != null ? podSpec.getContainers() : Collections.<Container>emptyList();\n        for (Container container : containers) {\n            if (StringUtils.isNotBlank(container.getImage())) {\n                return false;\n            }\n        }\n        return true;\n    }", "code_tokens": ["private", "static", "boolean", "isLocalCustomisation", "(", "PodSpec", "podSpec", ")", "{", "List", "<", "Container", ">", "containers", "=", "podSpec", ".", "getContainers", "(", ")", "!=", "null", "?", "podSpec", ".", "getContainers", "(", ")", ":", "Collections", ".", "<", "Container", ">", "emptyList", "(", ")", ";", "for", "(", "Container", "container", ":", "containers", ")", "{", "if", "(", "StringUtils", ".", "isNotBlank", "(", "container", ".", "getImage", "(", ")", ")", ")", "{", "return", "false", ";", "}", "}", "return", "true", ";", "}"], "docstring": "we could also use an annotation?", "docstring_tokens": ["we", "could", "also", "use", "an", "annotation?"], "sha": "b0e7ad860a5bbe4ab71be3d0613862a1f14a8be3", "url": "https://github.com/fabric8io/fabric8-maven-plugin/blob/b0e7ad860a5bbe4ab71be3d0613862a1f14a8be3/core/src/main/java/io/fabric8/maven/core/util/kubernetes/KubernetesResourceUtil.java#L1002-L1010", "partition": "test"}
{"repo": "nicolasjafelle/PagingGridView", "path": "PagingGridViewProject/PagingGridView/src/main/java/com/paging/gridview/HeaderGridView.java", "func_name": "HeaderGridView.removeFooterView", "original_string": "public boolean removeFooterView(View v) {\n\t\tif (mFooterViewInfos.size() > 0) {\n\t\t\tboolean result = false;\n\t\t\tif (mAdapter != null && ((FooterViewGridAdapter) mAdapter).removeFooter(v)) {\n\t\t\t\tnotifiyChanged();\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\tremoveFixedViewInfo(v, mFooterViewInfos);\n\t\t\treturn result;\n\t\t}\n\t\treturn false;\n\t}", "language": "java", "code": "public boolean removeFooterView(View v) {\n\t\tif (mFooterViewInfos.size() > 0) {\n\t\t\tboolean result = false;\n\t\t\tif (mAdapter != null && ((FooterViewGridAdapter) mAdapter).removeFooter(v)) {\n\t\t\t\tnotifiyChanged();\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\tremoveFixedViewInfo(v, mFooterViewInfos);\n\t\t\treturn result;\n\t\t}\n\t\treturn false;\n\t}", "code_tokens": ["public", "boolean", "removeFooterView", "(", "View", "v", ")", "{", "if", "(", "mFooterViewInfos", ".", "size", "(", ")", ">", "0", ")", "{", "boolean", "result", "=", "false", ";", "if", "(", "mAdapter", "!=", "null", "&&", "(", "(", "FooterViewGridAdapter", ")", "mAdapter", ")", ".", "removeFooter", "(", "v", ")", ")", "{", "notifiyChanged", "(", ")", ";", "result", "=", "true", ";", "}", "removeFixedViewInfo", "(", "v", ",", "mFooterViewInfos", ")", ";", "return", "result", ";", "}", "return", "false", ";", "}"], "docstring": "Removes a previously-added footer view.\n\n@param v The view to remove\n@return\ntrue if the view was removed, false if the view was not a footer view", "docstring_tokens": ["Removes", "a", "previously", "-", "added", "footer", "view", "."], "sha": "521fa47e4e78a4a986af118c59cbcbeddc9c96ac", "url": "https://github.com/nicolasjafelle/PagingGridView/blob/521fa47e4e78a4a986af118c59cbcbeddc9c96ac/PagingGridViewProject/PagingGridView/src/main/java/com/paging/gridview/HeaderGridView.java#L184-L195", "partition": "test"}
{"repo": "Unidata/thredds", "path": "cdm/src/main/java/ucar/nc2/iosp/nexrad2/Level2Record.java", "func_name": "Level2Record.getGateStart", "original_string": "public int getGateStart(int datatype) {\n    switch (datatype) {\n      case REFLECTIVITY:\n        return ((int) reflect_first_gate);\n\n      case VELOCITY_HI:\n      case VELOCITY_LOW:\n      case SPECTRUM_WIDTH:\n        return ((int) doppler_first_gate);\n      //high resolution\n      case REFLECTIVITY_HIGH:\n        return ((int) reflectHR_first_gate);\n      case VELOCITY_HIGH:\n        return ((int) velocityHR_first_gate);\n      case SPECTRUM_WIDTH_HIGH:\n        return ((int) spectrumHR_first_gate);\n      case DIFF_REFLECTIVITY_HIGH:\n        return ((int) zdrHR_first_gate);\n      case DIFF_PHASE:\n        return ((int) phiHR_first_gate);\n      case CORRELATION_COEFFICIENT:\n        return ((int) rhoHR_first_gate);\n\n    }\n    return -1;\n  }", "language": "java", "code": "public int getGateStart(int datatype) {\n    switch (datatype) {\n      case REFLECTIVITY:\n        return ((int) reflect_first_gate);\n\n      case VELOCITY_HI:\n      case VELOCITY_LOW:\n      case SPECTRUM_WIDTH:\n        return ((int) doppler_first_gate);\n      //high resolution\n      case REFLECTIVITY_HIGH:\n        return ((int) reflectHR_first_gate);\n      case VELOCITY_HIGH:\n        return ((int) velocityHR_first_gate);\n      case SPECTRUM_WIDTH_HIGH:\n        return ((int) spectrumHR_first_gate);\n      case DIFF_REFLECTIVITY_HIGH:\n        return ((int) zdrHR_first_gate);\n      case DIFF_PHASE:\n        return ((int) phiHR_first_gate);\n      case CORRELATION_COEFFICIENT:\n        return ((int) rhoHR_first_gate);\n\n    }\n    return -1;\n  }", "code_tokens": ["public", "int", "getGateStart", "(", "int", "datatype", ")", "{", "switch", "(", "datatype", ")", "{", "case", "REFLECTIVITY", ":", "return", "(", "(", "int", ")", "reflect_first_gate", ")", ";", "case", "VELOCITY_HI", ":", "case", "VELOCITY_LOW", ":", "case", "SPECTRUM_WIDTH", ":", "return", "(", "(", "int", ")", "doppler_first_gate", ")", ";", "//high resolution", "case", "REFLECTIVITY_HIGH", ":", "return", "(", "(", "int", ")", "reflectHR_first_gate", ")", ";", "case", "VELOCITY_HIGH", ":", "return", "(", "(", "int", ")", "velocityHR_first_gate", ")", ";", "case", "SPECTRUM_WIDTH_HIGH", ":", "return", "(", "(", "int", ")", "spectrumHR_first_gate", ")", ";", "case", "DIFF_REFLECTIVITY_HIGH", ":", "return", "(", "(", "int", ")", "zdrHR_first_gate", ")", ";", "case", "DIFF_PHASE", ":", "return", "(", "(", "int", ")", "phiHR_first_gate", ")", ";", "case", "CORRELATION_COEFFICIENT", ":", "return", "(", "(", "int", ")", "rhoHR_first_gate", ")", ";", "}", "return", "-", "1", ";", "}"], "docstring": "This method returns the starting gate in meters\n\n@param datatype which type of data : REFLECTIVITY, VELOCITY_HI, VELOCITY_LO, SPECTRUM_WIDTH\n@return the starting gate in meters", "docstring_tokens": ["This", "method", "returns", "the", "starting", "gate", "in", "meters"], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/cdm/src/main/java/ucar/nc2/iosp/nexrad2/Level2Record.java#L992-L1017", "partition": "test"}
{"repo": "Koekiebox-PTY-LTD/Fluid", "path": "fluid-ws-java-client/src/main/java/com/fluidbpm/ws/client/v1/flow/RouteFieldClient.java", "func_name": "RouteFieldClient.updateFieldDecimalPlain", "original_string": "public Field updateFieldDecimalPlain(Field routeFieldParam) {\n\t\tif(routeFieldParam != null && this.serviceTicket != null) {\n\t\t\trouteFieldParam.setServiceTicket(this.serviceTicket);\n\t\t}\n\n\t\tif(routeFieldParam != null) {\n\t\t\trouteFieldParam.setTypeAsEnum(Field.Type.Decimal);\n\t\t\trouteFieldParam.setTypeMetaData(FieldMetaData.Decimal.PLAIN);\n\t\t}\n\n\t\treturn new Field(this.postJson(\n\t\t\t\trouteFieldParam, Version1.routeFieldUpdate()));\n\t}", "language": "java", "code": "public Field updateFieldDecimalPlain(Field routeFieldParam) {\n\t\tif(routeFieldParam != null && this.serviceTicket != null) {\n\t\t\trouteFieldParam.setServiceTicket(this.serviceTicket);\n\t\t}\n\n\t\tif(routeFieldParam != null) {\n\t\t\trouteFieldParam.setTypeAsEnum(Field.Type.Decimal);\n\t\t\trouteFieldParam.setTypeMetaData(FieldMetaData.Decimal.PLAIN);\n\t\t}\n\n\t\treturn new Field(this.postJson(\n\t\t\t\trouteFieldParam, Version1.routeFieldUpdate()));\n\t}", "code_tokens": ["public", "Field", "updateFieldDecimalPlain", "(", "Field", "routeFieldParam", ")", "{", "if", "(", "routeFieldParam", "!=", "null", "&&", "this", ".", "serviceTicket", "!=", "null", ")", "{", "routeFieldParam", ".", "setServiceTicket", "(", "this", ".", "serviceTicket", ")", ";", "}", "if", "(", "routeFieldParam", "!=", "null", ")", "{", "routeFieldParam", ".", "setTypeAsEnum", "(", "Field", ".", "Type", ".", "Decimal", ")", ";", "routeFieldParam", ".", "setTypeMetaData", "(", "FieldMetaData", ".", "Decimal", ".", "PLAIN", ")", ";", "}", "return", "new", "Field", "(", "this", ".", "postJson", "(", "routeFieldParam", ",", "Version1", ".", "routeFieldUpdate", "(", ")", ")", ")", ";", "}"], "docstring": "Update an existing Decimal field.\n\n@param routeFieldParam Field to Update.\n@return Updated Field.", "docstring_tokens": ["Update", "an", "existing", "Decimal", "field", "."], "sha": "81153d865f71b84ca933532c7115717bc3979270", "url": "https://github.com/Koekiebox-PTY-LTD/Fluid/blob/81153d865f71b84ca933532c7115717bc3979270/fluid-ws-java-client/src/main/java/com/fluidbpm/ws/client/v1/flow/RouteFieldClient.java#L450-L462", "partition": "test"}
{"repo": "DigitalPebble/storm-crawler", "path": "core/src/main/java/com/digitalpebble/stormcrawler/util/URLUtil.java", "func_name": "URLUtil.getHost", "original_string": "public static String getHost(String url) {\n        try {\n            return new URL(url).getHost().toLowerCase(Locale.ROOT);\n        } catch (MalformedURLException e) {\n            return null;\n        }\n    }", "language": "java", "code": "public static String getHost(String url) {\n        try {\n            return new URL(url).getHost().toLowerCase(Locale.ROOT);\n        } catch (MalformedURLException e) {\n            return null;\n        }\n    }", "code_tokens": ["public", "static", "String", "getHost", "(", "String", "url", ")", "{", "try", "{", "return", "new", "URL", "(", "url", ")", ".", "getHost", "(", ")", ".", "toLowerCase", "(", "Locale", ".", "ROOT", ")", ";", "}", "catch", "(", "MalformedURLException", "e", ")", "{", "return", "null", ";", "}", "}"], "docstring": "Returns the lowercased hostname for the url or null if the url is not\nwell formed.\n\n@param url\nThe url to check.\n@return String The hostname for the url.", "docstring_tokens": ["Returns", "the", "lowercased", "hostname", "for", "the", "url", "or", "null", "if", "the", "url", "is", "not", "well", "formed", "."], "sha": "5d0465192ab8fbd89a90db32cb20960a282411ea", "url": "https://github.com/DigitalPebble/storm-crawler/blob/5d0465192ab8fbd89a90db32cb20960a282411ea/core/src/main/java/com/digitalpebble/stormcrawler/util/URLUtil.java#L154-L160", "partition": "test"}
{"repo": "Unidata/thredds", "path": "cdm/src/main/java/ucar/nc2/iosp/nids/Nidsheader.java", "func_name": "Nidsheader.convert", "original_string": "protected Object convert( byte[] barray, DataType dataType, int nelems, int byteOrder) {\r\n\r\n        if (dataType == DataType.BYTE) {\r\n          return barray;\r\n        }\r\n\r\n        if (dataType == DataType.CHAR) {\r\n          return IospHelper.convertByteToChar( barray);\r\n        }\r\n\r\n        ByteBuffer bbuff = ByteBuffer.wrap( barray);\r\n        if (byteOrder >= 0)\r\n          bbuff.order( byteOrder == ucar.unidata.io.RandomAccessFile.LITTLE_ENDIAN? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\r\n\r\n        if (dataType == DataType.SHORT) {\r\n          ShortBuffer tbuff = bbuff.asShortBuffer();\r\n          short[] pa = new short[nelems];\r\n          tbuff.get( pa);\r\n          return pa;\r\n\r\n        } else if (dataType == DataType.INT) {\r\n          IntBuffer tbuff = bbuff.asIntBuffer();\r\n          int[] pa = new int[nelems];\r\n          tbuff.get( pa);\r\n          return pa;\r\n\r\n        } else if (dataType == DataType.FLOAT) {\r\n          FloatBuffer tbuff = bbuff.asFloatBuffer();\r\n          float[] pa = new float[nelems];\r\n          tbuff.get( pa);\r\n          return pa;\r\n\r\n        } else if (dataType == DataType.DOUBLE) {\r\n          DoubleBuffer tbuff = bbuff.asDoubleBuffer();\r\n          double[] pa = new double[nelems];\r\n          tbuff.get( pa);\r\n          return pa;\r\n        }\r\n\r\n        throw new IllegalStateException();\r\n    }", "language": "java", "code": "protected Object convert( byte[] barray, DataType dataType, int nelems, int byteOrder) {\r\n\r\n        if (dataType == DataType.BYTE) {\r\n          return barray;\r\n        }\r\n\r\n        if (dataType == DataType.CHAR) {\r\n          return IospHelper.convertByteToChar( barray);\r\n        }\r\n\r\n        ByteBuffer bbuff = ByteBuffer.wrap( barray);\r\n        if (byteOrder >= 0)\r\n          bbuff.order( byteOrder == ucar.unidata.io.RandomAccessFile.LITTLE_ENDIAN? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\r\n\r\n        if (dataType == DataType.SHORT) {\r\n          ShortBuffer tbuff = bbuff.asShortBuffer();\r\n          short[] pa = new short[nelems];\r\n          tbuff.get( pa);\r\n          return pa;\r\n\r\n        } else if (dataType == DataType.INT) {\r\n          IntBuffer tbuff = bbuff.asIntBuffer();\r\n          int[] pa = new int[nelems];\r\n          tbuff.get( pa);\r\n          return pa;\r\n\r\n        } else if (dataType == DataType.FLOAT) {\r\n          FloatBuffer tbuff = bbuff.asFloatBuffer();\r\n          float[] pa = new float[nelems];\r\n          tbuff.get( pa);\r\n          return pa;\r\n\r\n        } else if (dataType == DataType.DOUBLE) {\r\n          DoubleBuffer tbuff = bbuff.asDoubleBuffer();\r\n          double[] pa = new double[nelems];\r\n          tbuff.get( pa);\r\n          return pa;\r\n        }\r\n\r\n        throw new IllegalStateException();\r\n    }", "code_tokens": ["protected", "Object", "convert", "(", "byte", "[", "]", "barray", ",", "DataType", "dataType", ",", "int", "nelems", ",", "int", "byteOrder", ")", "{", "if", "(", "dataType", "==", "DataType", ".", "BYTE", ")", "{", "return", "barray", ";", "}", "if", "(", "dataType", "==", "DataType", ".", "CHAR", ")", "{", "return", "IospHelper", ".", "convertByteToChar", "(", "barray", ")", ";", "}", "ByteBuffer", "bbuff", "=", "ByteBuffer", ".", "wrap", "(", "barray", ")", ";", "if", "(", "byteOrder", ">=", "0", ")", "bbuff", ".", "order", "(", "byteOrder", "==", "ucar", ".", "unidata", ".", "io", ".", "RandomAccessFile", ".", "LITTLE_ENDIAN", "?", "ByteOrder", ".", "LITTLE_ENDIAN", ":", "ByteOrder", ".", "BIG_ENDIAN", ")", ";", "if", "(", "dataType", "==", "DataType", ".", "SHORT", ")", "{", "ShortBuffer", "tbuff", "=", "bbuff", ".", "asShortBuffer", "(", ")", ";", "short", "[", "]", "pa", "=", "new", "short", "[", "nelems", "]", ";", "tbuff", ".", "get", "(", "pa", ")", ";", "return", "pa", ";", "}", "else", "if", "(", "dataType", "==", "DataType", ".", "INT", ")", "{", "IntBuffer", "tbuff", "=", "bbuff", ".", "asIntBuffer", "(", ")", ";", "int", "[", "]", "pa", "=", "new", "int", "[", "nelems", "]", ";", "tbuff", ".", "get", "(", "pa", ")", ";", "return", "pa", ";", "}", "else", "if", "(", "dataType", "==", "DataType", ".", "FLOAT", ")", "{", "FloatBuffer", "tbuff", "=", "bbuff", ".", "asFloatBuffer", "(", ")", ";", "float", "[", "]", "pa", "=", "new", "float", "[", "nelems", "]", ";", "tbuff", ".", "get", "(", "pa", ")", ";", "return", "pa", ";", "}", "else", "if", "(", "dataType", "==", "DataType", ".", "DOUBLE", ")", "{", "DoubleBuffer", "tbuff", "=", "bbuff", ".", "asDoubleBuffer", "(", ")", ";", "double", "[", "]", "pa", "=", "new", "double", "[", "nelems", "]", ";", "tbuff", ".", "get", "(", "pa", ")", ";", "return", "pa", ";", "}", "throw", "new", "IllegalStateException", "(", ")", ";", "}"], "docstring": "this converts a byte array to another primitive array\n@param barray\n@param dataType\n@param nelems\n@param byteOrder\n@return", "docstring_tokens": ["this", "converts", "a", "byte", "array", "to", "another", "primitive", "array"], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/cdm/src/main/java/ucar/nc2/iosp/nids/Nidsheader.java#L3332-L3372", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-core/src/main/java/jodd/util/StringUtil.java", "func_name": "StringUtil.title", "original_string": "public static String title(final String string) {\n\t\tchar[] chars = string.toCharArray();\n\t\t\n\t\tboolean wasWhitespace = true;\n\t\t\n\t\tfor (int i = 0; i < chars.length; i++) {\n\t\t\tchar c = chars[i];\n\t\t\t\n\t\t\tif (CharUtil.isWhitespace(c)) {\n\t\t\t\twasWhitespace = true;\n\t\t\t} else {\n\t\t\t\tif (wasWhitespace) {\n\t\t\t\t\tchars[i] = Character.toUpperCase(c);\n\t\t\t\t} else {\n\t\t\t\t\tchars[i] = Character.toLowerCase(c);\n\t\t\t\t}\n\t\t\t\twasWhitespace = false;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn new String(chars);\n\t}", "language": "java", "code": "public static String title(final String string) {\n\t\tchar[] chars = string.toCharArray();\n\t\t\n\t\tboolean wasWhitespace = true;\n\t\t\n\t\tfor (int i = 0; i < chars.length; i++) {\n\t\t\tchar c = chars[i];\n\t\t\t\n\t\t\tif (CharUtil.isWhitespace(c)) {\n\t\t\t\twasWhitespace = true;\n\t\t\t} else {\n\t\t\t\tif (wasWhitespace) {\n\t\t\t\t\tchars[i] = Character.toUpperCase(c);\n\t\t\t\t} else {\n\t\t\t\t\tchars[i] = Character.toLowerCase(c);\n\t\t\t\t}\n\t\t\t\twasWhitespace = false;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn new String(chars);\n\t}", "code_tokens": ["public", "static", "String", "title", "(", "final", "String", "string", ")", "{", "char", "[", "]", "chars", "=", "string", ".", "toCharArray", "(", ")", ";", "boolean", "wasWhitespace", "=", "true", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "chars", ".", "length", ";", "i", "++", ")", "{", "char", "c", "=", "chars", "[", "i", "]", ";", "if", "(", "CharUtil", ".", "isWhitespace", "(", "c", ")", ")", "{", "wasWhitespace", "=", "true", ";", "}", "else", "{", "if", "(", "wasWhitespace", ")", "{", "chars", "[", "i", "]", "=", "Character", ".", "toUpperCase", "(", "c", ")", ";", "}", "else", "{", "chars", "[", "i", "]", "=", "Character", ".", "toLowerCase", "(", "c", ")", ";", "}", "wasWhitespace", "=", "false", ";", "}", "}", "return", "new", "String", "(", "chars", ")", ";", "}"], "docstring": "Makes a title-cased string from given input.", "docstring_tokens": ["Makes", "a", "title", "-", "cased", "string", "from", "given", "input", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-core/src/main/java/jodd/util/StringUtil.java#L555-L576", "partition": "test"}
{"repo": "TooTallNate/Java-WebSocket", "path": "src/main/java/org/java_websocket/server/WebSocketServer.java", "func_name": "WebSocketServer.stop", "original_string": "public void stop( int timeout ) throws InterruptedException {\n\t\tif( !isclosed.compareAndSet( false, true ) ) { // this also makes sure that no further connections will be added to this.connections\n\t\t\treturn;\n\t\t}\n\n\t\tList<WebSocket> socketsToClose;\n\n\t\t// copy the connections in a list (prevent callback deadlocks)\n\t\tsynchronized ( connections ) {\n\t\t\tsocketsToClose = new ArrayList<WebSocket>( connections );\n\t\t}\n\n\t\tfor( WebSocket ws : socketsToClose ) {\n\t\t\tws.close( CloseFrame.GOING_AWAY );\n\t\t}\n\n\t\twsf.close();\n\n\t\tsynchronized ( this ) {\n\t\t\tif( selectorthread != null  && selector != null) {\n\t\t\t\tselector.wakeup();\n\t\t\t\tselectorthread.join( timeout );\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public void stop( int timeout ) throws InterruptedException {\n\t\tif( !isclosed.compareAndSet( false, true ) ) { // this also makes sure that no further connections will be added to this.connections\n\t\t\treturn;\n\t\t}\n\n\t\tList<WebSocket> socketsToClose;\n\n\t\t// copy the connections in a list (prevent callback deadlocks)\n\t\tsynchronized ( connections ) {\n\t\t\tsocketsToClose = new ArrayList<WebSocket>( connections );\n\t\t}\n\n\t\tfor( WebSocket ws : socketsToClose ) {\n\t\t\tws.close( CloseFrame.GOING_AWAY );\n\t\t}\n\n\t\twsf.close();\n\n\t\tsynchronized ( this ) {\n\t\t\tif( selectorthread != null  && selector != null) {\n\t\t\t\tselector.wakeup();\n\t\t\t\tselectorthread.join( timeout );\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "void", "stop", "(", "int", "timeout", ")", "throws", "InterruptedException", "{", "if", "(", "!", "isclosed", ".", "compareAndSet", "(", "false", ",", "true", ")", ")", "{", "// this also makes sure that no further connections will be added to this.connections", "return", ";", "}", "List", "<", "WebSocket", ">", "socketsToClose", ";", "// copy the connections in a list (prevent callback deadlocks)", "synchronized", "(", "connections", ")", "{", "socketsToClose", "=", "new", "ArrayList", "<", "WebSocket", ">", "(", "connections", ")", ";", "}", "for", "(", "WebSocket", "ws", ":", "socketsToClose", ")", "{", "ws", ".", "close", "(", "CloseFrame", ".", "GOING_AWAY", ")", ";", "}", "wsf", ".", "close", "(", ")", ";", "synchronized", "(", "this", ")", "{", "if", "(", "selectorthread", "!=", "null", "&&", "selector", "!=", "null", ")", "{", "selector", ".", "wakeup", "(", ")", ";", "selectorthread", ".", "join", "(", "timeout", ")", ";", "}", "}", "}"], "docstring": "Closes all connected clients sockets, then closes the underlying\nServerSocketChannel, effectively killing the server socket selectorthread,\nfreeing the port the server was bound to and stops all internal workerthreads.\n\nIf this method is called before the server is started it will never start.\n\n@param timeout\nSpecifies how many milliseconds the overall close handshaking may take altogether before the connections are closed without proper close handshaking.<br>\n\n@throws InterruptedException Interrupt", "docstring_tokens": ["Closes", "all", "connected", "clients", "sockets", "then", "closes", "the", "underlying", "ServerSocketChannel", "effectively", "killing", "the", "server", "socket", "selectorthread", "freeing", "the", "port", "the", "server", "was", "bound", "to", "and", "stops", "all", "internal", "workerthreads", "."], "sha": "73c6805ca2c7801b2828ffd3ec12e5cb0daefcf9", "url": "https://github.com/TooTallNate/Java-WebSocket/blob/73c6805ca2c7801b2828ffd3ec12e5cb0daefcf9/src/main/java/org/java_websocket/server/WebSocketServer.java#L245-L269", "partition": "test"}
{"repo": "tiefaces/TieFaces", "path": "src/org/tiefaces/components/websheet/utility/ConfigurationUtility.java", "func_name": "ConfigurationUtility.findParentRowsMappingFromShiftMap", "original_string": "public static List<RowsMapping> findParentRowsMappingFromShiftMap(\r\n\t\t\tfinal String[] parts,\r\n\t\t\tfinal Map<String, ConfigRangeAttrs> shiftMap) {\r\n\r\n\t\tStringBuilder fullName = new StringBuilder();\r\n\t\tList<RowsMapping> rowsMappingList = new ArrayList<>();\r\n\t\t/**\r\n\t\t * skip first one and last one. first one is line no. last one is it's\r\n\t\t * self.\r\n\t\t */\r\n\t\tfor (int i = 1; i < parts.length - 1; i++) {\r\n\t\t\tString part = parts[i];\r\n\t\t\tif (fullName.length() == 0) {\r\n\t\t\t\tfullName.append(part);\r\n\t\t\t} else {\r\n\t\t\t\tfullName.append(\":\" + part);\r\n\t\t\t}\r\n\t\t\tif (fullName.length() > 0) {\r\n\t\t\t\tConfigRangeAttrs rangeAttrs = shiftMap\r\n\t\t\t\t\t\t.get(fullName.toString());\r\n\t\t\t\tif (rangeAttrs != null) {\r\n\t\t\t\t\trowsMappingList.add(rangeAttrs.getUnitRowsMapping());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn rowsMappingList;\r\n\t}", "language": "java", "code": "public static List<RowsMapping> findParentRowsMappingFromShiftMap(\r\n\t\t\tfinal String[] parts,\r\n\t\t\tfinal Map<String, ConfigRangeAttrs> shiftMap) {\r\n\r\n\t\tStringBuilder fullName = new StringBuilder();\r\n\t\tList<RowsMapping> rowsMappingList = new ArrayList<>();\r\n\t\t/**\r\n\t\t * skip first one and last one. first one is line no. last one is it's\r\n\t\t * self.\r\n\t\t */\r\n\t\tfor (int i = 1; i < parts.length - 1; i++) {\r\n\t\t\tString part = parts[i];\r\n\t\t\tif (fullName.length() == 0) {\r\n\t\t\t\tfullName.append(part);\r\n\t\t\t} else {\r\n\t\t\t\tfullName.append(\":\" + part);\r\n\t\t\t}\r\n\t\t\tif (fullName.length() > 0) {\r\n\t\t\t\tConfigRangeAttrs rangeAttrs = shiftMap\r\n\t\t\t\t\t\t.get(fullName.toString());\r\n\t\t\t\tif (rangeAttrs != null) {\r\n\t\t\t\t\trowsMappingList.add(rangeAttrs.getUnitRowsMapping());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn rowsMappingList;\r\n\t}", "code_tokens": ["public", "static", "List", "<", "RowsMapping", ">", "findParentRowsMappingFromShiftMap", "(", "final", "String", "[", "]", "parts", ",", "final", "Map", "<", "String", ",", "ConfigRangeAttrs", ">", "shiftMap", ")", "{", "StringBuilder", "fullName", "=", "new", "StringBuilder", "(", ")", ";", "List", "<", "RowsMapping", ">", "rowsMappingList", "=", "new", "ArrayList", "<>", "(", ")", ";", "/**\r\n\t\t * skip first one and last one. first one is line no. last one is it's\r\n\t\t * self.\r\n\t\t */", "for", "(", "int", "i", "=", "1", ";", "i", "<", "parts", ".", "length", "-", "1", ";", "i", "++", ")", "{", "String", "part", "=", "parts", "[", "i", "]", ";", "if", "(", "fullName", ".", "length", "(", ")", "==", "0", ")", "{", "fullName", ".", "append", "(", "part", ")", ";", "}", "else", "{", "fullName", ".", "append", "(", "\":\"", "+", "part", ")", ";", "}", "if", "(", "fullName", ".", "length", "(", ")", ">", "0", ")", "{", "ConfigRangeAttrs", "rangeAttrs", "=", "shiftMap", ".", "get", "(", "fullName", ".", "toString", "(", ")", ")", ";", "if", "(", "rangeAttrs", "!=", "null", ")", "{", "rowsMappingList", ".", "add", "(", "rangeAttrs", ".", "getUnitRowsMapping", "(", ")", ")", ";", "}", "}", "}", "return", "rowsMappingList", ";", "}"], "docstring": "Find parent rows mapping from shift map.\n\n@param parts\nthe parts\n@param shiftMap\nthe shift map\n@return the list", "docstring_tokens": ["Find", "parent", "rows", "mapping", "from", "shift", "map", "."], "sha": "3b57b9701ed0f080b5fa4fa78269cc0c422b34ba", "url": "https://github.com/tiefaces/TieFaces/blob/3b57b9701ed0f080b5fa4fa78269cc0c422b34ba/src/org/tiefaces/components/websheet/utility/ConfigurationUtility.java#L436-L462", "partition": "test"}
{"repo": "intellimate/IzouSDK", "path": "src/main/java/org/intellimate/izou/sdk/properties/EventPropertiesAssistant.java", "func_name": "EventPropertiesAssistant.unregisterEventID", "original_string": "public void unregisterEventID(String eventKey) {\n        properties.remove(eventKey + \"_DESCRIPTION\");\n        properties.remove(eventKey);\n\n        FileOutputStream out = null;\n        BufferedReader reader = null;\n        BufferedWriter writer = null;\n\n        try {\n            out = new FileOutputStream(eventPropertiesPath, true);\n\n            final File tempFile = new File(eventPropertiesPath + \"temp.properties\");\n            final BufferedReader readerFinal = new BufferedReader(new FileReader(eventPropertiesPath));\n            final BufferedWriter writerFinal = new BufferedWriter(new FileWriter(tempFile));\n\n            doWithLock(out.getChannel(), lock -> {\n                unlockedReloadFile();\n                if (getEventID(eventKey) != null) {\n                    return;\n                }\n\n                try {\n                    String currentLine = readerFinal.readLine();\n                    while(currentLine != null) {\n                        String trimmedLine = currentLine.trim();\n                        if(trimmedLine.equals(eventKey + \"_DESCRIPTION\") || trimmedLine.equals(eventKey)) continue;\n                        writerFinal.write(currentLine + System.getProperty(\"line.separator\"));\n                        currentLine = readerFinal.readLine();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n\n            reader = readerFinal;\n            writer = writerFinal;\n            tempFile.renameTo(new File(eventPropertiesPath));\n        } catch (IOException e) {\n            error(\"Unable find file\", e);\n        } finally {\n            try {\n                if (out != null) {\n                    out.close();\n                }\n                if (writer != null) {\n                    writer.close();\n                }\n                if (reader != null) {\n                    reader.close();\n                }\n            } catch (IOException e) {\n                error(\"Unable to close lock\", e);\n            }\n        }\n    }", "language": "java", "code": "public void unregisterEventID(String eventKey) {\n        properties.remove(eventKey + \"_DESCRIPTION\");\n        properties.remove(eventKey);\n\n        FileOutputStream out = null;\n        BufferedReader reader = null;\n        BufferedWriter writer = null;\n\n        try {\n            out = new FileOutputStream(eventPropertiesPath, true);\n\n            final File tempFile = new File(eventPropertiesPath + \"temp.properties\");\n            final BufferedReader readerFinal = new BufferedReader(new FileReader(eventPropertiesPath));\n            final BufferedWriter writerFinal = new BufferedWriter(new FileWriter(tempFile));\n\n            doWithLock(out.getChannel(), lock -> {\n                unlockedReloadFile();\n                if (getEventID(eventKey) != null) {\n                    return;\n                }\n\n                try {\n                    String currentLine = readerFinal.readLine();\n                    while(currentLine != null) {\n                        String trimmedLine = currentLine.trim();\n                        if(trimmedLine.equals(eventKey + \"_DESCRIPTION\") || trimmedLine.equals(eventKey)) continue;\n                        writerFinal.write(currentLine + System.getProperty(\"line.separator\"));\n                        currentLine = readerFinal.readLine();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n\n            reader = readerFinal;\n            writer = writerFinal;\n            tempFile.renameTo(new File(eventPropertiesPath));\n        } catch (IOException e) {\n            error(\"Unable find file\", e);\n        } finally {\n            try {\n                if (out != null) {\n                    out.close();\n                }\n                if (writer != null) {\n                    writer.close();\n                }\n                if (reader != null) {\n                    reader.close();\n                }\n            } catch (IOException e) {\n                error(\"Unable to close lock\", e);\n            }\n        }\n    }", "code_tokens": ["public", "void", "unregisterEventID", "(", "String", "eventKey", ")", "{", "properties", ".", "remove", "(", "eventKey", "+", "\"_DESCRIPTION\"", ")", ";", "properties", ".", "remove", "(", "eventKey", ")", ";", "FileOutputStream", "out", "=", "null", ";", "BufferedReader", "reader", "=", "null", ";", "BufferedWriter", "writer", "=", "null", ";", "try", "{", "out", "=", "new", "FileOutputStream", "(", "eventPropertiesPath", ",", "true", ")", ";", "final", "File", "tempFile", "=", "new", "File", "(", "eventPropertiesPath", "+", "\"temp.properties\"", ")", ";", "final", "BufferedReader", "readerFinal", "=", "new", "BufferedReader", "(", "new", "FileReader", "(", "eventPropertiesPath", ")", ")", ";", "final", "BufferedWriter", "writerFinal", "=", "new", "BufferedWriter", "(", "new", "FileWriter", "(", "tempFile", ")", ")", ";", "doWithLock", "(", "out", ".", "getChannel", "(", ")", ",", "lock", "->", "{", "unlockedReloadFile", "(", ")", ";", "if", "(", "getEventID", "(", "eventKey", ")", "!=", "null", ")", "{", "return", ";", "}", "try", "{", "String", "currentLine", "=", "readerFinal", ".", "readLine", "(", ")", ";", "while", "(", "currentLine", "!=", "null", ")", "{", "String", "trimmedLine", "=", "currentLine", ".", "trim", "(", ")", ";", "if", "(", "trimmedLine", ".", "equals", "(", "eventKey", "+", "\"_DESCRIPTION\"", ")", "||", "trimmedLine", ".", "equals", "(", "eventKey", ")", ")", "continue", ";", "writerFinal", ".", "write", "(", "currentLine", "+", "System", ".", "getProperty", "(", "\"line.separator\"", ")", ")", ";", "currentLine", "=", "readerFinal", ".", "readLine", "(", ")", ";", "}", "}", "catch", "(", "IOException", "e", ")", "{", "e", ".", "printStackTrace", "(", ")", ";", "}", "}", ")", ";", "reader", "=", "readerFinal", ";", "writer", "=", "writerFinal", ";", "tempFile", ".", "renameTo", "(", "new", "File", "(", "eventPropertiesPath", ")", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "error", "(", "\"Unable find file\"", ",", "e", ")", ";", "}", "finally", "{", "try", "{", "if", "(", "out", "!=", "null", ")", "{", "out", ".", "close", "(", ")", ";", "}", "if", "(", "writer", "!=", "null", ")", "{", "writer", ".", "close", "(", ")", ";", "}", "if", "(", "reader", "!=", "null", ")", "{", "reader", ".", "close", "(", ")", ";", "}", "}", "catch", "(", "IOException", "e", ")", "{", "error", "(", "\"Unable to close lock\"", ",", "e", ")", ";", "}", "}", "}"], "docstring": "Unregisters or deletes an event from the local_events.properties file\n\n@param eventKey the key under which the complete event ID is stored in the properties file", "docstring_tokens": ["Unregisters", "or", "deletes", "an", "event", "from", "the", "local_events", ".", "properties", "file"], "sha": "bc8705ad48a6ca12a722f2b787be435949fa5d08", "url": "https://github.com/intellimate/IzouSDK/blob/bc8705ad48a6ca12a722f2b787be435949fa5d08/src/main/java/org/intellimate/izou/sdk/properties/EventPropertiesAssistant.java#L193-L247", "partition": "test"}
{"repo": "alipay/sofa-bolt", "path": "src/main/java/com/alipay/remoting/codec/ProtocolCodeBasedDecoder.java", "func_name": "ProtocolCodeBasedDecoder.decodeProtocolCode", "original_string": "protected ProtocolCode decodeProtocolCode(ByteBuf in) {\n        if (in.readableBytes() >= protocolCodeLength) {\n            byte[] protocolCodeBytes = new byte[protocolCodeLength];\n            in.readBytes(protocolCodeBytes);\n            return ProtocolCode.fromBytes(protocolCodeBytes);\n        }\n        return null;\n    }", "language": "java", "code": "protected ProtocolCode decodeProtocolCode(ByteBuf in) {\n        if (in.readableBytes() >= protocolCodeLength) {\n            byte[] protocolCodeBytes = new byte[protocolCodeLength];\n            in.readBytes(protocolCodeBytes);\n            return ProtocolCode.fromBytes(protocolCodeBytes);\n        }\n        return null;\n    }", "code_tokens": ["protected", "ProtocolCode", "decodeProtocolCode", "(", "ByteBuf", "in", ")", "{", "if", "(", "in", ".", "readableBytes", "(", ")", ">=", "protocolCodeLength", ")", "{", "byte", "[", "]", "protocolCodeBytes", "=", "new", "byte", "[", "protocolCodeLength", "]", ";", "in", ".", "readBytes", "(", "protocolCodeBytes", ")", ";", "return", "ProtocolCode", ".", "fromBytes", "(", "protocolCodeBytes", ")", ";", "}", "return", "null", ";", "}"], "docstring": "decode the protocol code\n\n@param in input byte buf\n@return an instance of ProtocolCode", "docstring_tokens": ["decode", "the", "protocol", "code"], "sha": "0ad7b46b2649bfc4e2ecc1f5e1c1f935d179c046", "url": "https://github.com/alipay/sofa-bolt/blob/0ad7b46b2649bfc4e2ecc1f5e1c1f935d179c046/src/main/java/com/alipay/remoting/codec/ProtocolCodeBasedDecoder.java#L57-L64", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-db/src/main/java/jodd/db/oom/mapper/DefaultResultSetMapper.java", "func_name": "DefaultResultSetMapper.cacheResultSetEntities", "original_string": "protected void cacheResultSetEntities(final Object[] result) {\n\t\tif (entitiesCache == null) {\n\t\t\tentitiesCache = new HashMap<>();\n\t\t}\n\n\t\tfor (int i = 0; i < result.length; i++) {\n\t\t\tObject object = result[i];\n\n\t\t\tif (object == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tDbEntityDescriptor ded = cachedDbEntityDescriptors[i];\n\n\t\t\tif (ded == null) {\t// not a type, continue\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// calculate key\n\t\t\tObject key;\n\t\t\tif (ded.hasIdColumn()) {\n\t\t\t\t//noinspection unchecked\n\t\t\t\tkey = ded.getKeyValue(object);\n\t\t\t} else {\n\t\t\t\tkey = object;\n\t\t\t}\n\n\t\t\tObject cachedObject = entitiesCache.get(key);\n\n\t\t\tif (cachedObject == null) {\n\t\t\t\t// object is not in the cache, add it\n\t\t\t\tentitiesCache.put(key, object);\n\t\t\t} else {\n\t\t\t\t// object is in the cache, replace it\n\t\t\t\tresult[i] = cachedObject;\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "protected void cacheResultSetEntities(final Object[] result) {\n\t\tif (entitiesCache == null) {\n\t\t\tentitiesCache = new HashMap<>();\n\t\t}\n\n\t\tfor (int i = 0; i < result.length; i++) {\n\t\t\tObject object = result[i];\n\n\t\t\tif (object == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tDbEntityDescriptor ded = cachedDbEntityDescriptors[i];\n\n\t\t\tif (ded == null) {\t// not a type, continue\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// calculate key\n\t\t\tObject key;\n\t\t\tif (ded.hasIdColumn()) {\n\t\t\t\t//noinspection unchecked\n\t\t\t\tkey = ded.getKeyValue(object);\n\t\t\t} else {\n\t\t\t\tkey = object;\n\t\t\t}\n\n\t\t\tObject cachedObject = entitiesCache.get(key);\n\n\t\t\tif (cachedObject == null) {\n\t\t\t\t// object is not in the cache, add it\n\t\t\t\tentitiesCache.put(key, object);\n\t\t\t} else {\n\t\t\t\t// object is in the cache, replace it\n\t\t\t\tresult[i] = cachedObject;\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["protected", "void", "cacheResultSetEntities", "(", "final", "Object", "[", "]", "result", ")", "{", "if", "(", "entitiesCache", "==", "null", ")", "{", "entitiesCache", "=", "new", "HashMap", "<>", "(", ")", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "result", ".", "length", ";", "i", "++", ")", "{", "Object", "object", "=", "result", "[", "i", "]", ";", "if", "(", "object", "==", "null", ")", "{", "continue", ";", "}", "DbEntityDescriptor", "ded", "=", "cachedDbEntityDescriptors", "[", "i", "]", ";", "if", "(", "ded", "==", "null", ")", "{", "// not a type, continue", "continue", ";", "}", "// calculate key", "Object", "key", ";", "if", "(", "ded", ".", "hasIdColumn", "(", ")", ")", "{", "//noinspection unchecked", "key", "=", "ded", ".", "getKeyValue", "(", "object", ")", ";", "}", "else", "{", "key", "=", "object", ";", "}", "Object", "cachedObject", "=", "entitiesCache", ".", "get", "(", "key", ")", ";", "if", "(", "cachedObject", "==", "null", ")", "{", "// object is not in the cache, add it", "entitiesCache", ".", "put", "(", "key", ",", "object", ")", ";", "}", "else", "{", "// object is in the cache, replace it", "result", "[", "i", "]", "=", "cachedObject", ";", "}", "}", "}"], "docstring": "Caches returned entities. Replaces new instances with existing ones.", "docstring_tokens": ["Caches", "returned", "entities", ".", "Replaces", "new", "instances", "with", "existing", "ones", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-db/src/main/java/jodd/db/oom/mapper/DefaultResultSetMapper.java#L485-L522", "partition": "test"}
{"repo": "tony19/logback-android", "path": "logback-android/src/main/java/ch/qos/logback/core/net/server/ConcurrentServerRunner.java", "func_name": "ConcurrentServerRunner.removeClient", "original_string": "private void removeClient(T client) {\n    clientsLock.lock();\n    try {\n      clients.remove(client);\n    }\n    finally {\n      clientsLock.unlock();\n    }\n  }", "language": "java", "code": "private void removeClient(T client) {\n    clientsLock.lock();\n    try {\n      clients.remove(client);\n    }\n    finally {\n      clientsLock.unlock();\n    }\n  }", "code_tokens": ["private", "void", "removeClient", "(", "T", "client", ")", "{", "clientsLock", ".", "lock", "(", ")", ";", "try", "{", "clients", ".", "remove", "(", "client", ")", ";", "}", "finally", "{", "clientsLock", ".", "unlock", "(", ")", ";", "}", "}"], "docstring": "Removes a client from the collection of those being tracked by the server.\n@param client the client to remote", "docstring_tokens": ["Removes", "a", "client", "from", "the", "collection", "of", "those", "being", "tracked", "by", "the", "server", "."], "sha": "028489c11ccfc1237a53923db06f22a90b41809c", "url": "https://github.com/tony19/logback-android/blob/028489c11ccfc1237a53923db06f22a90b41809c/logback-android/src/main/java/ch/qos/logback/core/net/server/ConcurrentServerRunner.java#L193-L201", "partition": "test"}
{"repo": "Unidata/thredds", "path": "cdm/src/main/java/ucar/ma2/Index.java", "func_name": "Index.section", "original_string": "Index section(List<Range> ranges) throws InvalidRangeException {\r\n\r\n    // check ranges are valid\r\n    if (ranges.size() != rank)\r\n      throw new InvalidRangeException(\"Bad ranges [] length\");\r\n    for (int ii = 0; ii < rank; ii++) {\r\n      Range r = ranges.get(ii);\r\n      if (r == null)\r\n        continue;\r\n      if (r == Range.VLEN)\r\n        continue;\r\n      if ((r.first() < 0) || (r.first() >= shape[ii]))\r\n        throw new InvalidRangeException(\"Bad range starting value at index \" + ii + \" == \" + r.first());\r\n      if ((r.last() < 0) || (r.last() >= shape[ii]))\r\n        throw new InvalidRangeException(\"Bad range ending value at index \" + ii + \" == \" + r.last());\r\n    }\r\n\r\n    int reducedRank = rank;\r\n    for (Range r : ranges) {\r\n      if ((r != null) && (r.length() == 1))\r\n        reducedRank--;\r\n    }\r\n    Index newindex = Index.factory(reducedRank);\r\n    newindex.offset = offset;\r\n\r\n    // calc shape, size, and index transformations\r\n    // calc strides into original (backing) store\r\n    int newDim = 0;\r\n    for (int ii = 0; ii < rank; ii++) {\r\n      Range r = ranges.get(ii);\r\n      if (r == null) {          // null range means use the whole original dimension\r\n        newindex.shape[newDim] = shape[ii];\r\n        newindex.stride[newDim] = stride[ii];\r\n        //if (name != null) newindex.name[newDim] = name[ii];\r\n        newDim++;\r\n      } else if (r.length() != 1) {\r\n        newindex.shape[newDim] = r.length();\r\n        newindex.stride[newDim] = stride[ii] * r.stride();\r\n        newindex.offset += stride[ii] * r.first();\r\n        //if (name != null) newindex.name[newDim] = name[ii];\r\n        newDim++;\r\n      } else {\r\n        newindex.offset += stride[ii] * r.first();   // constant due to rank reduction\r\n      }\r\n    }\r\n    newindex.size = computeSize(newindex.shape);\r\n    newindex.fastIterator = fastIterator && (newindex.size == size); // if equal, then its not a real subset, so can still use fastIterator\r\n    newindex.precalc(); // any subclass-specific optimizations\r\n    return newindex;\r\n  }", "language": "java", "code": "Index section(List<Range> ranges) throws InvalidRangeException {\r\n\r\n    // check ranges are valid\r\n    if (ranges.size() != rank)\r\n      throw new InvalidRangeException(\"Bad ranges [] length\");\r\n    for (int ii = 0; ii < rank; ii++) {\r\n      Range r = ranges.get(ii);\r\n      if (r == null)\r\n        continue;\r\n      if (r == Range.VLEN)\r\n        continue;\r\n      if ((r.first() < 0) || (r.first() >= shape[ii]))\r\n        throw new InvalidRangeException(\"Bad range starting value at index \" + ii + \" == \" + r.first());\r\n      if ((r.last() < 0) || (r.last() >= shape[ii]))\r\n        throw new InvalidRangeException(\"Bad range ending value at index \" + ii + \" == \" + r.last());\r\n    }\r\n\r\n    int reducedRank = rank;\r\n    for (Range r : ranges) {\r\n      if ((r != null) && (r.length() == 1))\r\n        reducedRank--;\r\n    }\r\n    Index newindex = Index.factory(reducedRank);\r\n    newindex.offset = offset;\r\n\r\n    // calc shape, size, and index transformations\r\n    // calc strides into original (backing) store\r\n    int newDim = 0;\r\n    for (int ii = 0; ii < rank; ii++) {\r\n      Range r = ranges.get(ii);\r\n      if (r == null) {          // null range means use the whole original dimension\r\n        newindex.shape[newDim] = shape[ii];\r\n        newindex.stride[newDim] = stride[ii];\r\n        //if (name != null) newindex.name[newDim] = name[ii];\r\n        newDim++;\r\n      } else if (r.length() != 1) {\r\n        newindex.shape[newDim] = r.length();\r\n        newindex.stride[newDim] = stride[ii] * r.stride();\r\n        newindex.offset += stride[ii] * r.first();\r\n        //if (name != null) newindex.name[newDim] = name[ii];\r\n        newDim++;\r\n      } else {\r\n        newindex.offset += stride[ii] * r.first();   // constant due to rank reduction\r\n      }\r\n    }\r\n    newindex.size = computeSize(newindex.shape);\r\n    newindex.fastIterator = fastIterator && (newindex.size == size); // if equal, then its not a real subset, so can still use fastIterator\r\n    newindex.precalc(); // any subclass-specific optimizations\r\n    return newindex;\r\n  }", "code_tokens": ["Index", "section", "(", "List", "<", "Range", ">", "ranges", ")", "throws", "InvalidRangeException", "{", "// check ranges are valid\r", "if", "(", "ranges", ".", "size", "(", ")", "!=", "rank", ")", "throw", "new", "InvalidRangeException", "(", "\"Bad ranges [] length\"", ")", ";", "for", "(", "int", "ii", "=", "0", ";", "ii", "<", "rank", ";", "ii", "++", ")", "{", "Range", "r", "=", "ranges", ".", "get", "(", "ii", ")", ";", "if", "(", "r", "==", "null", ")", "continue", ";", "if", "(", "r", "==", "Range", ".", "VLEN", ")", "continue", ";", "if", "(", "(", "r", ".", "first", "(", ")", "<", "0", ")", "||", "(", "r", ".", "first", "(", ")", ">=", "shape", "[", "ii", "]", ")", ")", "throw", "new", "InvalidRangeException", "(", "\"Bad range starting value at index \"", "+", "ii", "+", "\" == \"", "+", "r", ".", "first", "(", ")", ")", ";", "if", "(", "(", "r", ".", "last", "(", ")", "<", "0", ")", "||", "(", "r", ".", "last", "(", ")", ">=", "shape", "[", "ii", "]", ")", ")", "throw", "new", "InvalidRangeException", "(", "\"Bad range ending value at index \"", "+", "ii", "+", "\" == \"", "+", "r", ".", "last", "(", ")", ")", ";", "}", "int", "reducedRank", "=", "rank", ";", "for", "(", "Range", "r", ":", "ranges", ")", "{", "if", "(", "(", "r", "!=", "null", ")", "&&", "(", "r", ".", "length", "(", ")", "==", "1", ")", ")", "reducedRank", "--", ";", "}", "Index", "newindex", "=", "Index", ".", "factory", "(", "reducedRank", ")", ";", "newindex", ".", "offset", "=", "offset", ";", "// calc shape, size, and index transformations\r", "// calc strides into original (backing) store\r", "int", "newDim", "=", "0", ";", "for", "(", "int", "ii", "=", "0", ";", "ii", "<", "rank", ";", "ii", "++", ")", "{", "Range", "r", "=", "ranges", ".", "get", "(", "ii", ")", ";", "if", "(", "r", "==", "null", ")", "{", "// null range means use the whole original dimension\r", "newindex", ".", "shape", "[", "newDim", "]", "=", "shape", "[", "ii", "]", ";", "newindex", ".", "stride", "[", "newDim", "]", "=", "stride", "[", "ii", "]", ";", "//if (name != null) newindex.name[newDim] = name[ii];\r", "newDim", "++", ";", "}", "else", "if", "(", "r", ".", "length", "(", ")", "!=", "1", ")", "{", "newindex", ".", "shape", "[", "newDim", "]", "=", "r", ".", "length", "(", ")", ";", "newindex", ".", "stride", "[", "newDim", "]", "=", "stride", "[", "ii", "]", "*", "r", ".", "stride", "(", ")", ";", "newindex", ".", "offset", "+=", "stride", "[", "ii", "]", "*", "r", ".", "first", "(", ")", ";", "//if (name != null) newindex.name[newDim] = name[ii];\r", "newDim", "++", ";", "}", "else", "{", "newindex", ".", "offset", "+=", "stride", "[", "ii", "]", "*", "r", ".", "first", "(", ")", ";", "// constant due to rank reduction\r", "}", "}", "newindex", ".", "size", "=", "computeSize", "(", "newindex", ".", "shape", ")", ";", "newindex", ".", "fastIterator", "=", "fastIterator", "&&", "(", "newindex", ".", "size", "==", "size", ")", ";", "// if equal, then its not a real subset, so can still use fastIterator\r", "newindex", ".", "precalc", "(", ")", ";", "// any subclass-specific optimizations\r", "return", "newindex", ";", "}"], "docstring": "create a new Index based on a subsection of this one, with rank reduction if\ndimension length == 1.\n\n@param ranges array of Ranges that specify the array subset.\nMust be same rank as original Array.\nA particular Range: 1) may be a subset; 2) may be null, meaning use entire Range.\n@return new Index, with same or smaller rank as original.\n@throws InvalidRangeException if ranges dont match current shape", "docstring_tokens": ["create", "a", "new", "Index", "based", "on", "a", "subsection", "of", "this", "one", "with", "rank", "reduction", "if", "dimension", "length", "==", "1", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/cdm/src/main/java/ucar/ma2/Index.java#L215-L264", "partition": "test"}
{"repo": "objectify/objectify", "path": "src/main/java/com/googlecode/objectify/repackaged/gentyref/GenericTypeReflector.java", "func_name": "GenericTypeReflector.getExactDirectSuperTypes", "original_string": "private static Type[] getExactDirectSuperTypes(Type type) {\n\t\tif (type instanceof ParameterizedType || type instanceof Class) {\n\t\t\tClass<?> clazz;\n\t\t\tif (type instanceof ParameterizedType) {\n\t\t\t\tclazz = (Class<?>)((ParameterizedType)type).getRawType();\n\t\t\t} else {\n\t\t\t\t// TODO primitive types?\n\t\t\t\tclazz = (Class<?>)type;\n\t\t\t\tif (clazz.isArray())\n\t\t\t\t\treturn getArrayExactDirectSuperTypes(clazz);\n\t\t\t}\n\t\t\t\n\t\t\tType[] superInterfaces = clazz.getGenericInterfaces();\n\t\t\tType superClass = clazz.getGenericSuperclass();\n\t\t\t\n\t\t\t// the only supertype of an interface without superinterfaces is Object\n\t\t\tif (superClass == null && superInterfaces.length == 0 && clazz.isInterface()) {\n\t\t\t\treturn new Type[] {Object.class};\n\t\t\t}\n\t\t\t\n\t\t\tType[] result;\n\t\t\tint resultIndex;\n\t\t\tif (superClass == null) {\n\t\t\t\tresult = new Type[superInterfaces.length];\n\t\t\t\tresultIndex = 0;\n\t\t\t} else {\n\t\t\t\tresult = new Type[superInterfaces.length + 1];\n\t\t\t\tresultIndex = 1;\n\t\t\t\tresult[0] = mapTypeParameters(superClass, type);\n\t\t\t}\n\t\t\tfor (Type superInterface : superInterfaces) {\n\t\t\t\tresult[resultIndex++] = mapTypeParameters(superInterface, type);\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t} else if (type instanceof TypeVariable) {\n\t\t\tTypeVariable<?> tv = (TypeVariable<?>) type;\n\t\t\treturn tv.getBounds();\n\t\t} else if (type instanceof WildcardType) {\n\t\t\t// This should be a rare case: normally this wildcard is already captured.\n\t\t\t// But it does happen if the upper bound of a type variable contains a wildcard\n\t\t\t// TODO shouldn't upper bound of type variable have been captured too? (making this case impossible?)\n\t\t\treturn ((WildcardType) type).getUpperBounds();\n\t\t} else if (type instanceof CaptureType) {\n\t\t\treturn ((CaptureType)type).getUpperBounds();\n\t\t} else if (type instanceof GenericArrayType) {\n\t\t\treturn getArrayExactDirectSuperTypes(type);\n\t\t} else if (type == null) {\n\t\t\tthrow new NullPointerException();\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"not implemented type: \" + type);\n\t\t}\n\t}", "language": "java", "code": "private static Type[] getExactDirectSuperTypes(Type type) {\n\t\tif (type instanceof ParameterizedType || type instanceof Class) {\n\t\t\tClass<?> clazz;\n\t\t\tif (type instanceof ParameterizedType) {\n\t\t\t\tclazz = (Class<?>)((ParameterizedType)type).getRawType();\n\t\t\t} else {\n\t\t\t\t// TODO primitive types?\n\t\t\t\tclazz = (Class<?>)type;\n\t\t\t\tif (clazz.isArray())\n\t\t\t\t\treturn getArrayExactDirectSuperTypes(clazz);\n\t\t\t}\n\t\t\t\n\t\t\tType[] superInterfaces = clazz.getGenericInterfaces();\n\t\t\tType superClass = clazz.getGenericSuperclass();\n\t\t\t\n\t\t\t// the only supertype of an interface without superinterfaces is Object\n\t\t\tif (superClass == null && superInterfaces.length == 0 && clazz.isInterface()) {\n\t\t\t\treturn new Type[] {Object.class};\n\t\t\t}\n\t\t\t\n\t\t\tType[] result;\n\t\t\tint resultIndex;\n\t\t\tif (superClass == null) {\n\t\t\t\tresult = new Type[superInterfaces.length];\n\t\t\t\tresultIndex = 0;\n\t\t\t} else {\n\t\t\t\tresult = new Type[superInterfaces.length + 1];\n\t\t\t\tresultIndex = 1;\n\t\t\t\tresult[0] = mapTypeParameters(superClass, type);\n\t\t\t}\n\t\t\tfor (Type superInterface : superInterfaces) {\n\t\t\t\tresult[resultIndex++] = mapTypeParameters(superInterface, type);\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t} else if (type instanceof TypeVariable) {\n\t\t\tTypeVariable<?> tv = (TypeVariable<?>) type;\n\t\t\treturn tv.getBounds();\n\t\t} else if (type instanceof WildcardType) {\n\t\t\t// This should be a rare case: normally this wildcard is already captured.\n\t\t\t// But it does happen if the upper bound of a type variable contains a wildcard\n\t\t\t// TODO shouldn't upper bound of type variable have been captured too? (making this case impossible?)\n\t\t\treturn ((WildcardType) type).getUpperBounds();\n\t\t} else if (type instanceof CaptureType) {\n\t\t\treturn ((CaptureType)type).getUpperBounds();\n\t\t} else if (type instanceof GenericArrayType) {\n\t\t\treturn getArrayExactDirectSuperTypes(type);\n\t\t} else if (type == null) {\n\t\t\tthrow new NullPointerException();\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"not implemented type: \" + type);\n\t\t}\n\t}", "code_tokens": ["private", "static", "Type", "[", "]", "getExactDirectSuperTypes", "(", "Type", "type", ")", "{", "if", "(", "type", "instanceof", "ParameterizedType", "||", "type", "instanceof", "Class", ")", "{", "Class", "<", "?", ">", "clazz", ";", "if", "(", "type", "instanceof", "ParameterizedType", ")", "{", "clazz", "=", "(", "Class", "<", "?", ">", ")", "(", "(", "ParameterizedType", ")", "type", ")", ".", "getRawType", "(", ")", ";", "}", "else", "{", "// TODO primitive types?", "clazz", "=", "(", "Class", "<", "?", ">", ")", "type", ";", "if", "(", "clazz", ".", "isArray", "(", ")", ")", "return", "getArrayExactDirectSuperTypes", "(", "clazz", ")", ";", "}", "Type", "[", "]", "superInterfaces", "=", "clazz", ".", "getGenericInterfaces", "(", ")", ";", "Type", "superClass", "=", "clazz", ".", "getGenericSuperclass", "(", ")", ";", "// the only supertype of an interface without superinterfaces is Object", "if", "(", "superClass", "==", "null", "&&", "superInterfaces", ".", "length", "==", "0", "&&", "clazz", ".", "isInterface", "(", ")", ")", "{", "return", "new", "Type", "[", "]", "{", "Object", ".", "class", "}", ";", "}", "Type", "[", "]", "result", ";", "int", "resultIndex", ";", "if", "(", "superClass", "==", "null", ")", "{", "result", "=", "new", "Type", "[", "superInterfaces", ".", "length", "]", ";", "resultIndex", "=", "0", ";", "}", "else", "{", "result", "=", "new", "Type", "[", "superInterfaces", ".", "length", "+", "1", "]", ";", "resultIndex", "=", "1", ";", "result", "[", "0", "]", "=", "mapTypeParameters", "(", "superClass", ",", "type", ")", ";", "}", "for", "(", "Type", "superInterface", ":", "superInterfaces", ")", "{", "result", "[", "resultIndex", "++", "]", "=", "mapTypeParameters", "(", "superInterface", ",", "type", ")", ";", "}", "return", "result", ";", "}", "else", "if", "(", "type", "instanceof", "TypeVariable", ")", "{", "TypeVariable", "<", "?", ">", "tv", "=", "(", "TypeVariable", "<", "?", ">", ")", "type", ";", "return", "tv", ".", "getBounds", "(", ")", ";", "}", "else", "if", "(", "type", "instanceof", "WildcardType", ")", "{", "// This should be a rare case: normally this wildcard is already captured.", "// But it does happen if the upper bound of a type variable contains a wildcard", "// TODO shouldn't upper bound of type variable have been captured too? (making this case impossible?)", "return", "(", "(", "WildcardType", ")", "type", ")", ".", "getUpperBounds", "(", ")", ";", "}", "else", "if", "(", "type", "instanceof", "CaptureType", ")", "{", "return", "(", "(", "CaptureType", ")", "type", ")", ".", "getUpperBounds", "(", ")", ";", "}", "else", "if", "(", "type", "instanceof", "GenericArrayType", ")", "{", "return", "getArrayExactDirectSuperTypes", "(", "type", ")", ";", "}", "else", "if", "(", "type", "==", "null", ")", "{", "throw", "new", "NullPointerException", "(", ")", ";", "}", "else", "{", "throw", "new", "RuntimeException", "(", "\"not implemented type: \"", "+", "type", ")", ";", "}", "}"], "docstring": "Returns the direct supertypes of the given type. Resolves type parameters.", "docstring_tokens": ["Returns", "the", "direct", "supertypes", "of", "the", "given", "type", ".", "Resolves", "type", "parameters", "."], "sha": "4bf325d2e49b400326416977c7d9bbdf5380175b", "url": "https://github.com/objectify/objectify/blob/4bf325d2e49b400326416977c7d9bbdf5380175b/src/main/java/com/googlecode/objectify/repackaged/gentyref/GenericTypeReflector.java#L274-L326", "partition": "test"}
{"repo": "artclarke/humble-video", "path": "humble-video-stage/humble-video-arch-x86_64-apple-darwin18-debug/src/main/java/io/humble/video_native/Version.java", "func_name": "Version.getVersionInfo", "original_string": "public static String getVersionInfo() {\n    final Class<?> c = Version.class;\n    final StringBuilder b = new StringBuilder();\n    final Package p = c.getPackage();\n    \n    b.append(\"Class: \" + c.getCanonicalName() + \"; \");\n    b.append(\"Specification Vendor: \" + p.getSpecificationVendor() + \"; \");\n    b.append(\"Specification Title: \" + p.getSpecificationTitle() + \"; \");\n    b.append(\"Specification Version: \" + p.getSpecificationVersion() + \"; \");\n    b.append(\"Implementation Vendor: \" + p.getImplementationVendor() + \"; \");\n    b.append(\"Implementation Title: \" + p.getImplementationTitle() + \"; \");\n    b.append(\"Implementation Version: \" + p.getImplementationVersion() + \";\");\n    \n    return b.toString();\n  }", "language": "java", "code": "public static String getVersionInfo() {\n    final Class<?> c = Version.class;\n    final StringBuilder b = new StringBuilder();\n    final Package p = c.getPackage();\n    \n    b.append(\"Class: \" + c.getCanonicalName() + \"; \");\n    b.append(\"Specification Vendor: \" + p.getSpecificationVendor() + \"; \");\n    b.append(\"Specification Title: \" + p.getSpecificationTitle() + \"; \");\n    b.append(\"Specification Version: \" + p.getSpecificationVersion() + \"; \");\n    b.append(\"Implementation Vendor: \" + p.getImplementationVendor() + \"; \");\n    b.append(\"Implementation Title: \" + p.getImplementationTitle() + \"; \");\n    b.append(\"Implementation Version: \" + p.getImplementationVersion() + \";\");\n    \n    return b.toString();\n  }", "code_tokens": ["public", "static", "String", "getVersionInfo", "(", ")", "{", "final", "Class", "<", "?", ">", "c", "=", "Version", ".", "class", ";", "final", "StringBuilder", "b", "=", "new", "StringBuilder", "(", ")", ";", "final", "Package", "p", "=", "c", ".", "getPackage", "(", ")", ";", "b", ".", "append", "(", "\"Class: \"", "+", "c", ".", "getCanonicalName", "(", ")", "+", "\"; \"", ")", ";", "b", ".", "append", "(", "\"Specification Vendor: \"", "+", "p", ".", "getSpecificationVendor", "(", ")", "+", "\"; \"", ")", ";", "b", ".", "append", "(", "\"Specification Title: \"", "+", "p", ".", "getSpecificationTitle", "(", ")", "+", "\"; \"", ")", ";", "b", ".", "append", "(", "\"Specification Version: \"", "+", "p", ".", "getSpecificationVersion", "(", ")", "+", "\"; \"", ")", ";", "b", ".", "append", "(", "\"Implementation Vendor: \"", "+", "p", ".", "getImplementationVendor", "(", ")", "+", "\"; \"", ")", ";", "b", ".", "append", "(", "\"Implementation Title: \"", "+", "p", ".", "getImplementationTitle", "(", ")", "+", "\"; \"", ")", ";", "b", ".", "append", "(", "\"Implementation Version: \"", "+", "p", ".", "getImplementationVersion", "(", ")", "+", "\";\"", ")", ";", "return", "b", ".", "toString", "(", ")", ";", "}"], "docstring": "Prints the version of this library to System.out along with\nsome information on what this jar is.", "docstring_tokens": ["Prints", "the", "version", "of", "this", "library", "to", "System", ".", "out", "along", "with", "some", "information", "on", "what", "this", "jar", "is", "."], "sha": "aa349ae2d7ef74160b7074feac8d298cf90394d1", "url": "https://github.com/artclarke/humble-video/blob/aa349ae2d7ef74160b7074feac8d298cf90394d1/humble-video-stage/humble-video-arch-x86_64-apple-darwin18-debug/src/main/java/io/humble/video_native/Version.java#L34-L48", "partition": "test"}
{"repo": "lightcouch/LightCouch", "path": "src/main/java/org/lightcouch/CouchDbContext.java", "func_name": "CouchDbContext.deleteDB", "original_string": "public void deleteDB(String dbName, String confirm) {\n\t\tassertNotEmpty(dbName, \"dbName\");\n\t\tif(!\"delete database\".equals(confirm))\n\t\t\tthrow new IllegalArgumentException(\"Invalid confirm!\");\n\t\tdbc.delete(buildUri(dbc.getBaseUri()).path(dbName).build());\n\t}", "language": "java", "code": "public void deleteDB(String dbName, String confirm) {\n\t\tassertNotEmpty(dbName, \"dbName\");\n\t\tif(!\"delete database\".equals(confirm))\n\t\t\tthrow new IllegalArgumentException(\"Invalid confirm!\");\n\t\tdbc.delete(buildUri(dbc.getBaseUri()).path(dbName).build());\n\t}", "code_tokens": ["public", "void", "deleteDB", "(", "String", "dbName", ",", "String", "confirm", ")", "{", "assertNotEmpty", "(", "dbName", ",", "\"dbName\"", ")", ";", "if", "(", "!", "\"delete database\"", ".", "equals", "(", "confirm", ")", ")", "throw", "new", "IllegalArgumentException", "(", "\"Invalid confirm!\"", ")", ";", "dbc", ".", "delete", "(", "buildUri", "(", "dbc", ".", "getBaseUri", "(", ")", ")", ".", "path", "(", "dbName", ")", ".", "build", "(", ")", ")", ";", "}"], "docstring": "Requests CouchDB deletes a database.\n@param dbName The database name\n@param confirm A confirmation string with the value: <tt>delete database</tt>", "docstring_tokens": ["Requests", "CouchDB", "deletes", "a", "database", "."], "sha": "9646889503475e862fd2158487e1cdd805447f4a", "url": "https://github.com/lightcouch/LightCouch/blob/9646889503475e862fd2158487e1cdd805447f4a/src/main/java/org/lightcouch/CouchDbContext.java#L66-L71", "partition": "test"}
{"repo": "deeplearning4j/nd4j", "path": "nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/ops/transforms/Transforms.java", "func_name": "Transforms.max", "original_string": "public static INDArray max(INDArray first, INDArray second, boolean dup) {\n        if (dup) {\n            first = first.dup();\n        }\n        return exec(new OldMax(second, first, first, first.length()));\n    }", "language": "java", "code": "public static INDArray max(INDArray first, INDArray second, boolean dup) {\n        if (dup) {\n            first = first.dup();\n        }\n        return exec(new OldMax(second, first, first, first.length()));\n    }", "code_tokens": ["public", "static", "INDArray", "max", "(", "INDArray", "first", ",", "INDArray", "second", ",", "boolean", "dup", ")", "{", "if", "(", "dup", ")", "{", "first", "=", "first", ".", "dup", "(", ")", ";", "}", "return", "exec", "(", "new", "OldMax", "(", "second", ",", "first", ",", "first", ",", "first", ".", "length", "(", ")", ")", ")", ";", "}"], "docstring": "Element wise maximum function between 2 INDArrays\n\n@param first\n@param second\n@param dup\n@return", "docstring_tokens": ["Element", "wise", "maximum", "function", "between", "2", "INDArrays"], "sha": "8f005bcecb240d1fbb83b9d390ad801d1d3b6933", "url": "https://github.com/deeplearning4j/nd4j/blob/8f005bcecb240d1fbb83b9d390ad801d1d3b6933/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/ops/transforms/Transforms.java#L815-L820", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-db/src/main/java/jodd/db/DbQueryBase.java", "func_name": "DbQueryBase.close", "original_string": "@Override\n\t@SuppressWarnings({\"ClassReferencesSubclass\"})\n\tpublic void close() {\n\t\tfinal SQLException sqlException = closeQuery();\n\t\tconnection = null;\n\t\tif (this.session != null) {\n\t\t\tthis.session.detachQuery(this);\n\t\t}\n\t\tif (sqlException != null) {\n\t\t\tthrow new DbSqlException(\"Close query error\", sqlException);\n\t\t}\n\t}", "language": "java", "code": "@Override\n\t@SuppressWarnings({\"ClassReferencesSubclass\"})\n\tpublic void close() {\n\t\tfinal SQLException sqlException = closeQuery();\n\t\tconnection = null;\n\t\tif (this.session != null) {\n\t\t\tthis.session.detachQuery(this);\n\t\t}\n\t\tif (sqlException != null) {\n\t\t\tthrow new DbSqlException(\"Close query error\", sqlException);\n\t\t}\n\t}", "code_tokens": ["@", "Override", "@", "SuppressWarnings", "(", "{", "\"ClassReferencesSubclass\"", "}", ")", "public", "void", "close", "(", ")", "{", "final", "SQLException", "sqlException", "=", "closeQuery", "(", ")", ";", "connection", "=", "null", ";", "if", "(", "this", ".", "session", "!=", "null", ")", "{", "this", ".", "session", ".", "detachQuery", "(", "this", ")", ";", "}", "if", "(", "sqlException", "!=", "null", ")", "{", "throw", "new", "DbSqlException", "(", "\"Close query error\"", ",", "sqlException", ")", ";", "}", "}"], "docstring": "Closes the query and all created results sets and detaches itself from the session.", "docstring_tokens": ["Closes", "the", "query", "and", "all", "created", "results", "sets", "and", "detaches", "itself", "from", "the", "session", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-db/src/main/java/jodd/db/DbQueryBase.java#L438-L449", "partition": "test"}
{"repo": "artclarke/humble-video", "path": "humble-video-noarch/src/main/java/io/humble/ferry/JNIEnv.java", "func_name": "JNIEnv.getOSFamilyFromGNUString", "original_string": "public static OSFamily getOSFamilyFromGNUString(String gnuString)\n  {\n    final String nativeOs = (gnuString != null ? gnuString.toLowerCase() : \"\");\n    final OSFamily retval;\n    if (nativeOs.startsWith(\"mingw\") || nativeOs.startsWith(\"cygwin\"))\n      retval = OSFamily.WINDOWS;\n    else if (nativeOs.startsWith(\"darwin\"))\n      retval = OSFamily.MAC;\n    else if (nativeOs.startsWith(\"linux\"))\n      retval = OSFamily.LINUX;\n    else\n      retval = OSFamily.UNKNOWN;\n    return retval;\n  }", "language": "java", "code": "public static OSFamily getOSFamilyFromGNUString(String gnuString)\n  {\n    final String nativeOs = (gnuString != null ? gnuString.toLowerCase() : \"\");\n    final OSFamily retval;\n    if (nativeOs.startsWith(\"mingw\") || nativeOs.startsWith(\"cygwin\"))\n      retval = OSFamily.WINDOWS;\n    else if (nativeOs.startsWith(\"darwin\"))\n      retval = OSFamily.MAC;\n    else if (nativeOs.startsWith(\"linux\"))\n      retval = OSFamily.LINUX;\n    else\n      retval = OSFamily.UNKNOWN;\n    return retval;\n  }", "code_tokens": ["public", "static", "OSFamily", "getOSFamilyFromGNUString", "(", "String", "gnuString", ")", "{", "final", "String", "nativeOs", "=", "(", "gnuString", "!=", "null", "?", "gnuString", ".", "toLowerCase", "(", ")", ":", "\"\"", ")", ";", "final", "OSFamily", "retval", ";", "if", "(", "nativeOs", ".", "startsWith", "(", "\"mingw\"", ")", "||", "nativeOs", ".", "startsWith", "(", "\"cygwin\"", ")", ")", "retval", "=", "OSFamily", ".", "WINDOWS", ";", "else", "if", "(", "nativeOs", ".", "startsWith", "(", "\"darwin\"", ")", ")", "retval", "=", "OSFamily", ".", "MAC", ";", "else", "if", "(", "nativeOs", ".", "startsWith", "(", "\"linux\"", ")", ")", "retval", "=", "OSFamily", ".", "LINUX", ";", "else", "retval", "=", "OSFamily", ".", "UNKNOWN", ";", "return", "retval", ";", "}"], "docstring": "Return an OS Family from parsing a GNU autoconf triple.\n\nFor example \"x86_64-w64-mingw32\" will return {@link JNIEnv.OSFamily#WINDOWS}\nand \"ppc-apple-darwin\" will return {@link JNIEnv.OSFamily#MAC}.\n\n@param gnuString the GNU string\n@return the OSFamily", "docstring_tokens": ["Return", "an", "OS", "Family", "from", "parsing", "a", "GNU", "autoconf", "triple", "."], "sha": "aa349ae2d7ef74160b7074feac8d298cf90394d1", "url": "https://github.com/artclarke/humble-video/blob/aa349ae2d7ef74160b7074feac8d298cf90394d1/humble-video-noarch/src/main/java/io/humble/ferry/JNIEnv.java#L195-L208", "partition": "test"}
{"repo": "tiefaces/TieFaces", "path": "src/org/tiefaces/components/websheet/TieWebSheetBean.java", "func_name": "TieWebSheetBean.doSubmit", "original_string": "public void doSubmit() {\r\n\t\t\t\t\r\n\t\tthis.setSubmitMde(true);\r\n\t\t// validation may behavior differently depend on the submit mode.\r\n\t\t// e.g. when submit mode = false, empty fields or value not changed cells\r\n\t\t// don't need to pass the validation rule. This allow partial save the form. \r\n\t\t// when submit mode = true, all cells need to pass the validation.\r\n\t\tif (!this.getHelper().getValidationHandler().preValidation()) {\r\n\t\t\tLOG.fine(\"Validation failed before saving\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tprocessSubmit();\r\n\t\tthis.getHelper().getWebSheetLoader().setUnsavedStatus(\r\n\t\t\t\tRequestContext.getCurrentInstance(), false);\r\n\t\tthis.setSubmitMde(false);\r\n\t}", "language": "java", "code": "public void doSubmit() {\r\n\t\t\t\t\r\n\t\tthis.setSubmitMde(true);\r\n\t\t// validation may behavior differently depend on the submit mode.\r\n\t\t// e.g. when submit mode = false, empty fields or value not changed cells\r\n\t\t// don't need to pass the validation rule. This allow partial save the form. \r\n\t\t// when submit mode = true, all cells need to pass the validation.\r\n\t\tif (!this.getHelper().getValidationHandler().preValidation()) {\r\n\t\t\tLOG.fine(\"Validation failed before saving\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tprocessSubmit();\r\n\t\tthis.getHelper().getWebSheetLoader().setUnsavedStatus(\r\n\t\t\t\tRequestContext.getCurrentInstance(), false);\r\n\t\tthis.setSubmitMde(false);\r\n\t}", "code_tokens": ["public", "void", "doSubmit", "(", ")", "{", "this", ".", "setSubmitMde", "(", "true", ")", ";", "// validation may behavior differently depend on the submit mode.\r", "// e.g. when submit mode = false, empty fields or value not changed cells\r", "// don't need to pass the validation rule. This allow partial save the form. \r", "// when submit mode = true, all cells need to pass the validation.\r", "if", "(", "!", "this", ".", "getHelper", "(", ")", ".", "getValidationHandler", "(", ")", ".", "preValidation", "(", ")", ")", "{", "LOG", ".", "fine", "(", "\"Validation failed before saving\"", ")", ";", "return", ";", "}", "processSubmit", "(", ")", ";", "this", ".", "getHelper", "(", ")", ".", "getWebSheetLoader", "(", ")", ".", "setUnsavedStatus", "(", "RequestContext", ".", "getCurrentInstance", "(", ")", ",", "false", ")", ";", "this", ".", "setSubmitMde", "(", "false", ")", ";", "}"], "docstring": "Submit the current workbooks.", "docstring_tokens": ["Submit", "the", "current", "workbooks", "."], "sha": "3b57b9701ed0f080b5fa4fa78269cc0c422b34ba", "url": "https://github.com/tiefaces/TieFaces/blob/3b57b9701ed0f080b5fa4fa78269cc0c422b34ba/src/org/tiefaces/components/websheet/TieWebSheetBean.java#L687-L702", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-lagarto/src/main/java/jodd/lagarto/dom/LagartoDOMBuilderTagVisitor.java", "func_name": "LagartoDOMBuilderTagVisitor.createElementNode", "original_string": "protected Element createElementNode(final Tag tag) {\n\t\tboolean hasVoidTags = htmlVoidRules != null;\n\n\t\tboolean isVoid = false;\n\t\tboolean selfClosed = false;\n\n\t\tif (hasVoidTags) {\n\t\t\tisVoid = htmlVoidRules.isVoidTag(tag.getName());\n\n\t\t\t// HTML and XHTML\n\t\t\tif (isVoid) {\n\t\t\t\t// it's void tag, lookup the flag\n\t\t\t\tselfClosed = domBuilder.config.isSelfCloseVoidTags();\n\t\t\t}\n\t\t} else {\n\t\t\t// XML, no voids, lookup the flag\n\t\t\tselfClosed = domBuilder.config.isSelfCloseVoidTags();\n\t\t}\n\n\t\treturn new Element(rootNode, tag, isVoid, selfClosed);\n\t}", "language": "java", "code": "protected Element createElementNode(final Tag tag) {\n\t\tboolean hasVoidTags = htmlVoidRules != null;\n\n\t\tboolean isVoid = false;\n\t\tboolean selfClosed = false;\n\n\t\tif (hasVoidTags) {\n\t\t\tisVoid = htmlVoidRules.isVoidTag(tag.getName());\n\n\t\t\t// HTML and XHTML\n\t\t\tif (isVoid) {\n\t\t\t\t// it's void tag, lookup the flag\n\t\t\t\tselfClosed = domBuilder.config.isSelfCloseVoidTags();\n\t\t\t}\n\t\t} else {\n\t\t\t// XML, no voids, lookup the flag\n\t\t\tselfClosed = domBuilder.config.isSelfCloseVoidTags();\n\t\t}\n\n\t\treturn new Element(rootNode, tag, isVoid, selfClosed);\n\t}", "code_tokens": ["protected", "Element", "createElementNode", "(", "final", "Tag", "tag", ")", "{", "boolean", "hasVoidTags", "=", "htmlVoidRules", "!=", "null", ";", "boolean", "isVoid", "=", "false", ";", "boolean", "selfClosed", "=", "false", ";", "if", "(", "hasVoidTags", ")", "{", "isVoid", "=", "htmlVoidRules", ".", "isVoidTag", "(", "tag", ".", "getName", "(", ")", ")", ";", "// HTML and XHTML", "if", "(", "isVoid", ")", "{", "// it's void tag, lookup the flag", "selfClosed", "=", "domBuilder", ".", "config", ".", "isSelfCloseVoidTags", "(", ")", ";", "}", "}", "else", "{", "// XML, no voids, lookup the flag", "selfClosed", "=", "domBuilder", ".", "config", ".", "isSelfCloseVoidTags", "(", ")", ";", "}", "return", "new", "Element", "(", "rootNode", ",", "tag", ",", "isVoid", ",", "selfClosed", ")", ";", "}"], "docstring": "Creates new element with correct configuration.", "docstring_tokens": ["Creates", "new", "element", "with", "correct", "configuration", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-lagarto/src/main/java/jodd/lagarto/dom/LagartoDOMBuilderTagVisitor.java#L148-L168", "partition": "test"}
{"repo": "objectify/objectify", "path": "src/main/java/com/googlecode/objectify/impl/KeyMetadata.java", "func_name": "KeyMetadata.setLongId", "original_string": "public void setLongId(P pojo, Long id) {\n\t\tif (!clazz.isAssignableFrom(pojo.getClass()))\n\t\t\tthrow new IllegalArgumentException(\"Trying to use metadata for \" + clazz.getName() + \" to set key of \" + pojo.getClass().getName());\n\n\t\tthis.idMeta.getProperty().set(pojo, id);\n\t}", "language": "java", "code": "public void setLongId(P pojo, Long id) {\n\t\tif (!clazz.isAssignableFrom(pojo.getClass()))\n\t\t\tthrow new IllegalArgumentException(\"Trying to use metadata for \" + clazz.getName() + \" to set key of \" + pojo.getClass().getName());\n\n\t\tthis.idMeta.getProperty().set(pojo, id);\n\t}", "code_tokens": ["public", "void", "setLongId", "(", "P", "pojo", ",", "Long", "id", ")", "{", "if", "(", "!", "clazz", ".", "isAssignableFrom", "(", "pojo", ".", "getClass", "(", ")", ")", ")", "throw", "new", "IllegalArgumentException", "(", "\"Trying to use metadata for \"", "+", "clazz", ".", "getName", "(", ")", "+", "\" to set key of \"", "+", "pojo", ".", "getClass", "(", ")", ".", "getName", "(", ")", ")", ";", "this", ".", "idMeta", ".", "getProperty", "(", ")", ".", "set", "(", "pojo", ",", "id", ")", ";", "}"], "docstring": "Sets the numeric id field", "docstring_tokens": ["Sets", "the", "numeric", "id", "field"], "sha": "4bf325d2e49b400326416977c7d9bbdf5380175b", "url": "https://github.com/objectify/objectify/blob/4bf325d2e49b400326416977c7d9bbdf5380175b/src/main/java/com/googlecode/objectify/impl/KeyMetadata.java#L254-L259", "partition": "test"}
{"repo": "orientechnologies/orientdb", "path": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/OrientSql.java", "func_name": "OrientSql.getToken", "original_string": "final public Token getToken(int index) {\n    Token t = token;\n    for (int i = 0; i < index; i++) {\n      if (t.next != null) t = t.next;\n      else t = t.next = token_source.getNextToken();\n    }\n    return t;\n  }", "language": "java", "code": "final public Token getToken(int index) {\n    Token t = token;\n    for (int i = 0; i < index; i++) {\n      if (t.next != null) t = t.next;\n      else t = t.next = token_source.getNextToken();\n    }\n    return t;\n  }", "code_tokens": ["final", "public", "Token", "getToken", "(", "int", "index", ")", "{", "Token", "t", "=", "token", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "index", ";", "i", "++", ")", "{", "if", "(", "t", ".", "next", "!=", "null", ")", "t", "=", "t", ".", "next", ";", "else", "t", "=", "t", ".", "next", "=", "token_source", ".", "getNextToken", "(", ")", ";", "}", "return", "t", ";", "}"], "docstring": "Get the specific Token.", "docstring_tokens": ["Get", "the", "specific", "Token", "."], "sha": "d970b12033f0462f0239ea0ad8ed41207e6e26f1", "url": "https://github.com/orientechnologies/orientdb/blob/d970b12033f0462f0239ea0ad8ed41207e6e26f1/core/src/main/java/com/orientechnologies/orient/core/sql/parser/OrientSql.java#L31546-L31553", "partition": "test"}
{"repo": "Unidata/thredds", "path": "cdm/src/main/java/ucar/ma2/StructureDataDeep.java", "func_name": "StructureDataDeep.copyToArrayBB", "original_string": "static public ArrayStructureBB copyToArrayBB(ArrayStructure as, ByteOrder bo, boolean canonical) throws IOException {\n    if (!canonical && as.getClass().equals(ArrayStructureBB.class)) { // no subclasses, LOOK detect already canonical later\n      ArrayStructureBB abb = (ArrayStructureBB) as;\n      ByteBuffer bb = abb.getByteBuffer();\n      if (bo == null || bo.equals(bb.order()))\n        return abb;\n    }\n\n    StructureMembers smo = as.getStructureMembers();\n    StructureMembers sm = new StructureMembers(smo);\n    ArrayStructureBB abb = new ArrayStructureBB(sm, as.getShape());\n    ArrayStructureBB.setOffsets(sm);  // this makes the packing canonical\n    if (bo != null) {\n      ByteBuffer bb = abb.getByteBuffer();\n      bb.order(bo);\n    }\n\n    try (StructureDataIterator iter = as.getStructureDataIterator()) {\n      while (iter.hasNext())\n        copyToArrayBB(iter.next(), abb);\n    }\n    return abb;\n  }", "language": "java", "code": "static public ArrayStructureBB copyToArrayBB(ArrayStructure as, ByteOrder bo, boolean canonical) throws IOException {\n    if (!canonical && as.getClass().equals(ArrayStructureBB.class)) { // no subclasses, LOOK detect already canonical later\n      ArrayStructureBB abb = (ArrayStructureBB) as;\n      ByteBuffer bb = abb.getByteBuffer();\n      if (bo == null || bo.equals(bb.order()))\n        return abb;\n    }\n\n    StructureMembers smo = as.getStructureMembers();\n    StructureMembers sm = new StructureMembers(smo);\n    ArrayStructureBB abb = new ArrayStructureBB(sm, as.getShape());\n    ArrayStructureBB.setOffsets(sm);  // this makes the packing canonical\n    if (bo != null) {\n      ByteBuffer bb = abb.getByteBuffer();\n      bb.order(bo);\n    }\n\n    try (StructureDataIterator iter = as.getStructureDataIterator()) {\n      while (iter.hasNext())\n        copyToArrayBB(iter.next(), abb);\n    }\n    return abb;\n  }", "code_tokens": ["static", "public", "ArrayStructureBB", "copyToArrayBB", "(", "ArrayStructure", "as", ",", "ByteOrder", "bo", ",", "boolean", "canonical", ")", "throws", "IOException", "{", "if", "(", "!", "canonical", "&&", "as", ".", "getClass", "(", ")", ".", "equals", "(", "ArrayStructureBB", ".", "class", ")", ")", "{", "// no subclasses, LOOK detect already canonical later", "ArrayStructureBB", "abb", "=", "(", "ArrayStructureBB", ")", "as", ";", "ByteBuffer", "bb", "=", "abb", ".", "getByteBuffer", "(", ")", ";", "if", "(", "bo", "==", "null", "||", "bo", ".", "equals", "(", "bb", ".", "order", "(", ")", ")", ")", "return", "abb", ";", "}", "StructureMembers", "smo", "=", "as", ".", "getStructureMembers", "(", ")", ";", "StructureMembers", "sm", "=", "new", "StructureMembers", "(", "smo", ")", ";", "ArrayStructureBB", "abb", "=", "new", "ArrayStructureBB", "(", "sm", ",", "as", ".", "getShape", "(", ")", ")", ";", "ArrayStructureBB", ".", "setOffsets", "(", "sm", ")", ";", "// this makes the packing canonical", "if", "(", "bo", "!=", "null", ")", "{", "ByteBuffer", "bb", "=", "abb", ".", "getByteBuffer", "(", ")", ";", "bb", ".", "order", "(", "bo", ")", ";", "}", "try", "(", "StructureDataIterator", "iter", "=", "as", ".", "getStructureDataIterator", "(", ")", ")", "{", "while", "(", "iter", ".", "hasNext", "(", ")", ")", "copyToArrayBB", "(", "iter", ".", "next", "(", ")", ",", "abb", ")", ";", "}", "return", "abb", ";", "}"], "docstring": "Make deep copy from an ArrayStructure to a ArrayStructureBB whose data is contained in a ByteBuffer\n@param as    original ArrayStructure\n@param bo    what byte order to use ? (null for any)\n@param canonical  packing must be canonical\n@return ArrayStructureBB with all data self contained", "docstring_tokens": ["Make", "deep", "copy", "from", "an", "ArrayStructure", "to", "a", "ArrayStructureBB", "whose", "data", "is", "contained", "in", "a", "ByteBuffer"], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/cdm/src/main/java/ucar/ma2/StructureDataDeep.java#L41-L63", "partition": "test"}
{"repo": "objectify/objectify", "path": "src/main/java/com/googlecode/objectify/impl/Path.java", "func_name": "Path.depth", "original_string": "public int depth() {\n\t\tint depth = 0;\n\t\t\n\t\tPath here = this;\n\t\twhile (here != ROOT) {\n\t\t\tdepth++;\n\t\t\there = here.previous;\n\t\t}\n\t\t\n\t\treturn depth;\n\t}", "language": "java", "code": "public int depth() {\n\t\tint depth = 0;\n\t\t\n\t\tPath here = this;\n\t\twhile (here != ROOT) {\n\t\t\tdepth++;\n\t\t\there = here.previous;\n\t\t}\n\t\t\n\t\treturn depth;\n\t}", "code_tokens": ["public", "int", "depth", "(", ")", "{", "int", "depth", "=", "0", ";", "Path", "here", "=", "this", ";", "while", "(", "here", "!=", "ROOT", ")", "{", "depth", "++", ";", "here", "=", "here", ".", "previous", ";", "}", "return", "depth", ";", "}"], "docstring": "ROOT is 0, top level Entity properties are 1, embedded things are higher.", "docstring_tokens": ["ROOT", "is", "0", "top", "level", "Entity", "properties", "are", "1", "embedded", "things", "are", "higher", "."], "sha": "4bf325d2e49b400326416977c7d9bbdf5380175b", "url": "https://github.com/objectify/objectify/blob/4bf325d2e49b400326416977c7d9bbdf5380175b/src/main/java/com/googlecode/objectify/impl/Path.java#L118-L128", "partition": "test"}
{"repo": "Unidata/thredds", "path": "cdm/src/main/java/ucar/nc2/iosp/dmsp/DMSPHeader.java", "func_name": "DMSPHeader.handleSensorInformation", "original_string": "private void handleSensorInformation()\n  {\n    numSamplesPerBand = Integer.parseInt( headerInfo.get( HeaderInfoTitle.SAMPLES_PER_BAND.toString()) );\n    numSamplesPerBandDim = new Dimension(\n            this.numSamplesPerBandDimName,\n            numSamplesPerBand);\n\n    // Read nominal resolution information\n    nominalResolutionAtt = new Attribute( nominalResolutionAttName, headerInfo.get(HeaderInfoTitle.NOMINAL_RESOLUTION.toString()));\n\n    // Read bands per scanlin information.\n    bandsPerScanlineAtt = new Attribute( bandsPerScanlineAttName, Integer.valueOf(headerInfo.get(HeaderInfoTitle.BANDS_PER_SCANLINE.toString())));\n\n    // Read bytes per smaple information\n    bytesPerSampleAtt = new Attribute( bytesPerSampleAttName, Integer.valueOf(headerInfo.get(HeaderInfoTitle.BYTES_PER_SAMPLE.toString())));\n\n    // Read byte offset for band 1 information.\n    byteOffsetBand1Att = new Attribute( byteOffsetBand1AttName, Integer.valueOf(headerInfo.get(HeaderInfoTitle.BYTE_OFFSET_BAND_1.toString())));\n\n    // Read byte offset for band 2 information.\n    byteOffsetBand2Att = new Attribute( byteOffsetBand2AttName, Integer.valueOf(headerInfo.get(HeaderInfoTitle.BYTE_OFFSET_BAND_2.toString())));\n\n    // Band 1 description\n    band1Att = new Attribute( band1AttName, headerInfo.get( HeaderInfoTitle.BAND_1.toString()));\n\n    // Band 2 description\n    band2Att = new Attribute( band2AttName, headerInfo.get( HeaderInfoTitle.BAND_2.toString()));\n\n    // Band organization\n    bandOrganizationAtt = new Attribute( bandOrganizationAttName, headerInfo.get(HeaderInfoTitle.ORGANIZATION.toString()));\n\n    // thermal offset\n    thermalOffsetAtt = new Attribute( thermalOffsetAttName, headerInfo.get(HeaderInfoTitle.THERMAL_OFFSET.toString()));\n\n    // thermal scale\n    thermalScaleAtt = new Attribute( thermalScaleAttName, headerInfo.get(HeaderInfoTitle.THERMAL_SCALE.toString()));\n\n    // percent daylight\n    percentDaylightAtt = new Attribute( percentDaylightAttName, Double.valueOf(headerInfo.get(HeaderInfoTitle.PERCENT_DAYLIGHT.toString())));\n\n    // percent full moon\n    percentFullMoonAtt = new Attribute( percentFullMoonAttName, Double.valueOf(headerInfo.get(HeaderInfoTitle.PERCENT_FULL_MOON.toString())));\n\n    // percent terminator evident\n    percentTerminatorEvidentAtt = new Attribute( percentTerminatorEvidentAttName, Double.valueOf(headerInfo.get(HeaderInfoTitle.PERCENT_TERMINATOR_EVIDENT.toString())));\n  }", "language": "java", "code": "private void handleSensorInformation()\n  {\n    numSamplesPerBand = Integer.parseInt( headerInfo.get( HeaderInfoTitle.SAMPLES_PER_BAND.toString()) );\n    numSamplesPerBandDim = new Dimension(\n            this.numSamplesPerBandDimName,\n            numSamplesPerBand);\n\n    // Read nominal resolution information\n    nominalResolutionAtt = new Attribute( nominalResolutionAttName, headerInfo.get(HeaderInfoTitle.NOMINAL_RESOLUTION.toString()));\n\n    // Read bands per scanlin information.\n    bandsPerScanlineAtt = new Attribute( bandsPerScanlineAttName, Integer.valueOf(headerInfo.get(HeaderInfoTitle.BANDS_PER_SCANLINE.toString())));\n\n    // Read bytes per smaple information\n    bytesPerSampleAtt = new Attribute( bytesPerSampleAttName, Integer.valueOf(headerInfo.get(HeaderInfoTitle.BYTES_PER_SAMPLE.toString())));\n\n    // Read byte offset for band 1 information.\n    byteOffsetBand1Att = new Attribute( byteOffsetBand1AttName, Integer.valueOf(headerInfo.get(HeaderInfoTitle.BYTE_OFFSET_BAND_1.toString())));\n\n    // Read byte offset for band 2 information.\n    byteOffsetBand2Att = new Attribute( byteOffsetBand2AttName, Integer.valueOf(headerInfo.get(HeaderInfoTitle.BYTE_OFFSET_BAND_2.toString())));\n\n    // Band 1 description\n    band1Att = new Attribute( band1AttName, headerInfo.get( HeaderInfoTitle.BAND_1.toString()));\n\n    // Band 2 description\n    band2Att = new Attribute( band2AttName, headerInfo.get( HeaderInfoTitle.BAND_2.toString()));\n\n    // Band organization\n    bandOrganizationAtt = new Attribute( bandOrganizationAttName, headerInfo.get(HeaderInfoTitle.ORGANIZATION.toString()));\n\n    // thermal offset\n    thermalOffsetAtt = new Attribute( thermalOffsetAttName, headerInfo.get(HeaderInfoTitle.THERMAL_OFFSET.toString()));\n\n    // thermal scale\n    thermalScaleAtt = new Attribute( thermalScaleAttName, headerInfo.get(HeaderInfoTitle.THERMAL_SCALE.toString()));\n\n    // percent daylight\n    percentDaylightAtt = new Attribute( percentDaylightAttName, Double.valueOf(headerInfo.get(HeaderInfoTitle.PERCENT_DAYLIGHT.toString())));\n\n    // percent full moon\n    percentFullMoonAtt = new Attribute( percentFullMoonAttName, Double.valueOf(headerInfo.get(HeaderInfoTitle.PERCENT_FULL_MOON.toString())));\n\n    // percent terminator evident\n    percentTerminatorEvidentAtt = new Attribute( percentTerminatorEvidentAttName, Double.valueOf(headerInfo.get(HeaderInfoTitle.PERCENT_TERMINATOR_EVIDENT.toString())));\n  }", "code_tokens": ["private", "void", "handleSensorInformation", "(", ")", "{", "numSamplesPerBand", "=", "Integer", ".", "parseInt", "(", "headerInfo", ".", "get", "(", "HeaderInfoTitle", ".", "SAMPLES_PER_BAND", ".", "toString", "(", ")", ")", ")", ";", "numSamplesPerBandDim", "=", "new", "Dimension", "(", "this", ".", "numSamplesPerBandDimName", ",", "numSamplesPerBand", ")", ";", "// Read nominal resolution information", "nominalResolutionAtt", "=", "new", "Attribute", "(", "nominalResolutionAttName", ",", "headerInfo", ".", "get", "(", "HeaderInfoTitle", ".", "NOMINAL_RESOLUTION", ".", "toString", "(", ")", ")", ")", ";", "// Read bands per scanlin information.", "bandsPerScanlineAtt", "=", "new", "Attribute", "(", "bandsPerScanlineAttName", ",", "Integer", ".", "valueOf", "(", "headerInfo", ".", "get", "(", "HeaderInfoTitle", ".", "BANDS_PER_SCANLINE", ".", "toString", "(", ")", ")", ")", ")", ";", "// Read bytes per smaple information", "bytesPerSampleAtt", "=", "new", "Attribute", "(", "bytesPerSampleAttName", ",", "Integer", ".", "valueOf", "(", "headerInfo", ".", "get", "(", "HeaderInfoTitle", ".", "BYTES_PER_SAMPLE", ".", "toString", "(", ")", ")", ")", ")", ";", "// Read byte offset for band 1 information.", "byteOffsetBand1Att", "=", "new", "Attribute", "(", "byteOffsetBand1AttName", ",", "Integer", ".", "valueOf", "(", "headerInfo", ".", "get", "(", "HeaderInfoTitle", ".", "BYTE_OFFSET_BAND_1", ".", "toString", "(", ")", ")", ")", ")", ";", "// Read byte offset for band 2 information.", "byteOffsetBand2Att", "=", "new", "Attribute", "(", "byteOffsetBand2AttName", ",", "Integer", ".", "valueOf", "(", "headerInfo", ".", "get", "(", "HeaderInfoTitle", ".", "BYTE_OFFSET_BAND_2", ".", "toString", "(", ")", ")", ")", ")", ";", "// Band 1 description", "band1Att", "=", "new", "Attribute", "(", "band1AttName", ",", "headerInfo", ".", "get", "(", "HeaderInfoTitle", ".", "BAND_1", ".", "toString", "(", ")", ")", ")", ";", "// Band 2 description", "band2Att", "=", "new", "Attribute", "(", "band2AttName", ",", "headerInfo", ".", "get", "(", "HeaderInfoTitle", ".", "BAND_2", ".", "toString", "(", ")", ")", ")", ";", "// Band organization", "bandOrganizationAtt", "=", "new", "Attribute", "(", "bandOrganizationAttName", ",", "headerInfo", ".", "get", "(", "HeaderInfoTitle", ".", "ORGANIZATION", ".", "toString", "(", ")", ")", ")", ";", "// thermal offset", "thermalOffsetAtt", "=", "new", "Attribute", "(", "thermalOffsetAttName", ",", "headerInfo", ".", "get", "(", "HeaderInfoTitle", ".", "THERMAL_OFFSET", ".", "toString", "(", ")", ")", ")", ";", "// thermal scale", "thermalScaleAtt", "=", "new", "Attribute", "(", "thermalScaleAttName", ",", "headerInfo", ".", "get", "(", "HeaderInfoTitle", ".", "THERMAL_SCALE", ".", "toString", "(", ")", ")", ")", ";", "// percent daylight", "percentDaylightAtt", "=", "new", "Attribute", "(", "percentDaylightAttName", ",", "Double", ".", "valueOf", "(", "headerInfo", ".", "get", "(", "HeaderInfoTitle", ".", "PERCENT_DAYLIGHT", ".", "toString", "(", ")", ")", ")", ")", ";", "// percent full moon", "percentFullMoonAtt", "=", "new", "Attribute", "(", "percentFullMoonAttName", ",", "Double", ".", "valueOf", "(", "headerInfo", ".", "get", "(", "HeaderInfoTitle", ".", "PERCENT_FULL_MOON", ".", "toString", "(", ")", ")", ")", ")", ";", "// percent terminator evident", "percentTerminatorEvidentAtt", "=", "new", "Attribute", "(", "percentTerminatorEvidentAttName", ",", "Double", ".", "valueOf", "(", "headerInfo", ".", "get", "(", "HeaderInfoTitle", ".", "PERCENT_TERMINATOR_EVIDENT", ".", "toString", "(", ")", ")", ")", ")", ";", "}"], "docstring": "Parse the sensor information from the header.", "docstring_tokens": ["Parse", "the", "sensor", "information", "from", "the", "header", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/cdm/src/main/java/ucar/nc2/iosp/dmsp/DMSPHeader.java#L527-L572", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-json/src/main/java/jodd/json/MapToBean.java", "func_name": "MapToBean.map2bean", "original_string": "public Object map2bean(final Map map, Class targetType) {\n\t\tObject target = null;\n\n\t\t// create targets type\n\t\tString className = (String) map.get(classMetadataName);\n\n\t\tif (className == null) {\n\t\t\tif (targetType == null) {\n\t\t\t\t// nothing to do, no information about target type found\n\t\t\t\ttarget = map;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tcheckClassName(jsonParser.classnameWhitelist, className);\n\n\t\t\ttry {\n\t\t\t\ttargetType = ClassLoaderUtil.loadClass(className);\n\t\t\t} catch (ClassNotFoundException cnfex) {\n\t\t\t\tthrow new JsonException(cnfex);\n\t\t\t}\n\t\t}\n\n\t\tif (target == null) {\n\t\t\ttarget = jsonParser.newObjectInstance(targetType);\n\t\t}\n\n\t\tClassDescriptor cd = ClassIntrospector.get().lookup(target.getClass());\n\n\t\tboolean targetIsMap = target instanceof Map;\n\n\t\tfor (Object key : map.keySet()) {\n\t\t\tString keyName = key.toString();\n\n\t\t\tif (classMetadataName != null) {\n\t\t\t\tif (keyName.equals(classMetadataName)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tPropertyDescriptor pd = cd.getPropertyDescriptor(keyName, declared);\n\n\t\t\tif (!targetIsMap && pd == null) {\n\t\t\t\t// target property does not exist, continue\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// value is one of JSON basic types, like Number, Map, List...\n\t\t\tObject value = map.get(key);\n\n\t\t\tClass propertyType = pd == null ? null : pd.getType();\n\t\t\tClass componentType = pd == null ? null : pd.resolveComponentType(true);\n\n\t\t\tif (value != null) {\n\t\t\t\tif (value instanceof List) {\n\t\t\t\t\tif (componentType != null && componentType != String.class) {\n\t\t\t\t\t\tvalue = generifyList((List) value, componentType);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (value instanceof Map) {\n\t\t\t\t\t// if the value we want to inject is a Map...\n\t\t\t\t\tif (!ClassUtil.isTypeOf(propertyType, Map.class)) {\n\t\t\t\t\t\t// ... and if target is NOT a map\n\t\t\t\t\t\tvalue = map2bean((Map) value, propertyType);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// target is also a Map, but we might need to generify it\n\t\t\t\t\t\tClass keyType = pd == null ? null : pd.resolveKeyType(true);\n\n\t\t\t\t\t\tif (keyType != String.class || componentType != String.class) {\n\t\t\t\t\t\t\t// generify\n\t\t\t\t\t\t\tvalue = generifyMap((Map) value, keyType, componentType);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (targetIsMap) {\n\t\t\t\t((Map)target).put(keyName, value);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttry {\n\t\t\t\t\tsetValue(target, pd, value);\n\t\t\t\t} catch (Exception ignore) {\n\t\t\t\t\tignore.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn target;\n\t}", "language": "java", "code": "public Object map2bean(final Map map, Class targetType) {\n\t\tObject target = null;\n\n\t\t// create targets type\n\t\tString className = (String) map.get(classMetadataName);\n\n\t\tif (className == null) {\n\t\t\tif (targetType == null) {\n\t\t\t\t// nothing to do, no information about target type found\n\t\t\t\ttarget = map;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tcheckClassName(jsonParser.classnameWhitelist, className);\n\n\t\t\ttry {\n\t\t\t\ttargetType = ClassLoaderUtil.loadClass(className);\n\t\t\t} catch (ClassNotFoundException cnfex) {\n\t\t\t\tthrow new JsonException(cnfex);\n\t\t\t}\n\t\t}\n\n\t\tif (target == null) {\n\t\t\ttarget = jsonParser.newObjectInstance(targetType);\n\t\t}\n\n\t\tClassDescriptor cd = ClassIntrospector.get().lookup(target.getClass());\n\n\t\tboolean targetIsMap = target instanceof Map;\n\n\t\tfor (Object key : map.keySet()) {\n\t\t\tString keyName = key.toString();\n\n\t\t\tif (classMetadataName != null) {\n\t\t\t\tif (keyName.equals(classMetadataName)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tPropertyDescriptor pd = cd.getPropertyDescriptor(keyName, declared);\n\n\t\t\tif (!targetIsMap && pd == null) {\n\t\t\t\t// target property does not exist, continue\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// value is one of JSON basic types, like Number, Map, List...\n\t\t\tObject value = map.get(key);\n\n\t\t\tClass propertyType = pd == null ? null : pd.getType();\n\t\t\tClass componentType = pd == null ? null : pd.resolveComponentType(true);\n\n\t\t\tif (value != null) {\n\t\t\t\tif (value instanceof List) {\n\t\t\t\t\tif (componentType != null && componentType != String.class) {\n\t\t\t\t\t\tvalue = generifyList((List) value, componentType);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (value instanceof Map) {\n\t\t\t\t\t// if the value we want to inject is a Map...\n\t\t\t\t\tif (!ClassUtil.isTypeOf(propertyType, Map.class)) {\n\t\t\t\t\t\t// ... and if target is NOT a map\n\t\t\t\t\t\tvalue = map2bean((Map) value, propertyType);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// target is also a Map, but we might need to generify it\n\t\t\t\t\t\tClass keyType = pd == null ? null : pd.resolveKeyType(true);\n\n\t\t\t\t\t\tif (keyType != String.class || componentType != String.class) {\n\t\t\t\t\t\t\t// generify\n\t\t\t\t\t\t\tvalue = generifyMap((Map) value, keyType, componentType);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (targetIsMap) {\n\t\t\t\t((Map)target).put(keyName, value);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttry {\n\t\t\t\t\tsetValue(target, pd, value);\n\t\t\t\t} catch (Exception ignore) {\n\t\t\t\t\tignore.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn target;\n\t}", "code_tokens": ["public", "Object", "map2bean", "(", "final", "Map", "map", ",", "Class", "targetType", ")", "{", "Object", "target", "=", "null", ";", "// create targets type", "String", "className", "=", "(", "String", ")", "map", ".", "get", "(", "classMetadataName", ")", ";", "if", "(", "className", "==", "null", ")", "{", "if", "(", "targetType", "==", "null", ")", "{", "// nothing to do, no information about target type found", "target", "=", "map", ";", "}", "}", "else", "{", "checkClassName", "(", "jsonParser", ".", "classnameWhitelist", ",", "className", ")", ";", "try", "{", "targetType", "=", "ClassLoaderUtil", ".", "loadClass", "(", "className", ")", ";", "}", "catch", "(", "ClassNotFoundException", "cnfex", ")", "{", "throw", "new", "JsonException", "(", "cnfex", ")", ";", "}", "}", "if", "(", "target", "==", "null", ")", "{", "target", "=", "jsonParser", ".", "newObjectInstance", "(", "targetType", ")", ";", "}", "ClassDescriptor", "cd", "=", "ClassIntrospector", ".", "get", "(", ")", ".", "lookup", "(", "target", ".", "getClass", "(", ")", ")", ";", "boolean", "targetIsMap", "=", "target", "instanceof", "Map", ";", "for", "(", "Object", "key", ":", "map", ".", "keySet", "(", ")", ")", "{", "String", "keyName", "=", "key", ".", "toString", "(", ")", ";", "if", "(", "classMetadataName", "!=", "null", ")", "{", "if", "(", "keyName", ".", "equals", "(", "classMetadataName", ")", ")", "{", "continue", ";", "}", "}", "PropertyDescriptor", "pd", "=", "cd", ".", "getPropertyDescriptor", "(", "keyName", ",", "declared", ")", ";", "if", "(", "!", "targetIsMap", "&&", "pd", "==", "null", ")", "{", "// target property does not exist, continue", "continue", ";", "}", "// value is one of JSON basic types, like Number, Map, List...", "Object", "value", "=", "map", ".", "get", "(", "key", ")", ";", "Class", "propertyType", "=", "pd", "==", "null", "?", "null", ":", "pd", ".", "getType", "(", ")", ";", "Class", "componentType", "=", "pd", "==", "null", "?", "null", ":", "pd", ".", "resolveComponentType", "(", "true", ")", ";", "if", "(", "value", "!=", "null", ")", "{", "if", "(", "value", "instanceof", "List", ")", "{", "if", "(", "componentType", "!=", "null", "&&", "componentType", "!=", "String", ".", "class", ")", "{", "value", "=", "generifyList", "(", "(", "List", ")", "value", ",", "componentType", ")", ";", "}", "}", "else", "if", "(", "value", "instanceof", "Map", ")", "{", "// if the value we want to inject is a Map...", "if", "(", "!", "ClassUtil", ".", "isTypeOf", "(", "propertyType", ",", "Map", ".", "class", ")", ")", "{", "// ... and if target is NOT a map", "value", "=", "map2bean", "(", "(", "Map", ")", "value", ",", "propertyType", ")", ";", "}", "else", "{", "// target is also a Map, but we might need to generify it", "Class", "keyType", "=", "pd", "==", "null", "?", "null", ":", "pd", ".", "resolveKeyType", "(", "true", ")", ";", "if", "(", "keyType", "!=", "String", ".", "class", "||", "componentType", "!=", "String", ".", "class", ")", "{", "// generify", "value", "=", "generifyMap", "(", "(", "Map", ")", "value", ",", "keyType", ",", "componentType", ")", ";", "}", "}", "}", "}", "if", "(", "targetIsMap", ")", "{", "(", "(", "Map", ")", "target", ")", ".", "put", "(", "keyName", ",", "value", ")", ";", "}", "else", "{", "try", "{", "setValue", "(", "target", ",", "pd", ",", "value", ")", ";", "}", "catch", "(", "Exception", "ignore", ")", "{", "ignore", ".", "printStackTrace", "(", ")", ";", "}", "}", "}", "return", "target", ";", "}"], "docstring": "Converts map to target type.", "docstring_tokens": ["Converts", "map", "to", "target", "type", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-json/src/main/java/jodd/json/MapToBean.java#L60-L149", "partition": "test"}
{"repo": "objectify/objectify", "path": "src/main/java/com/googlecode/objectify/impl/PropertyPopulator.java", "func_name": "PropertyPopulator.setValue", "original_string": "public void setValue(final Object pojo, final Value<D> value, final LoadContext ctx, final Path containerPath) throws SkipException {\n\t\tfinal Path propertyPath = containerPath.extend(property.getName());\n\t\tfinal P loaded = translator.load(value, ctx, propertyPath);\n\n\t\tsetOnPojo(pojo, loaded, ctx, propertyPath);\n\t}", "language": "java", "code": "public void setValue(final Object pojo, final Value<D> value, final LoadContext ctx, final Path containerPath) throws SkipException {\n\t\tfinal Path propertyPath = containerPath.extend(property.getName());\n\t\tfinal P loaded = translator.load(value, ctx, propertyPath);\n\n\t\tsetOnPojo(pojo, loaded, ctx, propertyPath);\n\t}", "code_tokens": ["public", "void", "setValue", "(", "final", "Object", "pojo", ",", "final", "Value", "<", "D", ">", "value", ",", "final", "LoadContext", "ctx", ",", "final", "Path", "containerPath", ")", "throws", "SkipException", "{", "final", "Path", "propertyPath", "=", "containerPath", ".", "extend", "(", "property", ".", "getName", "(", ")", ")", ";", "final", "P", "loaded", "=", "translator", ".", "load", "(", "value", ",", "ctx", ",", "propertyPath", ")", ";", "setOnPojo", "(", "pojo", ",", "loaded", ",", "ctx", ",", "propertyPath", ")", ";", "}"], "docstring": "Set this raw datastore value on the relevant property of the pojo, doing whatever translations are necessary.", "docstring_tokens": ["Set", "this", "raw", "datastore", "value", "on", "the", "relevant", "property", "of", "the", "pojo", "doing", "whatever", "translations", "are", "necessary", "."], "sha": "4bf325d2e49b400326416977c7d9bbdf5380175b", "url": "https://github.com/objectify/objectify/blob/4bf325d2e49b400326416977c7d9bbdf5380175b/src/main/java/com/googlecode/objectify/impl/PropertyPopulator.java#L93-L98", "partition": "test"}
{"repo": "Unidata/thredds", "path": "opendap/src/main/java/opendap/servers/FunctionLibrary.java", "func_name": "FunctionLibrary.add", "original_string": "public void add(ServerSideFunction function) {\n        if (function instanceof BoolFunction) {\n            boolFunctions.put(function.getName(), function);\n        }\n        if (function instanceof BTFunction) {\n            btFunctions.put(function.getName(), function);\n        }\n    }", "language": "java", "code": "public void add(ServerSideFunction function) {\n        if (function instanceof BoolFunction) {\n            boolFunctions.put(function.getName(), function);\n        }\n        if (function instanceof BTFunction) {\n            btFunctions.put(function.getName(), function);\n        }\n    }", "code_tokens": ["public", "void", "add", "(", "ServerSideFunction", "function", ")", "{", "if", "(", "function", "instanceof", "BoolFunction", ")", "{", "boolFunctions", ".", "put", "(", "function", ".", "getName", "(", ")", ",", "function", ")", ";", "}", "if", "(", "function", "instanceof", "BTFunction", ")", "{", "btFunctions", ".", "put", "(", "function", ".", "getName", "(", ")", ",", "function", ")", ";", "}", "}"], "docstring": "Adds a function to the library. The function will be inspected\nto determine whether it is a boolean or BaseType function.", "docstring_tokens": ["Adds", "a", "function", "to", "the", "library", ".", "The", "function", "will", "be", "inspected", "to", "determine", "whether", "it", "is", "a", "boolean", "or", "BaseType", "function", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/opendap/src/main/java/opendap/servers/FunctionLibrary.java#L132-L139", "partition": "test"}
{"repo": "eclipse/packagedrone", "path": "bundles/org.apache.jasper.glassfish/src/org/apache/jasper/compiler/ParserController.java", "func_name": "ParserController.parse", "original_string": "public Node.Nodes parse(String inFileName)\n\t        throws FileNotFoundException, JasperException, IOException {\n\t// If we're parsing a packaged tag file or a resource included by it\n\t// (using an include directive), ctxt.getTagFileJar() returns the \n\t// JAR file from which to read the tag file or included resource,\n\t// respectively.\n        isTagFile = ctxt.isTagFile();\n        directiveOnly = false;\n        return doParse(inFileName, null, ctxt.getTagFileJarUrl());\n    }", "language": "java", "code": "public Node.Nodes parse(String inFileName)\n\t        throws FileNotFoundException, JasperException, IOException {\n\t// If we're parsing a packaged tag file or a resource included by it\n\t// (using an include directive), ctxt.getTagFileJar() returns the \n\t// JAR file from which to read the tag file or included resource,\n\t// respectively.\n        isTagFile = ctxt.isTagFile();\n        directiveOnly = false;\n        return doParse(inFileName, null, ctxt.getTagFileJarUrl());\n    }", "code_tokens": ["public", "Node", ".", "Nodes", "parse", "(", "String", "inFileName", ")", "throws", "FileNotFoundException", ",", "JasperException", ",", "IOException", "{", "// If we're parsing a packaged tag file or a resource included by it", "// (using an include directive), ctxt.getTagFileJar() returns the ", "// JAR file from which to read the tag file or included resource,", "// respectively.", "isTagFile", "=", "ctxt", ".", "isTagFile", "(", ")", ";", "directiveOnly", "=", "false", ";", "return", "doParse", "(", "inFileName", ",", "null", ",", "ctxt", ".", "getTagFileJarUrl", "(", ")", ")", ";", "}"], "docstring": "Parses a JSP page or tag file. This is invoked by the compiler.\n\n@param inFileName The path to the JSP page or tag file to be parsed.", "docstring_tokens": ["Parses", "a", "JSP", "page", "or", "tag", "file", ".", "This", "is", "invoked", "by", "the", "compiler", "."], "sha": "3869c1643cdc6f7cb8b26097a7b6994683b13d7e", "url": "https://github.com/eclipse/packagedrone/blob/3869c1643cdc6f7cb8b26097a7b6994683b13d7e/bundles/org.apache.jasper.glassfish/src/org/apache/jasper/compiler/ParserController.java#L137-L146", "partition": "test"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPngImage.java", "func_name": "CoverageDataPngImage.readPixels", "original_string": "private void readPixels() {\n        if (reader != null) {\n            pixels = new int[reader.imgInfo.rows][reader.imgInfo.cols];\n            int rowCount = 0;\n            while (reader.hasMoreRows()) {\n                ImageLineInt row = reader.readRowInt();\n                int[] columnValues = new int[reader.imgInfo.cols];\n                System.arraycopy(row.getScanline(), 0, columnValues, 0, columnValues.length);\n                pixels[rowCount++] = columnValues;\n            }\n            reader.close();\n        }\n    }", "language": "java", "code": "private void readPixels() {\n        if (reader != null) {\n            pixels = new int[reader.imgInfo.rows][reader.imgInfo.cols];\n            int rowCount = 0;\n            while (reader.hasMoreRows()) {\n                ImageLineInt row = reader.readRowInt();\n                int[] columnValues = new int[reader.imgInfo.cols];\n                System.arraycopy(row.getScanline(), 0, columnValues, 0, columnValues.length);\n                pixels[rowCount++] = columnValues;\n            }\n            reader.close();\n        }\n    }", "code_tokens": ["private", "void", "readPixels", "(", ")", "{", "if", "(", "reader", "!=", "null", ")", "{", "pixels", "=", "new", "int", "[", "reader", ".", "imgInfo", ".", "rows", "]", "[", "reader", ".", "imgInfo", ".", "cols", "]", ";", "int", "rowCount", "=", "0", ";", "while", "(", "reader", ".", "hasMoreRows", "(", ")", ")", "{", "ImageLineInt", "row", "=", "reader", ".", "readRowInt", "(", ")", ";", "int", "[", "]", "columnValues", "=", "new", "int", "[", "reader", ".", "imgInfo", ".", "cols", "]", ";", "System", ".", "arraycopy", "(", "row", ".", "getScanline", "(", ")", ",", "0", ",", "columnValues", ",", "0", ",", "columnValues", ".", "length", ")", ";", "pixels", "[", "rowCount", "++", "]", "=", "columnValues", ";", "}", "reader", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Read all the pixels from the image", "docstring_tokens": ["Read", "all", "the", "pixels", "from", "the", "image"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPngImage.java#L172-L184", "partition": "test"}
{"repo": "abmargb/jamppa", "path": "src/main/java/org/jivesoftware/whack/ExternalComponent.java", "func_name": "ExternalComponent.connectionLost", "original_string": "public void connectionLost() {\n        // Ensure that only one thread will try to reconnect.\n        synchronized (this) {\n            if (reconnecting) {\n                return;\n            }\n            reconnecting = true;\n        }\n        readerThread = null;\n        boolean isConnected = false;\n        if (!shutdown) {\n            // Notify the component that connection was lost so it needs to\n            // shutdown. The component is\n            // still registered in the local component manager but just not\n            // connected to the server\n            component.shutdown();\n        }\n        while (!isConnected && !shutdown) {\n            try {\n                connect(host, port, subdomain);\n                isConnected = true;\n                // It may be possible that while a new connection was being\n                // established the\n                // component was required to shutdown so in this case we need to\n                // close the new\n                // connection\n                if (shutdown) {\n                    disconnect();\n                } else {\n                    // Component is back again working so start it up again\n                    start();\n                }\n            } catch (ComponentException e) {\n                manager.getLog().error(\n                        \"Error trying to reconnect with the server\", e);\n                // Wait for 5 seconds until the next retry\n                try {\n                    Thread.sleep(5000);\n                } catch (InterruptedException e1) {\n                    // Do nothing\n                }\n            }\n        }\n        reconnecting = false;\n    }", "language": "java", "code": "public void connectionLost() {\n        // Ensure that only one thread will try to reconnect.\n        synchronized (this) {\n            if (reconnecting) {\n                return;\n            }\n            reconnecting = true;\n        }\n        readerThread = null;\n        boolean isConnected = false;\n        if (!shutdown) {\n            // Notify the component that connection was lost so it needs to\n            // shutdown. The component is\n            // still registered in the local component manager but just not\n            // connected to the server\n            component.shutdown();\n        }\n        while (!isConnected && !shutdown) {\n            try {\n                connect(host, port, subdomain);\n                isConnected = true;\n                // It may be possible that while a new connection was being\n                // established the\n                // component was required to shutdown so in this case we need to\n                // close the new\n                // connection\n                if (shutdown) {\n                    disconnect();\n                } else {\n                    // Component is back again working so start it up again\n                    start();\n                }\n            } catch (ComponentException e) {\n                manager.getLog().error(\n                        \"Error trying to reconnect with the server\", e);\n                // Wait for 5 seconds until the next retry\n                try {\n                    Thread.sleep(5000);\n                } catch (InterruptedException e1) {\n                    // Do nothing\n                }\n            }\n        }\n        reconnecting = false;\n    }", "code_tokens": ["public", "void", "connectionLost", "(", ")", "{", "// Ensure that only one thread will try to reconnect.", "synchronized", "(", "this", ")", "{", "if", "(", "reconnecting", ")", "{", "return", ";", "}", "reconnecting", "=", "true", ";", "}", "readerThread", "=", "null", ";", "boolean", "isConnected", "=", "false", ";", "if", "(", "!", "shutdown", ")", "{", "// Notify the component that connection was lost so it needs to", "// shutdown. The component is", "// still registered in the local component manager but just not", "// connected to the server", "component", ".", "shutdown", "(", ")", ";", "}", "while", "(", "!", "isConnected", "&&", "!", "shutdown", ")", "{", "try", "{", "connect", "(", "host", ",", "port", ",", "subdomain", ")", ";", "isConnected", "=", "true", ";", "// It may be possible that while a new connection was being", "// established the", "// component was required to shutdown so in this case we need to", "// close the new", "// connection", "if", "(", "shutdown", ")", "{", "disconnect", "(", ")", ";", "}", "else", "{", "// Component is back again working so start it up again", "start", "(", ")", ";", "}", "}", "catch", "(", "ComponentException", "e", ")", "{", "manager", ".", "getLog", "(", ")", ".", "error", "(", "\"Error trying to reconnect with the server\"", ",", "e", ")", ";", "// Wait for 5 seconds until the next retry", "try", "{", "Thread", ".", "sleep", "(", "5000", ")", ";", "}", "catch", "(", "InterruptedException", "e1", ")", "{", "// Do nothing", "}", "}", "}", "reconnecting", "=", "false", ";", "}"], "docstring": "Notification message that the connection with the server was lost\nunexpectedly. We will try to reestablish the connection for ever until\nthe connection has been reestablished or this thread has been stopped.", "docstring_tokens": ["Notification", "message", "that", "the", "connection", "with", "the", "server", "was", "lost", "unexpectedly", ".", "We", "will", "try", "to", "reestablish", "the", "connection", "for", "ever", "until", "the", "connection", "has", "been", "reestablished", "or", "this", "thread", "has", "been", "stopped", "."], "sha": "76f253239923df40904c462e3b88e7278b36b282", "url": "https://github.com/abmargb/jamppa/blob/76f253239923df40904c462e3b88e7278b36b282/src/main/java/org/jivesoftware/whack/ExternalComponent.java#L429-L473", "partition": "test"}
{"repo": "nyla-solutions/gedi-geode", "path": "gedi-geode-extensions-core/src/main/java/gedi/solutions/geode/io/GemFireIO.java", "func_name": "GemFireIO.isErrorAndSendException", "original_string": "public static boolean isErrorAndSendException(ResultSender<Object> resultSender, Object data)\r\n\t{\r\n\t\tif(data instanceof Throwable)\r\n\t\t{\r\n\t\t\tThrowable e = (Throwable)data;\t\t\t\r\n\t\t\t\r\n\t\t\tresultSender.sendException(e);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}", "language": "java", "code": "public static boolean isErrorAndSendException(ResultSender<Object> resultSender, Object data)\r\n\t{\r\n\t\tif(data instanceof Throwable)\r\n\t\t{\r\n\t\t\tThrowable e = (Throwable)data;\t\t\t\r\n\t\t\t\r\n\t\t\tresultSender.sendException(e);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}", "code_tokens": ["public", "static", "boolean", "isErrorAndSendException", "(", "ResultSender", "<", "Object", ">", "resultSender", ",", "Object", "data", ")", "{", "if", "(", "data", "instanceof", "Throwable", ")", "{", "Throwable", "e", "=", "(", "Throwable", ")", "data", ";", "resultSender", ".", "sendException", "(", "e", ")", ";", "return", "true", ";", "}", "return", "false", ";", "}"], "docstring": "Determine if the data should be sent\n@param resultSender the result sender implementation\n@param data the data\n@return true if data is an exception", "docstring_tokens": ["Determine", "if", "the", "data", "should", "be", "sent"], "sha": "3dd71d6e66e941ce350b306b70677ee95a7d9eee", "url": "https://github.com/nyla-solutions/gedi-geode/blob/3dd71d6e66e941ce350b306b70677ee95a7d9eee/gedi-geode-extensions-core/src/main/java/gedi/solutions/geode/io/GemFireIO.java#L34-L45", "partition": "test"}
{"repo": "Unidata/thredds", "path": "ui/src/main/java/ucar/nc2/ui/gis/shapefile/Swap.java", "func_name": "Swap.swapLong", "original_string": "static public long swapLong(byte[] b, int offset) {\n    // 8 bytes\n    long accum = 0;\n    long shiftedval;\n    for (int shiftBy = 0, i = offset; shiftBy < 64; shiftBy += 8, i++) {\n      shiftedval = ((long) (b[i] & 0xff)) << shiftBy;\n      accum |= shiftedval;\n    }\n    return accum;\n  }", "language": "java", "code": "static public long swapLong(byte[] b, int offset) {\n    // 8 bytes\n    long accum = 0;\n    long shiftedval;\n    for (int shiftBy = 0, i = offset; shiftBy < 64; shiftBy += 8, i++) {\n      shiftedval = ((long) (b[i] & 0xff)) << shiftBy;\n      accum |= shiftedval;\n    }\n    return accum;\n  }", "code_tokens": ["static", "public", "long", "swapLong", "(", "byte", "[", "]", "b", ",", "int", "offset", ")", "{", "// 8 bytes", "long", "accum", "=", "0", ";", "long", "shiftedval", ";", "for", "(", "int", "shiftBy", "=", "0", ",", "i", "=", "offset", ";", "shiftBy", "<", "64", ";", "shiftBy", "+=", "8", ",", "i", "++", ")", "{", "shiftedval", "=", "(", "(", "long", ")", "(", "b", "[", "i", "]", "&", "0xff", ")", ")", "<<", "shiftBy", ";", "accum", "|=", "shiftedval", ";", "}", "return", "accum", ";", "}"], "docstring": "Returns the long resulting from reversing 8 bytes at a specified\noffset in a byte array.\n\n@param b      the byte array\n@param offset the offset of the first byte\n@return the long represented by the bytes\n<code>b[offset+7], b[offset+6], ..., b[offset]</code>", "docstring_tokens": ["Returns", "the", "long", "resulting", "from", "reversing", "8", "bytes", "at", "a", "specified", "offset", "in", "a", "byte", "array", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/ui/src/main/java/ucar/nc2/ui/gis/shapefile/Swap.java#L59-L68", "partition": "test"}
{"repo": "eclipse/packagedrone", "path": "bundles/org.apache.jasper.glassfish/src/org/apache/jasper/compiler/JspUtil.java", "func_name": "JspUtil.makeJavaIdentifier", "original_string": "public static final String makeJavaIdentifier(String identifier) {\n        StringBuilder modifiedIdentifier = \n            new StringBuilder(identifier.length());\n        if (!Character.isJavaIdentifierStart(identifier.charAt(0))) {\n            modifiedIdentifier.append('_');\n        }\n        for (int i = 0; i < identifier.length(); i++) {\n            char ch = identifier.charAt(i);\n            if (Character.isJavaIdentifierPart(ch) && ch != '_') {\n                modifiedIdentifier.append(ch);\n            } else if (ch == '.') {\n                modifiedIdentifier.append('_');\n            } else {\n                modifiedIdentifier.append(mangleChar(ch));\n            }\n        }\n        if (isJavaKeyword(modifiedIdentifier.toString())) {\n            modifiedIdentifier.append('_');\n        }\n        return modifiedIdentifier.toString();\n    }", "language": "java", "code": "public static final String makeJavaIdentifier(String identifier) {\n        StringBuilder modifiedIdentifier = \n            new StringBuilder(identifier.length());\n        if (!Character.isJavaIdentifierStart(identifier.charAt(0))) {\n            modifiedIdentifier.append('_');\n        }\n        for (int i = 0; i < identifier.length(); i++) {\n            char ch = identifier.charAt(i);\n            if (Character.isJavaIdentifierPart(ch) && ch != '_') {\n                modifiedIdentifier.append(ch);\n            } else if (ch == '.') {\n                modifiedIdentifier.append('_');\n            } else {\n                modifiedIdentifier.append(mangleChar(ch));\n            }\n        }\n        if (isJavaKeyword(modifiedIdentifier.toString())) {\n            modifiedIdentifier.append('_');\n        }\n        return modifiedIdentifier.toString();\n    }", "code_tokens": ["public", "static", "final", "String", "makeJavaIdentifier", "(", "String", "identifier", ")", "{", "StringBuilder", "modifiedIdentifier", "=", "new", "StringBuilder", "(", "identifier", ".", "length", "(", ")", ")", ";", "if", "(", "!", "Character", ".", "isJavaIdentifierStart", "(", "identifier", ".", "charAt", "(", "0", ")", ")", ")", "{", "modifiedIdentifier", ".", "append", "(", "'", "'", ")", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "identifier", ".", "length", "(", ")", ";", "i", "++", ")", "{", "char", "ch", "=", "identifier", ".", "charAt", "(", "i", ")", ";", "if", "(", "Character", ".", "isJavaIdentifierPart", "(", "ch", ")", "&&", "ch", "!=", "'", "'", ")", "{", "modifiedIdentifier", ".", "append", "(", "ch", ")", ";", "}", "else", "if", "(", "ch", "==", "'", "'", ")", "{", "modifiedIdentifier", ".", "append", "(", "'", "'", ")", ";", "}", "else", "{", "modifiedIdentifier", ".", "append", "(", "mangleChar", "(", "ch", ")", ")", ";", "}", "}", "if", "(", "isJavaKeyword", "(", "modifiedIdentifier", ".", "toString", "(", ")", ")", ")", "{", "modifiedIdentifier", ".", "append", "(", "'", "'", ")", ";", "}", "return", "modifiedIdentifier", ".", "toString", "(", ")", ";", "}"], "docstring": "Converts the given identifier to a legal Java identifier\n\n@param identifier Identifier to convert\n\n@return Legal Java identifier corresponding to the given identifier", "docstring_tokens": ["Converts", "the", "given", "identifier", "to", "a", "legal", "Java", "identifier"], "sha": "3869c1643cdc6f7cb8b26097a7b6994683b13d7e", "url": "https://github.com/eclipse/packagedrone/blob/3869c1643cdc6f7cb8b26097a7b6994683b13d7e/bundles/org.apache.jasper.glassfish/src/org/apache/jasper/compiler/JspUtil.java#L1029-L1049", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-jtx/src/main/java/jodd/jtx/JtxTransaction.java", "func_name": "JtxTransaction.rollbackAllResources", "original_string": "protected void rollbackAllResources(final boolean wasForced) {\n\t\tstatus = STATUS_ROLLING_BACK;\n\t\tException lastException = null;\n\t\tIterator<JtxResource> it = resources.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tJtxResource resource = it.next();\n\t\t\ttry {\n\t\t\t\tresource.rollbackTransaction();\n\t\t\t} catch (Exception ex) {\n\t\t\t\tlastException = ex;\n\t\t\t} finally {\n\t\t\t\tit.remove();\n\t\t\t}\n\t\t}\n\t\ttxManager.removeTransaction(this);\n\t\tstatus = STATUS_ROLLEDBACK;\n\t\tif (lastException != null) {\n\t\t\tstatus = STATUS_UNKNOWN;\n\t\t\tthrow new JtxException(\"Rollback failed: one or more TX resources couldn't rollback a TX\", lastException);\n\t\t}\n\t\tif (wasForced) {\n\t\t\tthrow new JtxException(\"TX rolled back because it has been marked as rollback-only\", rollbackCause);\n\t\t}\n\t}", "language": "java", "code": "protected void rollbackAllResources(final boolean wasForced) {\n\t\tstatus = STATUS_ROLLING_BACK;\n\t\tException lastException = null;\n\t\tIterator<JtxResource> it = resources.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tJtxResource resource = it.next();\n\t\t\ttry {\n\t\t\t\tresource.rollbackTransaction();\n\t\t\t} catch (Exception ex) {\n\t\t\t\tlastException = ex;\n\t\t\t} finally {\n\t\t\t\tit.remove();\n\t\t\t}\n\t\t}\n\t\ttxManager.removeTransaction(this);\n\t\tstatus = STATUS_ROLLEDBACK;\n\t\tif (lastException != null) {\n\t\t\tstatus = STATUS_UNKNOWN;\n\t\t\tthrow new JtxException(\"Rollback failed: one or more TX resources couldn't rollback a TX\", lastException);\n\t\t}\n\t\tif (wasForced) {\n\t\t\tthrow new JtxException(\"TX rolled back because it has been marked as rollback-only\", rollbackCause);\n\t\t}\n\t}", "code_tokens": ["protected", "void", "rollbackAllResources", "(", "final", "boolean", "wasForced", ")", "{", "status", "=", "STATUS_ROLLING_BACK", ";", "Exception", "lastException", "=", "null", ";", "Iterator", "<", "JtxResource", ">", "it", "=", "resources", ".", "iterator", "(", ")", ";", "while", "(", "it", ".", "hasNext", "(", ")", ")", "{", "JtxResource", "resource", "=", "it", ".", "next", "(", ")", ";", "try", "{", "resource", ".", "rollbackTransaction", "(", ")", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "lastException", "=", "ex", ";", "}", "finally", "{", "it", ".", "remove", "(", ")", ";", "}", "}", "txManager", ".", "removeTransaction", "(", "this", ")", ";", "status", "=", "STATUS_ROLLEDBACK", ";", "if", "(", "lastException", "!=", "null", ")", "{", "status", "=", "STATUS_UNKNOWN", ";", "throw", "new", "JtxException", "(", "\"Rollback failed: one or more TX resources couldn't rollback a TX\"", ",", "lastException", ")", ";", "}", "if", "(", "wasForced", ")", "{", "throw", "new", "JtxException", "(", "\"TX rolled back because it has been marked as rollback-only\"", ",", "rollbackCause", ")", ";", "}", "}"], "docstring": "Rollbacks all attached resources. Resource will be closed. and detached from this transaction.\nIf exception occurs, it will be rethrown at the end.", "docstring_tokens": ["Rollbacks", "all", "attached", "resources", ".", "Resource", "will", "be", "closed", ".", "and", "detached", "from", "this", "transaction", ".", "If", "exception", "occurs", "it", "will", "be", "rethrown", "at", "the", "end", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-jtx/src/main/java/jodd/jtx/JtxTransaction.java#L317-L340", "partition": "test"}
{"repo": "Unidata/thredds", "path": "ui/src/main/java/ucar/nc2/ui/table/JTreeTableSorted.java", "func_name": "JTreeTableSorted.getModelIndex", "original_string": "public int[] getModelIndex() {\n    int[] modelIndex = new int[model.getColumnCount()];\n\n    try {\n      TableColumnModel tcm = table.getColumnModel();\n      for (int i = 0; i < model.getColumnCount(); i++) {\n        TableColumn tc = tcm.getColumn(i);\n        modelIndex[i] = tc.getModelIndex();\n      }\n    } catch (java.lang.ArrayIndexOutOfBoundsException e) {\n      //can happen when model size increases\n    }\n\n    return modelIndex;\n  }", "language": "java", "code": "public int[] getModelIndex() {\n    int[] modelIndex = new int[model.getColumnCount()];\n\n    try {\n      TableColumnModel tcm = table.getColumnModel();\n      for (int i = 0; i < model.getColumnCount(); i++) {\n        TableColumn tc = tcm.getColumn(i);\n        modelIndex[i] = tc.getModelIndex();\n      }\n    } catch (java.lang.ArrayIndexOutOfBoundsException e) {\n      //can happen when model size increases\n    }\n\n    return modelIndex;\n  }", "code_tokens": ["public", "int", "[", "]", "getModelIndex", "(", ")", "{", "int", "[", "]", "modelIndex", "=", "new", "int", "[", "model", ".", "getColumnCount", "(", ")", "]", ";", "try", "{", "TableColumnModel", "tcm", "=", "table", ".", "getColumnModel", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "model", ".", "getColumnCount", "(", ")", ";", "i", "++", ")", "{", "TableColumn", "tc", "=", "tcm", ".", "getColumn", "(", "i", ")", ";", "modelIndex", "[", "i", "]", "=", "tc", ".", "getModelIndex", "(", ")", ";", "}", "}", "catch", "(", "java", ".", "lang", ".", "ArrayIndexOutOfBoundsException", "e", ")", "{", "//can happen when model size increases", "}", "return", "modelIndex", ";", "}"], "docstring": "this array translates the column index to the model index", "docstring_tokens": ["this", "array", "translates", "the", "column", "index", "to", "the", "model", "index"], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/ui/src/main/java/ucar/nc2/ui/table/JTreeTableSorted.java#L454-L468", "partition": "test"}
{"repo": "spring-projects/spring-security", "path": "oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/web/server/DefaultServerOAuth2AuthorizationRequestResolver.java", "func_name": "DefaultServerOAuth2AuthorizationRequestResolver.addPkceParameters", "original_string": "private void addPkceParameters(Map<String, Object> attributes, Map<String, Object> additionalParameters) {\n\t\tString codeVerifier = this.codeVerifierGenerator.generateKey();\n\t\tattributes.put(PkceParameterNames.CODE_VERIFIER, codeVerifier);\n\t\ttry {\n\t\t\tString codeChallenge = createCodeChallenge(codeVerifier);\n\t\t\tadditionalParameters.put(PkceParameterNames.CODE_CHALLENGE, codeChallenge);\n\t\t\tadditionalParameters.put(PkceParameterNames.CODE_CHALLENGE_METHOD, \"S256\");\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tadditionalParameters.put(PkceParameterNames.CODE_CHALLENGE, codeVerifier);\n\t\t}\n\t}", "language": "java", "code": "private void addPkceParameters(Map<String, Object> attributes, Map<String, Object> additionalParameters) {\n\t\tString codeVerifier = this.codeVerifierGenerator.generateKey();\n\t\tattributes.put(PkceParameterNames.CODE_VERIFIER, codeVerifier);\n\t\ttry {\n\t\t\tString codeChallenge = createCodeChallenge(codeVerifier);\n\t\t\tadditionalParameters.put(PkceParameterNames.CODE_CHALLENGE, codeChallenge);\n\t\t\tadditionalParameters.put(PkceParameterNames.CODE_CHALLENGE_METHOD, \"S256\");\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tadditionalParameters.put(PkceParameterNames.CODE_CHALLENGE, codeVerifier);\n\t\t}\n\t}", "code_tokens": ["private", "void", "addPkceParameters", "(", "Map", "<", "String", ",", "Object", ">", "attributes", ",", "Map", "<", "String", ",", "Object", ">", "additionalParameters", ")", "{", "String", "codeVerifier", "=", "this", ".", "codeVerifierGenerator", ".", "generateKey", "(", ")", ";", "attributes", ".", "put", "(", "PkceParameterNames", ".", "CODE_VERIFIER", ",", "codeVerifier", ")", ";", "try", "{", "String", "codeChallenge", "=", "createCodeChallenge", "(", "codeVerifier", ")", ";", "additionalParameters", ".", "put", "(", "PkceParameterNames", ".", "CODE_CHALLENGE", ",", "codeChallenge", ")", ";", "additionalParameters", ".", "put", "(", "PkceParameterNames", ".", "CODE_CHALLENGE_METHOD", ",", "\"S256\"", ")", ";", "}", "catch", "(", "NoSuchAlgorithmException", "e", ")", "{", "additionalParameters", ".", "put", "(", "PkceParameterNames", ".", "CODE_CHALLENGE", ",", "codeVerifier", ")", ";", "}", "}"], "docstring": "Creates and adds additional PKCE parameters for use in the OAuth 2.0 Authorization and Access Token Requests\n\n@param attributes where {@link PkceParameterNames#CODE_VERIFIER} is stored for the token request\n@param additionalParameters where {@link PkceParameterNames#CODE_CHALLENGE} and, usually,\n{@link PkceParameterNames#CODE_CHALLENGE_METHOD} are added to be used in the authorization request.\n\n@since 5.2\n@see <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc7636#section-1.1\">1.1.  Protocol Flow</a>\n@see <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc7636#section-4.1\">4.1.  Client Creates a Code Verifier</a>\n@see <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc7636#section-4.2\">4.2.  Client Creates the Code Challenge</a>", "docstring_tokens": ["Creates", "and", "adds", "additional", "PKCE", "parameters", "for", "use", "in", "the", "OAuth", "2", ".", "0", "Authorization", "and", "Access", "Token", "Requests"], "sha": "98a8467e4c2ae05b3e09c67ece856944fa48ed23", "url": "https://github.com/spring-projects/spring-security/blob/98a8467e4c2ae05b3e09c67ece856944fa48ed23/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/web/server/DefaultServerOAuth2AuthorizationRequestResolver.java#L192-L202", "partition": "test"}
{"repo": "real-logic/aeron", "path": "aeron-client/src/main/java/io/aeron/ExclusivePublication.java", "func_name": "ExclusivePublication.appendPadding", "original_string": "public long appendPadding(final int length)\n    {\n        checkMaxMessageLength(length);\n        long newPosition = CLOSED;\n\n        if (!isClosed)\n        {\n            final long limit = positionLimit.getVolatile();\n            final ExclusiveTermAppender termAppender = termAppenders[activePartitionIndex];\n            final long position = termBeginPosition + termOffset;\n\n            if (position < limit)\n            {\n                checkPositiveLength(length);\n                final int result = termAppender.appendPadding(termId, termOffset, headerWriter, length);\n                newPosition = newPosition(result);\n            }\n            else\n            {\n                newPosition = backPressureStatus(position, length);\n            }\n        }\n\n        return newPosition;\n    }", "language": "java", "code": "public long appendPadding(final int length)\n    {\n        checkMaxMessageLength(length);\n        long newPosition = CLOSED;\n\n        if (!isClosed)\n        {\n            final long limit = positionLimit.getVolatile();\n            final ExclusiveTermAppender termAppender = termAppenders[activePartitionIndex];\n            final long position = termBeginPosition + termOffset;\n\n            if (position < limit)\n            {\n                checkPositiveLength(length);\n                final int result = termAppender.appendPadding(termId, termOffset, headerWriter, length);\n                newPosition = newPosition(result);\n            }\n            else\n            {\n                newPosition = backPressureStatus(position, length);\n            }\n        }\n\n        return newPosition;\n    }", "code_tokens": ["public", "long", "appendPadding", "(", "final", "int", "length", ")", "{", "checkMaxMessageLength", "(", "length", ")", ";", "long", "newPosition", "=", "CLOSED", ";", "if", "(", "!", "isClosed", ")", "{", "final", "long", "limit", "=", "positionLimit", ".", "getVolatile", "(", ")", ";", "final", "ExclusiveTermAppender", "termAppender", "=", "termAppenders", "[", "activePartitionIndex", "]", ";", "final", "long", "position", "=", "termBeginPosition", "+", "termOffset", ";", "if", "(", "position", "<", "limit", ")", "{", "checkPositiveLength", "(", "length", ")", ";", "final", "int", "result", "=", "termAppender", ".", "appendPadding", "(", "termId", ",", "termOffset", ",", "headerWriter", ",", "length", ")", ";", "newPosition", "=", "newPosition", "(", "result", ")", ";", "}", "else", "{", "newPosition", "=", "backPressureStatus", "(", "position", ",", "length", ")", ";", "}", "}", "return", "newPosition", ";", "}"], "docstring": "Append a padding record log of a given length to make up the log to a position.\n\n@param length of the range to claim, in bytes..\n@return The new stream position, otherwise a negative error value of {@link #NOT_CONNECTED},\n{@link #BACK_PRESSURED}, {@link #ADMIN_ACTION}, {@link #CLOSED}, or {@link #MAX_POSITION_EXCEEDED}.\n@throws IllegalArgumentException if the length is greater than {@link #maxMessageLength()}.", "docstring_tokens": ["Append", "a", "padding", "record", "log", "of", "a", "given", "length", "to", "make", "up", "the", "log", "to", "a", "position", "."], "sha": "045c32f0256d1ea35d562520216affc281a41239", "url": "https://github.com/real-logic/aeron/blob/045c32f0256d1ea35d562520216affc281a41239/aeron-client/src/main/java/io/aeron/ExclusivePublication.java#L356-L380", "partition": "test"}
{"repo": "streamsets/datacollector", "path": "hive-protolib/src/main/java/com/streamsets/pipeline/stage/lib/hive/HiveMetastoreUtil.java", "func_name": "HiveMetastoreUtil.getLocation", "original_string": "public static String getLocation(Record metadataRecord) throws HiveStageCheckedException{\n    if (metadataRecord.has(SEP + LOCATION_FIELD)) {\n      return metadataRecord.get(SEP + LOCATION_FIELD).getValueAsString();\n    }\n    throw new HiveStageCheckedException(Errors.HIVE_17, LOCATION_FIELD, metadataRecord);\n  }", "language": "java", "code": "public static String getLocation(Record metadataRecord) throws HiveStageCheckedException{\n    if (metadataRecord.has(SEP + LOCATION_FIELD)) {\n      return metadataRecord.get(SEP + LOCATION_FIELD).getValueAsString();\n    }\n    throw new HiveStageCheckedException(Errors.HIVE_17, LOCATION_FIELD, metadataRecord);\n  }", "code_tokens": ["public", "static", "String", "getLocation", "(", "Record", "metadataRecord", ")", "throws", "HiveStageCheckedException", "{", "if", "(", "metadataRecord", ".", "has", "(", "SEP", "+", "LOCATION_FIELD", ")", ")", "{", "return", "metadataRecord", ".", "get", "(", "SEP", "+", "LOCATION_FIELD", ")", ".", "getValueAsString", "(", ")", ";", "}", "throw", "new", "HiveStageCheckedException", "(", "Errors", ".", "HIVE_17", ",", "LOCATION_FIELD", ",", "metadataRecord", ")", ";", "}"], "docstring": "Get Location from the metadata record.\n@param metadataRecord the metadata record\n@return location\n@throws HiveStageCheckedException if the location field does not exist in the metadata record.", "docstring_tokens": ["Get", "Location", "from", "the", "metadata", "record", "."], "sha": "ea63245ea14d59d5229248387f0628f46131eae5", "url": "https://github.com/streamsets/datacollector/blob/ea63245ea14d59d5229248387f0628f46131eae5/hive-protolib/src/main/java/com/streamsets/pipeline/stage/lib/hive/HiveMetastoreUtil.java#L454-L459", "partition": "test"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/container/CreatedEntityManagers.java", "func_name": "CreatedEntityManagers.getDeferredEntityManagers", "original_string": "public static ExtendedEntityManager[] getDeferredEntityManagers() {\n        List<ExtendedEntityManager> store = deferToPostConstruct.get();\n        try {\n            if(store.isEmpty()) {\n                return EMPTY;\n            } else {\n                return store.toArray(new ExtendedEntityManager[store.size()]);\n            }\n        } finally {\n            store.clear();\n        }\n    }", "language": "java", "code": "public static ExtendedEntityManager[] getDeferredEntityManagers() {\n        List<ExtendedEntityManager> store = deferToPostConstruct.get();\n        try {\n            if(store.isEmpty()) {\n                return EMPTY;\n            } else {\n                return store.toArray(new ExtendedEntityManager[store.size()]);\n            }\n        } finally {\n            store.clear();\n        }\n    }", "code_tokens": ["public", "static", "ExtendedEntityManager", "[", "]", "getDeferredEntityManagers", "(", ")", "{", "List", "<", "ExtendedEntityManager", ">", "store", "=", "deferToPostConstruct", ".", "get", "(", ")", ";", "try", "{", "if", "(", "store", ".", "isEmpty", "(", ")", ")", "{", "return", "EMPTY", ";", "}", "else", "{", "return", "store", ".", "toArray", "(", "new", "ExtendedEntityManager", "[", "store", ".", "size", "(", ")", "]", ")", ";", "}", "}", "finally", "{", "store", ".", "clear", "(", ")", ";", "}", "}"], "docstring": "Called by postconstruct interceptor", "docstring_tokens": ["Called", "by", "postconstruct", "interceptor"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/container/CreatedEntityManagers.java#L66-L77", "partition": "test"}
{"repo": "Unidata/thredds", "path": "opendap/src/main/java/opendap/servers/CEEvaluator.java", "func_name": "CEEvaluator.parseConstraint", "original_string": "public void parseConstraint(ReqState rs)\n            throws ParseException, opendap.dap.DAP2Exception, NoSuchVariableException,\n            NoSuchFunctionException, InvalidOperatorException,\n            InvalidParameterException, SBHException, WrongTypeException\n    {\n           parseConstraint(rs.getConstraintExpression(),rs.getRequestURL().toString());\n    }", "language": "java", "code": "public void parseConstraint(ReqState rs)\n            throws ParseException, opendap.dap.DAP2Exception, NoSuchVariableException,\n            NoSuchFunctionException, InvalidOperatorException,\n            InvalidParameterException, SBHException, WrongTypeException\n    {\n           parseConstraint(rs.getConstraintExpression(),rs.getRequestURL().toString());\n    }", "code_tokens": ["public", "void", "parseConstraint", "(", "ReqState", "rs", ")", "throws", "ParseException", ",", "opendap", ".", "dap", ".", "DAP2Exception", ",", "NoSuchVariableException", ",", "NoSuchFunctionException", ",", "InvalidOperatorException", ",", "InvalidParameterException", ",", "SBHException", ",", "WrongTypeException", "{", "parseConstraint", "(", "rs", ".", "getConstraintExpression", "(", ")", ",", "rs", ".", "getRequestURL", "(", ")", ".", "toString", "(", ")", ")", ";", "}"], "docstring": "Convenience wrapper for parseConstraint.\n\n@param rs\n@throws ParseException\n@throws opendap.dap.DAP2Exception\n@throws NoSuchVariableException\n@throws NoSuchFunctionException\n@throws InvalidOperatorException\n@throws InvalidParameterException\n@throws SBHException\n@throws WrongTypeException", "docstring_tokens": ["Convenience", "wrapper", "for", "parseConstraint", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/opendap/src/main/java/opendap/servers/CEEvaluator.java#L227-L233", "partition": "test"}
{"repo": "Unidata/thredds", "path": "ui/src/main/java/ucar/util/prefs/ui/PrefPanel.java", "func_name": "PrefPanel.addTextField", "original_string": "public Field.Text addTextField(String fldName, String label, String defValue) {\n    Field.Text fld = new Field.Text(fldName, label, defValue, storeData);\n    addField( new FieldResizable(fld, this));\n    return fld;\n  }", "language": "java", "code": "public Field.Text addTextField(String fldName, String label, String defValue) {\n    Field.Text fld = new Field.Text(fldName, label, defValue, storeData);\n    addField( new FieldResizable(fld, this));\n    return fld;\n  }", "code_tokens": ["public", "Field", ".", "Text", "addTextField", "(", "String", "fldName", ",", "String", "label", ",", "String", "defValue", ")", "{", "Field", ".", "Text", "fld", "=", "new", "Field", ".", "Text", "(", "fldName", ",", "label", ",", "defValue", ",", "storeData", ")", ";", "addField", "(", "new", "FieldResizable", "(", "fld", ",", "this", ")", ")", ";", "return", "fld", ";", "}"], "docstring": "Add a text field.\n@param fldName the name to store the data in the PersistenceManagerData\n@param label used as the label on the panel\n@param defValue default value\n@return the Field.Text object that was added", "docstring_tokens": ["Add", "a", "text", "field", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/ui/src/main/java/ucar/util/prefs/ui/PrefPanel.java#L442-L446", "partition": "test"}
{"repo": "jboss/jboss-common-core", "path": "src/main/java/org/jboss/util/collection/CachedCollection.java", "func_name": "CachedCollection.add", "original_string": "public boolean add(final Object obj) {\n      maintain();\n\n      SoftObject soft = SoftObject.create(obj, queue);\n      \n      return collection.add(soft);\n   }", "language": "java", "code": "public boolean add(final Object obj) {\n      maintain();\n\n      SoftObject soft = SoftObject.create(obj, queue);\n      \n      return collection.add(soft);\n   }", "code_tokens": ["public", "boolean", "add", "(", "final", "Object", "obj", ")", "{", "maintain", "(", ")", ";", "SoftObject", "soft", "=", "SoftObject", ".", "create", "(", "obj", ",", "queue", ")", ";", "return", "collection", ".", "add", "(", "soft", ")", ";", "}"], "docstring": "Add an object to the collection.\n\n@param obj  Object (or <i>null</i> to add to the collection.\n@return     True if object was added.", "docstring_tokens": ["Add", "an", "object", "to", "the", "collection", "."], "sha": "c191bb18db83fa106c6913cf34ed47989b65dc97", "url": "https://github.com/jboss/jboss-common-core/blob/c191bb18db83fa106c6913cf34ed47989b65dc97/src/main/java/org/jboss/util/collection/CachedCollection.java#L82-L88", "partition": "test"}
{"repo": "real-logic/aeron", "path": "aeron-client/src/main/java/io/aeron/command/PublicationMessageFlyweight.java", "func_name": "PublicationMessageFlyweight.channel", "original_string": "public PublicationMessageFlyweight channel(final String channel)\n    {\n        lengthOfChannel = buffer.putStringAscii(offset + CHANNEL_OFFSET, channel);\n\n        return this;\n    }", "language": "java", "code": "public PublicationMessageFlyweight channel(final String channel)\n    {\n        lengthOfChannel = buffer.putStringAscii(offset + CHANNEL_OFFSET, channel);\n\n        return this;\n    }", "code_tokens": ["public", "PublicationMessageFlyweight", "channel", "(", "final", "String", "channel", ")", "{", "lengthOfChannel", "=", "buffer", ".", "putStringAscii", "(", "offset", "+", "CHANNEL_OFFSET", ",", "channel", ")", ";", "return", "this", ";", "}"], "docstring": "Set the channel field in ASCII\n\n@param channel field value\n@return flyweight", "docstring_tokens": ["Set", "the", "channel", "field", "in", "ASCII"], "sha": "045c32f0256d1ea35d562520216affc281a41239", "url": "https://github.com/real-logic/aeron/blob/045c32f0256d1ea35d562520216affc281a41239/aeron-client/src/main/java/io/aeron/command/PublicationMessageFlyweight.java#L85-L90", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-json/src/main/java/jodd/json/JsonObject.java", "func_name": "JsonObject.getFloat", "original_string": "public Float getFloat(final String key) {\n\t\tNumber number = (Number) map.get(key);\n\n\t\tif (number == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (number instanceof Float) {\n\t\t\treturn (Float) number;\n\t\t}\n\t\treturn number.floatValue();\n\t}", "language": "java", "code": "public Float getFloat(final String key) {\n\t\tNumber number = (Number) map.get(key);\n\n\t\tif (number == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (number instanceof Float) {\n\t\t\treturn (Float) number;\n\t\t}\n\t\treturn number.floatValue();\n\t}", "code_tokens": ["public", "Float", "getFloat", "(", "final", "String", "key", ")", "{", "Number", "number", "=", "(", "Number", ")", "map", ".", "get", "(", "key", ")", ";", "if", "(", "number", "==", "null", ")", "{", "return", "null", ";", "}", "if", "(", "number", "instanceof", "Float", ")", "{", "return", "(", "Float", ")", "number", ";", "}", "return", "number", ".", "floatValue", "(", ")", ";", "}"], "docstring": "Returns the float value with the specified key.", "docstring_tokens": ["Returns", "the", "float", "value", "with", "the", "specified", "key", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-json/src/main/java/jodd/json/JsonObject.java#L119-L129", "partition": "test"}
{"repo": "rupertlssmith/lojix", "path": "debugger/debug_ui_tools_swing/src/main/com/thesett/aima/logic/fol/wam/debugger/uifactory/impl/SwingMainWindow.java", "func_name": "SwingMainWindow.showLeftBar", "original_string": "private void showLeftBar()\n    {\n        // Left vertical bar.\n        Component bar = factory.createGripPanel(layout.getLeftPaneWidthResizer(), true);\n\n        frame.getContentPane().add(bar, DesktopAppLayout.LEFT_VERTICAL_BAR);\n    }", "language": "java", "code": "private void showLeftBar()\n    {\n        // Left vertical bar.\n        Component bar = factory.createGripPanel(layout.getLeftPaneWidthResizer(), true);\n\n        frame.getContentPane().add(bar, DesktopAppLayout.LEFT_VERTICAL_BAR);\n    }", "code_tokens": ["private", "void", "showLeftBar", "(", ")", "{", "// Left vertical bar.", "Component", "bar", "=", "factory", ".", "createGripPanel", "(", "layout", ".", "getLeftPaneWidthResizer", "(", ")", ",", "true", ")", ";", "frame", ".", "getContentPane", "(", ")", ".", "add", "(", "bar", ",", "DesktopAppLayout", ".", "LEFT_VERTICAL_BAR", ")", ";", "}"], "docstring": "Creates a vertical grip-able bar for adjusting the left panel width.", "docstring_tokens": ["Creates", "a", "vertical", "grip", "-", "able", "bar", "for", "adjusting", "the", "left", "panel", "width", "."], "sha": "ad494dc8bce2345567de7689d42291d4b30fbd51", "url": "https://github.com/rupertlssmith/lojix/blob/ad494dc8bce2345567de7689d42291d4b30fbd51/debugger/debug_ui_tools_swing/src/main/com/thesett/aima/logic/fol/wam/debugger/uifactory/impl/SwingMainWindow.java#L155-L161", "partition": "test"}
{"repo": "google/guice", "path": "extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java", "func_name": "FactoryProvider2.removeAssistedDeps", "original_string": "private Set<Dependency<?>> removeAssistedDeps(Set<Dependency<?>> deps) {\n    ImmutableSet.Builder<Dependency<?>> builder = ImmutableSet.builder();\n    for (Dependency<?> dep : deps) {\n      Class<?> annotationType = dep.getKey().getAnnotationType();\n      if (annotationType == null || !annotationType.equals(Assisted.class)) {\n        builder.add(dep);\n      }\n    }\n    return builder.build();\n  }", "language": "java", "code": "private Set<Dependency<?>> removeAssistedDeps(Set<Dependency<?>> deps) {\n    ImmutableSet.Builder<Dependency<?>> builder = ImmutableSet.builder();\n    for (Dependency<?> dep : deps) {\n      Class<?> annotationType = dep.getKey().getAnnotationType();\n      if (annotationType == null || !annotationType.equals(Assisted.class)) {\n        builder.add(dep);\n      }\n    }\n    return builder.build();\n  }", "code_tokens": ["private", "Set", "<", "Dependency", "<", "?", ">", ">", "removeAssistedDeps", "(", "Set", "<", "Dependency", "<", "?", ">", ">", "deps", ")", "{", "ImmutableSet", ".", "Builder", "<", "Dependency", "<", "?", ">", ">", "builder", "=", "ImmutableSet", ".", "builder", "(", ")", ";", "for", "(", "Dependency", "<", "?", ">", "dep", ":", "deps", ")", "{", "Class", "<", "?", ">", "annotationType", "=", "dep", ".", "getKey", "(", ")", ".", "getAnnotationType", "(", ")", ";", "if", "(", "annotationType", "==", "null", "||", "!", "annotationType", ".", "equals", "(", "Assisted", ".", "class", ")", ")", "{", "builder", ".", "add", "(", "dep", ")", ";", "}", "}", "return", "builder", ".", "build", "(", ")", ";", "}"], "docstring": "Return all non-assisted dependencies.", "docstring_tokens": ["Return", "all", "non", "-", "assisted", "dependencies", "."], "sha": "a0552a16d813ead98fe73737fb001db336650251", "url": "https://github.com/google/guice/blob/a0552a16d813ead98fe73737fb001db336650251/extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java#L624-L633", "partition": "test"}
{"repo": "Unidata/thredds", "path": "legacy/src/main/java/thredds/catalog/InvMetadata.java", "func_name": "InvMetadata.finish", "original_string": "public void finish() {\n    if (init) return;\n    init = true;\n    if (xlinkHref == null) return;\n\n    xlinkHref = xlinkHref.trim();\n    try {\n      this.xlinkUri = dataset.getParentCatalog().resolveUri(xlinkHref);\n    } catch (java.net.URISyntaxException e) {\n      log.append(\" ** Error: Bad URL in metadata href = \").append(xlinkHref).append(\"\\n\");\n      return;\n    }\n\n    // open and read the referenced catalog XML\n    try {\n      if (converter == null) {\n        log.append(\"  **InvMetadata on = (\").append(this).append(\"): has no converter\\n\");\n        return;\n      }\n\n      contentObject = converter.readMetadataContentFromURL(dataset, xlinkUri);\n      if (isThreddsMetadata)\n        tm = (ThreddsMetadata) contentObject;\n\n    } catch (java.io.IOException e) {\n      log.append(\"  **InvMetadata on = (\").append(xlinkUri).append(\"): Exception (\").append(e.getMessage()).append(\")\\n\");\n      // e.printStackTrace();\n    }\n  }", "language": "java", "code": "public void finish() {\n    if (init) return;\n    init = true;\n    if (xlinkHref == null) return;\n\n    xlinkHref = xlinkHref.trim();\n    try {\n      this.xlinkUri = dataset.getParentCatalog().resolveUri(xlinkHref);\n    } catch (java.net.URISyntaxException e) {\n      log.append(\" ** Error: Bad URL in metadata href = \").append(xlinkHref).append(\"\\n\");\n      return;\n    }\n\n    // open and read the referenced catalog XML\n    try {\n      if (converter == null) {\n        log.append(\"  **InvMetadata on = (\").append(this).append(\"): has no converter\\n\");\n        return;\n      }\n\n      contentObject = converter.readMetadataContentFromURL(dataset, xlinkUri);\n      if (isThreddsMetadata)\n        tm = (ThreddsMetadata) contentObject;\n\n    } catch (java.io.IOException e) {\n      log.append(\"  **InvMetadata on = (\").append(xlinkUri).append(\"): Exception (\").append(e.getMessage()).append(\")\\n\");\n      // e.printStackTrace();\n    }\n  }", "code_tokens": ["public", "void", "finish", "(", ")", "{", "if", "(", "init", ")", "return", ";", "init", "=", "true", ";", "if", "(", "xlinkHref", "==", "null", ")", "return", ";", "xlinkHref", "=", "xlinkHref", ".", "trim", "(", ")", ";", "try", "{", "this", ".", "xlinkUri", "=", "dataset", ".", "getParentCatalog", "(", ")", ".", "resolveUri", "(", "xlinkHref", ")", ";", "}", "catch", "(", "java", ".", "net", ".", "URISyntaxException", "e", ")", "{", "log", ".", "append", "(", "\" ** Error: Bad URL in metadata href = \"", ")", ".", "append", "(", "xlinkHref", ")", ".", "append", "(", "\"\\n\"", ")", ";", "return", ";", "}", "// open and read the referenced catalog XML", "try", "{", "if", "(", "converter", "==", "null", ")", "{", "log", ".", "append", "(", "\"  **InvMetadata on = (\"", ")", ".", "append", "(", "this", ")", ".", "append", "(", "\"): has no converter\\n\"", ")", ";", "return", ";", "}", "contentObject", "=", "converter", ".", "readMetadataContentFromURL", "(", "dataset", ",", "xlinkUri", ")", ";", "if", "(", "isThreddsMetadata", ")", "tm", "=", "(", "ThreddsMetadata", ")", "contentObject", ";", "}", "catch", "(", "java", ".", "io", ".", "IOException", "e", ")", "{", "log", ".", "append", "(", "\"  **InvMetadata on = (\"", ")", ".", "append", "(", "xlinkUri", ")", ".", "append", "(", "\"): Exception (\"", ")", ".", "append", "(", "e", ".", "getMessage", "(", ")", ")", ".", "append", "(", "\")\\n\"", ")", ";", "// e.printStackTrace();", "}", "}"], "docstring": "Finish getting the metadata if necessary.\nIf this is an XLink, this will trigger a read of the href the first time called.", "docstring_tokens": ["Finish", "getting", "the", "metadata", "if", "necessary", ".", "If", "this", "is", "an", "XLink", "this", "will", "trigger", "a", "read", "of", "the", "href", "the", "first", "time", "called", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/legacy/src/main/java/thredds/catalog/InvMetadata.java#L236-L264", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "api/jar/src/main/java/javax/slee/facilities/Level.java", "func_name": "Level.isHigherLevel", "original_string": "public boolean isHigherLevel(Level other) throws NullPointerException {\n        if (other == null) throw new NullPointerException(\"other is null\");\n\n        return this.level < other.level;\n    }", "language": "java", "code": "public boolean isHigherLevel(Level other) throws NullPointerException {\n        if (other == null) throw new NullPointerException(\"other is null\");\n\n        return this.level < other.level;\n    }", "code_tokens": ["public", "boolean", "isHigherLevel", "(", "Level", "other", ")", "throws", "NullPointerException", "{", "if", "(", "other", "==", "null", ")", "throw", "new", "NullPointerException", "(", "\"other is null\"", ")", ";", "return", "this", ".", "level", "<", "other", ".", "level", ";", "}"], "docstring": "Determine if this Level object represents a level that is higher or more severe\nthat some other Level object.  For the purposes of the comparison OFF\nis considered a higher level than SEVERE.\n@param other the <code>Level</code> object to compare this with.\n@return <code>true</code> if the level represented by this <code>Level</code>\nobject is a higher level than the level represented by the specified\n<code>Level</code> object, <code>false</code> otherwise.\n@throws NullPointerException if <code>other</code> is <code>null</code>.\n@deprecated Trace and alarm levels now defined in {@link TraceLevel} and {@link AlarmLevel}.", "docstring_tokens": ["Determine", "if", "this", "Level", "object", "represents", "a", "level", "that", "is", "higher", "or", "more", "severe", "that", "some", "other", "Level", "object", ".", "For", "the", "purposes", "of", "the", "comparison", "OFF", "is", "considered", "a", "higher", "level", "than", "SEVERE", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/api/jar/src/main/java/javax/slee/facilities/Level.java#L329-L333", "partition": "test"}
{"repo": "apache/parquet-mr", "path": "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileWriter.java", "func_name": "ParquetFileWriter.end", "original_string": "public void end(Map<String, String> extraMetaData) throws IOException {\n    state = state.end();\n    serializeColumnIndexes(columnIndexes, blocks, out);\n    serializeOffsetIndexes(offsetIndexes, blocks, out);\n    LOG.debug(\"{}: end\", out.getPos());\n    this.footer = new ParquetMetadata(new FileMetaData(schema, extraMetaData, Version.FULL_VERSION), blocks);\n    serializeFooter(footer, out);\n    out.close();\n  }", "language": "java", "code": "public void end(Map<String, String> extraMetaData) throws IOException {\n    state = state.end();\n    serializeColumnIndexes(columnIndexes, blocks, out);\n    serializeOffsetIndexes(offsetIndexes, blocks, out);\n    LOG.debug(\"{}: end\", out.getPos());\n    this.footer = new ParquetMetadata(new FileMetaData(schema, extraMetaData, Version.FULL_VERSION), blocks);\n    serializeFooter(footer, out);\n    out.close();\n  }", "code_tokens": ["public", "void", "end", "(", "Map", "<", "String", ",", "String", ">", "extraMetaData", ")", "throws", "IOException", "{", "state", "=", "state", ".", "end", "(", ")", ";", "serializeColumnIndexes", "(", "columnIndexes", ",", "blocks", ",", "out", ")", ";", "serializeOffsetIndexes", "(", "offsetIndexes", ",", "blocks", ",", "out", ")", ";", "LOG", ".", "debug", "(", "\"{}: end\"", ",", "out", ".", "getPos", "(", ")", ")", ";", "this", ".", "footer", "=", "new", "ParquetMetadata", "(", "new", "FileMetaData", "(", "schema", ",", "extraMetaData", ",", "Version", ".", "FULL_VERSION", ")", ",", "blocks", ")", ";", "serializeFooter", "(", "footer", ",", "out", ")", ";", "out", ".", "close", "(", ")", ";", "}"], "docstring": "ends a file once all blocks have been written.\ncloses the file.\n@param extraMetaData the extra meta data to write in the footer\n@throws IOException if there is an error while writing", "docstring_tokens": ["ends", "a", "file", "once", "all", "blocks", "have", "been", "written", ".", "closes", "the", "file", "."], "sha": "62dcc68acaf64012bf731e103be780956f1f446d", "url": "https://github.com/apache/parquet-mr/blob/62dcc68acaf64012bf731e103be780956f1f446d/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileWriter.java#L822-L830", "partition": "test"}
{"repo": "walokra/markdown-page-generator-plugin", "path": "src/main/java/com/ruleoftech/markdown/page/generator/plugin/MdPageGeneratorMojo.java", "func_name": "MdPageGeneratorMojo.copyFiles", "original_string": "private void copyFiles(String fromDir, String toDir) throws MojoExecutionException {\n        getLog().debug(\"fromDir=\" + fromDir + \"; toDir=\" + toDir);\n        try {\n            File fromDirFile = new File(fromDir);\n            if (fromDirFile.exists()) {\n                Iterator<File> files = FileUtils.iterateFiles(new File(fromDir), null, false);\n                while (files.hasNext()) {\n                    File file = files.next();\n                    if (file.exists()) {\n                        FileUtils.copyFileToDirectory(file, new File(toDir));\n                    } else {\n                        getLog().error(\"File '\" + file.getAbsolutePath() + \"' does not exist. Skipping copy\");\n                    }\n                }\n            }\n        } catch (IOException e) {\n            throw new MojoExecutionException(\"Unable to copy file \" + e.getMessage(), e);\n        }\n    }", "language": "java", "code": "private void copyFiles(String fromDir, String toDir) throws MojoExecutionException {\n        getLog().debug(\"fromDir=\" + fromDir + \"; toDir=\" + toDir);\n        try {\n            File fromDirFile = new File(fromDir);\n            if (fromDirFile.exists()) {\n                Iterator<File> files = FileUtils.iterateFiles(new File(fromDir), null, false);\n                while (files.hasNext()) {\n                    File file = files.next();\n                    if (file.exists()) {\n                        FileUtils.copyFileToDirectory(file, new File(toDir));\n                    } else {\n                        getLog().error(\"File '\" + file.getAbsolutePath() + \"' does not exist. Skipping copy\");\n                    }\n                }\n            }\n        } catch (IOException e) {\n            throw new MojoExecutionException(\"Unable to copy file \" + e.getMessage(), e);\n        }\n    }", "code_tokens": ["private", "void", "copyFiles", "(", "String", "fromDir", ",", "String", "toDir", ")", "throws", "MojoExecutionException", "{", "getLog", "(", ")", ".", "debug", "(", "\"fromDir=\"", "+", "fromDir", "+", "\"; toDir=\"", "+", "toDir", ")", ";", "try", "{", "File", "fromDirFile", "=", "new", "File", "(", "fromDir", ")", ";", "if", "(", "fromDirFile", ".", "exists", "(", ")", ")", "{", "Iterator", "<", "File", ">", "files", "=", "FileUtils", ".", "iterateFiles", "(", "new", "File", "(", "fromDir", ")", ",", "null", ",", "false", ")", ";", "while", "(", "files", ".", "hasNext", "(", ")", ")", "{", "File", "file", "=", "files", ".", "next", "(", ")", ";", "if", "(", "file", ".", "exists", "(", ")", ")", "{", "FileUtils", ".", "copyFileToDirectory", "(", "file", ",", "new", "File", "(", "toDir", ")", ")", ";", "}", "else", "{", "getLog", "(", ")", ".", "error", "(", "\"File '\"", "+", "file", ".", "getAbsolutePath", "(", ")", "+", "\"' does not exist. Skipping copy\"", ")", ";", "}", "}", "}", "}", "catch", "(", "IOException", "e", ")", "{", "throw", "new", "MojoExecutionException", "(", "\"Unable to copy file \"", "+", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "docstring": "Copy files from one dir to another based on file extensions.\n\n@param fromDir the directory to copy from\n@param toDir   the directory to copy to\n@throws MojoExecutionException Unable to copy file", "docstring_tokens": ["Copy", "files", "from", "one", "dir", "to", "another", "based", "on", "file", "extensions", "."], "sha": "2d5e0e6ca7a4509c9443d6d2fcf99dd9486bc5f7", "url": "https://github.com/walokra/markdown-page-generator-plugin/blob/2d5e0e6ca7a4509c9443d6d2fcf99dd9486bc5f7/src/main/java/com/ruleoftech/markdown/page/generator/plugin/MdPageGeneratorMojo.java#L653-L671", "partition": "test"}
{"repo": "Unidata/thredds", "path": "legacy/src/main/java/thredds/catalog/dl/DIFWriter.java", "func_name": "DIFWriter.doOneDataset", "original_string": "public void doOneDataset( InvDataset ds) {\n    if (debug) System.out.println(\"doDataset \"+ds.getName());\n\n    if (isDatasetUseable( ds, messBuffer)) {\n      String id = StringUtil2.replace(ds.getID(), \"/\", \"-\");\n      String fileOutName = fileDir+\"/\"+id+\".dif.xml\";\n      try {\n        OutputStream out = new BufferedOutputStream(new FileOutputStream( fileOutName));\n        // writeOneEntry(ds, System.out, mess);\n        writeOneEntry(ds, out, messBuffer);\n        out.close();\n        messBuffer.append(\" OK on Write\\n\");\n      } catch (IOException ioe) {\n        messBuffer.append(\"DIFWriter failed on write \" + ioe.getMessage() + \"\\n\");\n        log.error(\"DIFWriter failed on write \"+ioe.getMessage(), ioe);\n      }\n    }\n  }", "language": "java", "code": "public void doOneDataset( InvDataset ds) {\n    if (debug) System.out.println(\"doDataset \"+ds.getName());\n\n    if (isDatasetUseable( ds, messBuffer)) {\n      String id = StringUtil2.replace(ds.getID(), \"/\", \"-\");\n      String fileOutName = fileDir+\"/\"+id+\".dif.xml\";\n      try {\n        OutputStream out = new BufferedOutputStream(new FileOutputStream( fileOutName));\n        // writeOneEntry(ds, System.out, mess);\n        writeOneEntry(ds, out, messBuffer);\n        out.close();\n        messBuffer.append(\" OK on Write\\n\");\n      } catch (IOException ioe) {\n        messBuffer.append(\"DIFWriter failed on write \" + ioe.getMessage() + \"\\n\");\n        log.error(\"DIFWriter failed on write \"+ioe.getMessage(), ioe);\n      }\n    }\n  }", "code_tokens": ["public", "void", "doOneDataset", "(", "InvDataset", "ds", ")", "{", "if", "(", "debug", ")", "System", ".", "out", ".", "println", "(", "\"doDataset \"", "+", "ds", ".", "getName", "(", ")", ")", ";", "if", "(", "isDatasetUseable", "(", "ds", ",", "messBuffer", ")", ")", "{", "String", "id", "=", "StringUtil2", ".", "replace", "(", "ds", ".", "getID", "(", ")", ",", "\"/\"", ",", "\"-\"", ")", ";", "String", "fileOutName", "=", "fileDir", "+", "\"/\"", "+", "id", "+", "\".dif.xml\"", ";", "try", "{", "OutputStream", "out", "=", "new", "BufferedOutputStream", "(", "new", "FileOutputStream", "(", "fileOutName", ")", ")", ";", "// writeOneEntry(ds, System.out, mess);", "writeOneEntry", "(", "ds", ",", "out", ",", "messBuffer", ")", ";", "out", ".", "close", "(", ")", ";", "messBuffer", ".", "append", "(", "\" OK on Write\\n\"", ")", ";", "}", "catch", "(", "IOException", "ioe", ")", "{", "messBuffer", ".", "append", "(", "\"DIFWriter failed on write \"", "+", "ioe", ".", "getMessage", "(", ")", "+", "\"\\n\"", ")", ";", "log", ".", "error", "(", "\"DIFWriter failed on write \"", "+", "ioe", ".", "getMessage", "(", ")", ",", "ioe", ")", ";", "}", "}", "}"], "docstring": "Write a DIF record for a specific dataset\n@param ds use this dataset", "docstring_tokens": ["Write", "a", "DIF", "record", "for", "a", "specific", "dataset"], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/legacy/src/main/java/thredds/catalog/dl/DIFWriter.java#L75-L92", "partition": "test"}
{"repo": "Unidata/thredds", "path": "grib/src/main/java/ucar/nc2/grib/collection/Grib2Iosp.java", "func_name": "Grib2Iosp.isValidFile", "original_string": "@Override\n  public boolean isValidFile(RandomAccessFile raf) throws IOException {\n    if (raf instanceof HTTPRandomAccessFile) { // only do remote if memory resident\n      if (raf.length() > raf.getBufferSize())\n        return false;\n\n    } else {                                  // wont accept remote index\n      GribCdmIndex.GribCollectionType type = GribCdmIndex.getType(raf);\n      if (type == GribCdmIndex.GribCollectionType.GRIB2) return true;\n      if (type == GribCdmIndex.GribCollectionType.Partition2) return true;\n    }\n\n    // check for GRIB2 data file\n    return Grib2RecordScanner.isValidFile(raf);\n  }", "language": "java", "code": "@Override\n  public boolean isValidFile(RandomAccessFile raf) throws IOException {\n    if (raf instanceof HTTPRandomAccessFile) { // only do remote if memory resident\n      if (raf.length() > raf.getBufferSize())\n        return false;\n\n    } else {                                  // wont accept remote index\n      GribCdmIndex.GribCollectionType type = GribCdmIndex.getType(raf);\n      if (type == GribCdmIndex.GribCollectionType.GRIB2) return true;\n      if (type == GribCdmIndex.GribCollectionType.Partition2) return true;\n    }\n\n    // check for GRIB2 data file\n    return Grib2RecordScanner.isValidFile(raf);\n  }", "code_tokens": ["@", "Override", "public", "boolean", "isValidFile", "(", "RandomAccessFile", "raf", ")", "throws", "IOException", "{", "if", "(", "raf", "instanceof", "HTTPRandomAccessFile", ")", "{", "// only do remote if memory resident", "if", "(", "raf", ".", "length", "(", ")", ">", "raf", ".", "getBufferSize", "(", ")", ")", "return", "false", ";", "}", "else", "{", "// wont accept remote index", "GribCdmIndex", ".", "GribCollectionType", "type", "=", "GribCdmIndex", ".", "getType", "(", "raf", ")", ";", "if", "(", "type", "==", "GribCdmIndex", ".", "GribCollectionType", ".", "GRIB2", ")", "return", "true", ";", "if", "(", "type", "==", "GribCdmIndex", ".", "GribCollectionType", ".", "Partition2", ")", "return", "true", ";", "}", "// check for GRIB2 data file", "return", "Grib2RecordScanner", ".", "isValidFile", "(", "raf", ")", ";", "}"], "docstring": "accept grib2 or ncx files", "docstring_tokens": ["accept", "grib2", "or", "ncx", "files"], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/grib/src/main/java/ucar/nc2/grib/collection/Grib2Iosp.java#L192-L206", "partition": "test"}
{"repo": "spring-projects/spring-security", "path": "acl/src/main/java/org/springframework/security/acls/jdbc/JdbcMutableAclService.java", "func_name": "JdbcMutableAclService.createEntries", "original_string": "protected void createEntries(final MutableAcl acl) {\n\t\tif (acl.getEntries().isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\tjdbcOperations.batchUpdate(insertEntry, new BatchPreparedStatementSetter() {\n\t\t\tpublic int getBatchSize() {\n\t\t\t\treturn acl.getEntries().size();\n\t\t\t}\n\n\t\t\tpublic void setValues(PreparedStatement stmt, int i) throws SQLException {\n\t\t\t\tAccessControlEntry entry_ = acl.getEntries().get(i);\n\t\t\t\tAssert.isTrue(entry_ instanceof AccessControlEntryImpl,\n\t\t\t\t\t\t\"Unknown ACE class\");\n\t\t\t\tAccessControlEntryImpl entry = (AccessControlEntryImpl) entry_;\n\n\t\t\t\tstmt.setLong(1, ((Long) acl.getId()).longValue());\n\t\t\t\tstmt.setInt(2, i);\n\t\t\t\tstmt.setLong(3, createOrRetrieveSidPrimaryKey(entry.getSid(), true)\n\t\t\t\t\t\t.longValue());\n\t\t\t\tstmt.setInt(4, entry.getPermission().getMask());\n\t\t\t\tstmt.setBoolean(5, entry.isGranting());\n\t\t\t\tstmt.setBoolean(6, entry.isAuditSuccess());\n\t\t\t\tstmt.setBoolean(7, entry.isAuditFailure());\n\t\t\t}\n\t\t});\n\t}", "language": "java", "code": "protected void createEntries(final MutableAcl acl) {\n\t\tif (acl.getEntries().isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\tjdbcOperations.batchUpdate(insertEntry, new BatchPreparedStatementSetter() {\n\t\t\tpublic int getBatchSize() {\n\t\t\t\treturn acl.getEntries().size();\n\t\t\t}\n\n\t\t\tpublic void setValues(PreparedStatement stmt, int i) throws SQLException {\n\t\t\t\tAccessControlEntry entry_ = acl.getEntries().get(i);\n\t\t\t\tAssert.isTrue(entry_ instanceof AccessControlEntryImpl,\n\t\t\t\t\t\t\"Unknown ACE class\");\n\t\t\t\tAccessControlEntryImpl entry = (AccessControlEntryImpl) entry_;\n\n\t\t\t\tstmt.setLong(1, ((Long) acl.getId()).longValue());\n\t\t\t\tstmt.setInt(2, i);\n\t\t\t\tstmt.setLong(3, createOrRetrieveSidPrimaryKey(entry.getSid(), true)\n\t\t\t\t\t\t.longValue());\n\t\t\t\tstmt.setInt(4, entry.getPermission().getMask());\n\t\t\t\tstmt.setBoolean(5, entry.isGranting());\n\t\t\t\tstmt.setBoolean(6, entry.isAuditSuccess());\n\t\t\t\tstmt.setBoolean(7, entry.isAuditFailure());\n\t\t\t}\n\t\t});\n\t}", "code_tokens": ["protected", "void", "createEntries", "(", "final", "MutableAcl", "acl", ")", "{", "if", "(", "acl", ".", "getEntries", "(", ")", ".", "isEmpty", "(", ")", ")", "{", "return", ";", "}", "jdbcOperations", ".", "batchUpdate", "(", "insertEntry", ",", "new", "BatchPreparedStatementSetter", "(", ")", "{", "public", "int", "getBatchSize", "(", ")", "{", "return", "acl", ".", "getEntries", "(", ")", ".", "size", "(", ")", ";", "}", "public", "void", "setValues", "(", "PreparedStatement", "stmt", ",", "int", "i", ")", "throws", "SQLException", "{", "AccessControlEntry", "entry_", "=", "acl", ".", "getEntries", "(", ")", ".", "get", "(", "i", ")", ";", "Assert", ".", "isTrue", "(", "entry_", "instanceof", "AccessControlEntryImpl", ",", "\"Unknown ACE class\"", ")", ";", "AccessControlEntryImpl", "entry", "=", "(", "AccessControlEntryImpl", ")", "entry_", ";", "stmt", ".", "setLong", "(", "1", ",", "(", "(", "Long", ")", "acl", ".", "getId", "(", ")", ")", ".", "longValue", "(", ")", ")", ";", "stmt", ".", "setInt", "(", "2", ",", "i", ")", ";", "stmt", ".", "setLong", "(", "3", ",", "createOrRetrieveSidPrimaryKey", "(", "entry", ".", "getSid", "(", ")", ",", "true", ")", ".", "longValue", "(", ")", ")", ";", "stmt", ".", "setInt", "(", "4", ",", "entry", ".", "getPermission", "(", ")", ".", "getMask", "(", ")", ")", ";", "stmt", ".", "setBoolean", "(", "5", ",", "entry", ".", "isGranting", "(", ")", ")", ";", "stmt", ".", "setBoolean", "(", "6", ",", "entry", ".", "isAuditSuccess", "(", ")", ")", ";", "stmt", ".", "setBoolean", "(", "7", ",", "entry", ".", "isAuditFailure", "(", ")", ")", ";", "}", "}", ")", ";", "}"], "docstring": "Creates a new row in acl_entry for every ACE defined in the passed MutableAcl\nobject.\n\n@param acl containing the ACEs to insert", "docstring_tokens": ["Creates", "a", "new", "row", "in", "acl_entry", "for", "every", "ACE", "defined", "in", "the", "passed", "MutableAcl", "object", "."], "sha": "98a8467e4c2ae05b3e09c67ece856944fa48ed23", "url": "https://github.com/spring-projects/spring-security/blob/98a8467e4c2ae05b3e09c67ece856944fa48ed23/acl/src/main/java/org/springframework/security/acls/jdbc/JdbcMutableAclService.java#L134-L159", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-lagarto/src/main/java/jodd/lagarto/dom/Node.java", "func_name": "Node.changeOwnerDocument", "original_string": "protected void changeOwnerDocument(final Node node, final Document ownerDocument) {\n\t\tnode.ownerDocument = ownerDocument;\n\n\t\tint childCount = node.getChildNodesCount();\n\t\tfor (int i = 0; i < childCount; i++) {\n\t\t\tNode child = node.getChild(i);\n\t\t\tchangeOwnerDocument(child, ownerDocument);\n\t\t}\n\t}", "language": "java", "code": "protected void changeOwnerDocument(final Node node, final Document ownerDocument) {\n\t\tnode.ownerDocument = ownerDocument;\n\n\t\tint childCount = node.getChildNodesCount();\n\t\tfor (int i = 0; i < childCount; i++) {\n\t\t\tNode child = node.getChild(i);\n\t\t\tchangeOwnerDocument(child, ownerDocument);\n\t\t}\n\t}", "code_tokens": ["protected", "void", "changeOwnerDocument", "(", "final", "Node", "node", ",", "final", "Document", "ownerDocument", ")", "{", "node", ".", "ownerDocument", "=", "ownerDocument", ";", "int", "childCount", "=", "node", ".", "getChildNodesCount", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "childCount", ";", "i", "++", ")", "{", "Node", "child", "=", "node", ".", "getChild", "(", "i", ")", ";", "changeOwnerDocument", "(", "child", ",", "ownerDocument", ")", ";", "}", "}"], "docstring": "Changes owner document for given node and all its children.", "docstring_tokens": ["Changes", "owner", "document", "for", "given", "node", "and", "all", "its", "children", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-lagarto/src/main/java/jodd/lagarto/dom/Node.java#L900-L908", "partition": "test"}
{"repo": "WASdev/ci.common", "path": "src/main/java/net/wasdev/wlp/common/plugins/util/InstallFeatureUtil.java", "func_name": "InstallFeatureUtil.extractSymbolicName", "original_string": "public static String extractSymbolicName(File jar) throws PluginExecutionException {\n        JarFile jarFile = null;\n        try {\n            jarFile = new JarFile(jar);\n            return jarFile.getManifest().getMainAttributes().getValue(\"Bundle-SymbolicName\");\n        } catch (IOException e) {\n            throw new PluginExecutionException(\"Could not load the jar \" + jar.getAbsolutePath(), e);\n        } finally {\n            if (jarFile != null) {\n                try {\n                    jarFile.close();\n                } catch (IOException e) {\n                    // nothing to do here\n                }\n            }\n        }\n    }", "language": "java", "code": "public static String extractSymbolicName(File jar) throws PluginExecutionException {\n        JarFile jarFile = null;\n        try {\n            jarFile = new JarFile(jar);\n            return jarFile.getManifest().getMainAttributes().getValue(\"Bundle-SymbolicName\");\n        } catch (IOException e) {\n            throw new PluginExecutionException(\"Could not load the jar \" + jar.getAbsolutePath(), e);\n        } finally {\n            if (jarFile != null) {\n                try {\n                    jarFile.close();\n                } catch (IOException e) {\n                    // nothing to do here\n                }\n            }\n        }\n    }", "code_tokens": ["public", "static", "String", "extractSymbolicName", "(", "File", "jar", ")", "throws", "PluginExecutionException", "{", "JarFile", "jarFile", "=", "null", ";", "try", "{", "jarFile", "=", "new", "JarFile", "(", "jar", ")", ";", "return", "jarFile", ".", "getManifest", "(", ")", ".", "getMainAttributes", "(", ")", ".", "getValue", "(", "\"Bundle-SymbolicName\"", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "throw", "new", "PluginExecutionException", "(", "\"Could not load the jar \"", "+", "jar", ".", "getAbsolutePath", "(", ")", ",", "e", ")", ";", "}", "finally", "{", "if", "(", "jarFile", "!=", "null", ")", "{", "try", "{", "jarFile", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "// nothing to do here", "}", "}", "}", "}"], "docstring": "Extracts the bundle symbolic name from the jar manifest.\n\n@param jar\nthe jar from which the symbolic name will be extracted\n@return the Bundle-SymbolicName", "docstring_tokens": ["Extracts", "the", "bundle", "symbolic", "name", "from", "the", "jar", "manifest", "."], "sha": "24fc917383e9ff60ea6a42972c86577fe0f4591e", "url": "https://github.com/WASdev/ci.common/blob/24fc917383e9ff60ea6a42972c86577fe0f4591e/src/main/java/net/wasdev/wlp/common/plugins/util/InstallFeatureUtil.java#L833-L849", "partition": "test"}
{"repo": "DigitalPebble/storm-crawler", "path": "external/warc/src/main/java/com/digitalpebble/stormcrawler/warc/WARCRecordFormat.java", "func_name": "WARCRecordFormat.generateWARCInfo", "original_string": "public static byte[] generateWARCInfo(Map<String, String> fields) {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(WARC_VERSION);\n        buffer.append(CRLF);\n\n        buffer.append(\"WARC-Type: warcinfo\").append(CRLF);\n\n        String mainID = UUID.randomUUID().toString();\n\n        // retrieve the date and filename from the map\n        String date = fields.get(\"WARC-Date\");\n        buffer.append(\"WARC-Date: \").append(date).append(CRLF);\n\n        String filename = fields.get(\"WARC-Filename\");\n        buffer.append(\"WARC-Filename: \").append(filename).append(CRLF);\n\n        buffer.append(\"WARC-Record-ID\").append(\": \").append(\"<urn:uuid:\")\n                .append(mainID).append(\">\").append(CRLF);\n\n        buffer.append(\"Content-Type\").append(\": \")\n                .append(\"application/warc-fields\").append(CRLF);\n\n        StringBuilder fieldsBuffer = new StringBuilder();\n\n        // add WARC fields\n        // http://bibnum.bnf.fr/warc/WARC_ISO_28500_version1_latestdraft.pdf\n        Iterator<Entry<String, String>> iter = fields.entrySet().iterator();\n        while (iter.hasNext()) {\n            Entry<String, String> entry = iter.next();\n            String key = entry.getKey();\n            if (key.startsWith(\"WARC-\"))\n                continue;\n            fieldsBuffer.append(key).append(\": \").append(entry.getValue())\n                    .append(CRLF);\n        }\n\n        buffer.append(\"Content-Length\")\n                .append(\": \")\n                .append(fieldsBuffer.toString()\n                        .getBytes(StandardCharsets.UTF_8).length).append(CRLF);\n\n        buffer.append(CRLF);\n\n        buffer.append(fieldsBuffer.toString());\n\n        buffer.append(CRLF);\n        buffer.append(CRLF);\n\n        return buffer.toString().getBytes(StandardCharsets.UTF_8);\n    }", "language": "java", "code": "public static byte[] generateWARCInfo(Map<String, String> fields) {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(WARC_VERSION);\n        buffer.append(CRLF);\n\n        buffer.append(\"WARC-Type: warcinfo\").append(CRLF);\n\n        String mainID = UUID.randomUUID().toString();\n\n        // retrieve the date and filename from the map\n        String date = fields.get(\"WARC-Date\");\n        buffer.append(\"WARC-Date: \").append(date).append(CRLF);\n\n        String filename = fields.get(\"WARC-Filename\");\n        buffer.append(\"WARC-Filename: \").append(filename).append(CRLF);\n\n        buffer.append(\"WARC-Record-ID\").append(\": \").append(\"<urn:uuid:\")\n                .append(mainID).append(\">\").append(CRLF);\n\n        buffer.append(\"Content-Type\").append(\": \")\n                .append(\"application/warc-fields\").append(CRLF);\n\n        StringBuilder fieldsBuffer = new StringBuilder();\n\n        // add WARC fields\n        // http://bibnum.bnf.fr/warc/WARC_ISO_28500_version1_latestdraft.pdf\n        Iterator<Entry<String, String>> iter = fields.entrySet().iterator();\n        while (iter.hasNext()) {\n            Entry<String, String> entry = iter.next();\n            String key = entry.getKey();\n            if (key.startsWith(\"WARC-\"))\n                continue;\n            fieldsBuffer.append(key).append(\": \").append(entry.getValue())\n                    .append(CRLF);\n        }\n\n        buffer.append(\"Content-Length\")\n                .append(\": \")\n                .append(fieldsBuffer.toString()\n                        .getBytes(StandardCharsets.UTF_8).length).append(CRLF);\n\n        buffer.append(CRLF);\n\n        buffer.append(fieldsBuffer.toString());\n\n        buffer.append(CRLF);\n        buffer.append(CRLF);\n\n        return buffer.toString().getBytes(StandardCharsets.UTF_8);\n    }", "code_tokens": ["public", "static", "byte", "[", "]", "generateWARCInfo", "(", "Map", "<", "String", ",", "String", ">", "fields", ")", "{", "StringBuffer", "buffer", "=", "new", "StringBuffer", "(", ")", ";", "buffer", ".", "append", "(", "WARC_VERSION", ")", ";", "buffer", ".", "append", "(", "CRLF", ")", ";", "buffer", ".", "append", "(", "\"WARC-Type: warcinfo\"", ")", ".", "append", "(", "CRLF", ")", ";", "String", "mainID", "=", "UUID", ".", "randomUUID", "(", ")", ".", "toString", "(", ")", ";", "// retrieve the date and filename from the map", "String", "date", "=", "fields", ".", "get", "(", "\"WARC-Date\"", ")", ";", "buffer", ".", "append", "(", "\"WARC-Date: \"", ")", ".", "append", "(", "date", ")", ".", "append", "(", "CRLF", ")", ";", "String", "filename", "=", "fields", ".", "get", "(", "\"WARC-Filename\"", ")", ";", "buffer", ".", "append", "(", "\"WARC-Filename: \"", ")", ".", "append", "(", "filename", ")", ".", "append", "(", "CRLF", ")", ";", "buffer", ".", "append", "(", "\"WARC-Record-ID\"", ")", ".", "append", "(", "\": \"", ")", ".", "append", "(", "\"<urn:uuid:\"", ")", ".", "append", "(", "mainID", ")", ".", "append", "(", "\">\"", ")", ".", "append", "(", "CRLF", ")", ";", "buffer", ".", "append", "(", "\"Content-Type\"", ")", ".", "append", "(", "\": \"", ")", ".", "append", "(", "\"application/warc-fields\"", ")", ".", "append", "(", "CRLF", ")", ";", "StringBuilder", "fieldsBuffer", "=", "new", "StringBuilder", "(", ")", ";", "// add WARC fields", "// http://bibnum.bnf.fr/warc/WARC_ISO_28500_version1_latestdraft.pdf", "Iterator", "<", "Entry", "<", "String", ",", "String", ">", ">", "iter", "=", "fields", ".", "entrySet", "(", ")", ".", "iterator", "(", ")", ";", "while", "(", "iter", ".", "hasNext", "(", ")", ")", "{", "Entry", "<", "String", ",", "String", ">", "entry", "=", "iter", ".", "next", "(", ")", ";", "String", "key", "=", "entry", ".", "getKey", "(", ")", ";", "if", "(", "key", ".", "startsWith", "(", "\"WARC-\"", ")", ")", "continue", ";", "fieldsBuffer", ".", "append", "(", "key", ")", ".", "append", "(", "\": \"", ")", ".", "append", "(", "entry", ".", "getValue", "(", ")", ")", ".", "append", "(", "CRLF", ")", ";", "}", "buffer", ".", "append", "(", "\"Content-Length\"", ")", ".", "append", "(", "\": \"", ")", ".", "append", "(", "fieldsBuffer", ".", "toString", "(", ")", ".", "getBytes", "(", "StandardCharsets", ".", "UTF_8", ")", ".", "length", ")", ".", "append", "(", "CRLF", ")", ";", "buffer", ".", "append", "(", "CRLF", ")", ";", "buffer", ".", "append", "(", "fieldsBuffer", ".", "toString", "(", ")", ")", ";", "buffer", ".", "append", "(", "CRLF", ")", ";", "buffer", ".", "append", "(", "CRLF", ")", ";", "return", "buffer", ".", "toString", "(", ")", ".", "getBytes", "(", "StandardCharsets", ".", "UTF_8", ")", ";", "}"], "docstring": "Generates a WARC info entry which can be stored at the beginning of each\nWARC file.", "docstring_tokens": ["Generates", "a", "WARC", "info", "entry", "which", "can", "be", "stored", "at", "the", "beginning", "of", "each", "WARC", "file", "."], "sha": "5d0465192ab8fbd89a90db32cb20960a282411ea", "url": "https://github.com/DigitalPebble/storm-crawler/blob/5d0465192ab8fbd89a90db32cb20960a282411ea/external/warc/src/main/java/com/digitalpebble/stormcrawler/warc/WARCRecordFormat.java#L75-L124", "partition": "test"}
{"repo": "GlenKPeterson/Paguro", "path": "src/main/java/org/organicdesign/fp/function/LazyRef.java", "func_name": "LazyRef.of", "original_string": "public static <T> LazyRef<T> of(Fn0<T> producer) {\n        if (producer == null) {\n            throw new IllegalArgumentException(\"The producer function cannot be null (the value it returns can)\");\n        }\n        return new LazyRef<>(producer);\n    }", "language": "java", "code": "public static <T> LazyRef<T> of(Fn0<T> producer) {\n        if (producer == null) {\n            throw new IllegalArgumentException(\"The producer function cannot be null (the value it returns can)\");\n        }\n        return new LazyRef<>(producer);\n    }", "code_tokens": ["public", "static", "<", "T", ">", "LazyRef", "<", "T", ">", "of", "(", "Fn0", "<", "T", ">", "producer", ")", "{", "if", "(", "producer", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"The producer function cannot be null (the value it returns can)\"", ")", ";", "}", "return", "new", "LazyRef", "<>", "(", "producer", ")", ";", "}"], "docstring": "Construct a LazyRef from the given initialization function.\n\n@param producer a zero-argument function that produces the desired value when called.\n\n@return a LazyRef with the given producer.", "docstring_tokens": ["Construct", "a", "LazyRef", "from", "the", "given", "initialization", "function", "."], "sha": "eac0d64b2eb9496967334f635cdb270cffb2197b", "url": "https://github.com/GlenKPeterson/Paguro/blob/eac0d64b2eb9496967334f635cdb270cffb2197b/src/main/java/org/organicdesign/fp/function/LazyRef.java#L22-L27", "partition": "test"}
{"repo": "grzesiek-galezowski/AutoFixtureGenerator", "path": "src/main/java/autofixture/publicinterface/thirdpartysupport/AnyVavr.java", "func_name": "AnyVavr.validationSuccess", "original_string": "@NonNull\n  public static <T,U> Validation<T, U> validationSuccess(final Class<U> type) {\n    assertIsNotParameterized(type, msgInline(\"validationSuccess\"));\n    return Validation.valid(Any.instanceOf(type));\n  }", "language": "java", "code": "@NonNull\n  public static <T,U> Validation<T, U> validationSuccess(final Class<U> type) {\n    assertIsNotParameterized(type, msgInline(\"validationSuccess\"));\n    return Validation.valid(Any.instanceOf(type));\n  }", "code_tokens": ["@", "NonNull", "public", "static", "<", "T", ",", "U", ">", "Validation", "<", "T", ",", "U", ">", "validationSuccess", "(", "final", "Class", "<", "U", ">", "type", ")", "{", "assertIsNotParameterized", "(", "type", ",", "msgInline", "(", "\"validationSuccess\"", ")", ")", ";", "return", "Validation", ".", "valid", "(", "Any", ".", "instanceOf", "(", "type", ")", ")", ";", "}"], "docstring": "validations - successful", "docstring_tokens": ["validations", "-", "successful"], "sha": "a5e1146ec5109e6505f8aff604a20461ec86a57d", "url": "https://github.com/grzesiek-galezowski/AutoFixtureGenerator/blob/a5e1146ec5109e6505f8aff604a20461ec86a57d/src/main/java/autofixture/publicinterface/thirdpartysupport/AnyVavr.java#L283-L287", "partition": "test"}
{"repo": "orientechnologies/orientdb", "path": "server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedConfiguration.java", "func_name": "ODistributedConfiguration.getGlobalReadQuorum", "original_string": "public Object getGlobalReadQuorum(final String iClusterName) {\n    Object value = getClusterConfiguration(iClusterName).field(READ_QUORUM);\n    if (value == null)\n      value = configuration.field(READ_QUORUM);\n    return value;\n  }", "language": "java", "code": "public Object getGlobalReadQuorum(final String iClusterName) {\n    Object value = getClusterConfiguration(iClusterName).field(READ_QUORUM);\n    if (value == null)\n      value = configuration.field(READ_QUORUM);\n    return value;\n  }", "code_tokens": ["public", "Object", "getGlobalReadQuorum", "(", "final", "String", "iClusterName", ")", "{", "Object", "value", "=", "getClusterConfiguration", "(", "iClusterName", ")", ".", "field", "(", "READ_QUORUM", ")", ";", "if", "(", "value", "==", "null", ")", "value", "=", "configuration", ".", "field", "(", "READ_QUORUM", ")", ";", "return", "value", ";", "}"], "docstring": "Returns the global read quorum.\n\n@param iClusterName Cluster name, or null for *", "docstring_tokens": ["Returns", "the", "global", "read", "quorum", "."], "sha": "d970b12033f0462f0239ea0ad8ed41207e6e26f1", "url": "https://github.com/orientechnologies/orientdb/blob/d970b12033f0462f0239ea0ad8ed41207e6e26f1/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedConfiguration.java#L693-L698", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/internal/util/AppendOnlyLinkedArrayList.java", "func_name": "AppendOnlyLinkedArrayList.accept", "original_string": "public <U> boolean accept(Subscriber<? super U> subscriber) {\n        Object[] a = head;\n        final int c = capacity;\n        while (a != null) {\n            for (int i = 0; i < c; i++) {\n                Object o = a[i];\n                if (o == null) {\n                    break;\n                }\n\n                if (NotificationLite.acceptFull(o, subscriber)) {\n                    return true;\n                }\n            }\n            a = (Object[])a[c];\n        }\n        return false;\n    }", "language": "java", "code": "public <U> boolean accept(Subscriber<? super U> subscriber) {\n        Object[] a = head;\n        final int c = capacity;\n        while (a != null) {\n            for (int i = 0; i < c; i++) {\n                Object o = a[i];\n                if (o == null) {\n                    break;\n                }\n\n                if (NotificationLite.acceptFull(o, subscriber)) {\n                    return true;\n                }\n            }\n            a = (Object[])a[c];\n        }\n        return false;\n    }", "code_tokens": ["public", "<", "U", ">", "boolean", "accept", "(", "Subscriber", "<", "?", "super", "U", ">", "subscriber", ")", "{", "Object", "[", "]", "a", "=", "head", ";", "final", "int", "c", "=", "capacity", ";", "while", "(", "a", "!=", "null", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "c", ";", "i", "++", ")", "{", "Object", "o", "=", "a", "[", "i", "]", ";", "if", "(", "o", "==", "null", ")", "{", "break", ";", "}", "if", "(", "NotificationLite", ".", "acceptFull", "(", "o", ",", "subscriber", ")", ")", "{", "return", "true", ";", "}", "}", "a", "=", "(", "Object", "[", "]", ")", "a", "[", "c", "]", ";", "}", "return", "false", ";", "}"], "docstring": "Interprets the contents as NotificationLite objects and calls\nthe appropriate Subscriber method.\n\n@param <U> the target type\n@param subscriber the subscriber to emit the events to\n@return true if a terminal event has been reached", "docstring_tokens": ["Interprets", "the", "contents", "as", "NotificationLite", "objects", "and", "calls", "the", "appropriate", "Subscriber", "method", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/internal/util/AppendOnlyLinkedArrayList.java#L109-L126", "partition": "test"}
{"repo": "TooTallNate/Java-WebSocket", "path": "src/main/java/org/java_websocket/server/WebSocketServer.java", "func_name": "WebSocketServer.doAdditionalRead", "original_string": "private void doAdditionalRead() throws InterruptedException, IOException {\n\t\tWebSocketImpl conn;\n\t\twhile ( !iqueue.isEmpty() ) {\n\t\t\tconn = iqueue.remove( 0 );\n\t\t\tWrappedByteChannel c = ( (WrappedByteChannel) conn.getChannel() );\n\t\t\tByteBuffer buf = takeBuffer();\n\t\t\ttry {\n\t\t\t\tif( SocketChannelIOHelper.readMore( buf, conn, c ) )\n\t\t\t\t\tiqueue.add( conn );\n\t\t\t\tif( buf.hasRemaining() ) {\n\t\t\t\t\tconn.inQueue.put( buf );\n\t\t\t\t\tqueue( conn );\n\t\t\t\t} else {\n\t\t\t\t\tpushBuffer( buf );\n\t\t\t\t}\n\t\t\t} catch ( IOException e ) {\n\t\t\t\tpushBuffer( buf );\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "private void doAdditionalRead() throws InterruptedException, IOException {\n\t\tWebSocketImpl conn;\n\t\twhile ( !iqueue.isEmpty() ) {\n\t\t\tconn = iqueue.remove( 0 );\n\t\t\tWrappedByteChannel c = ( (WrappedByteChannel) conn.getChannel() );\n\t\t\tByteBuffer buf = takeBuffer();\n\t\t\ttry {\n\t\t\t\tif( SocketChannelIOHelper.readMore( buf, conn, c ) )\n\t\t\t\t\tiqueue.add( conn );\n\t\t\t\tif( buf.hasRemaining() ) {\n\t\t\t\t\tconn.inQueue.put( buf );\n\t\t\t\t\tqueue( conn );\n\t\t\t\t} else {\n\t\t\t\t\tpushBuffer( buf );\n\t\t\t\t}\n\t\t\t} catch ( IOException e ) {\n\t\t\t\tpushBuffer( buf );\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["private", "void", "doAdditionalRead", "(", ")", "throws", "InterruptedException", ",", "IOException", "{", "WebSocketImpl", "conn", ";", "while", "(", "!", "iqueue", ".", "isEmpty", "(", ")", ")", "{", "conn", "=", "iqueue", ".", "remove", "(", "0", ")", ";", "WrappedByteChannel", "c", "=", "(", "(", "WrappedByteChannel", ")", "conn", ".", "getChannel", "(", ")", ")", ";", "ByteBuffer", "buf", "=", "takeBuffer", "(", ")", ";", "try", "{", "if", "(", "SocketChannelIOHelper", ".", "readMore", "(", "buf", ",", "conn", ",", "c", ")", ")", "iqueue", ".", "add", "(", "conn", ")", ";", "if", "(", "buf", ".", "hasRemaining", "(", ")", ")", "{", "conn", ".", "inQueue", ".", "put", "(", "buf", ")", ";", "queue", "(", "conn", ")", ";", "}", "else", "{", "pushBuffer", "(", "buf", ")", ";", "}", "}", "catch", "(", "IOException", "e", ")", "{", "pushBuffer", "(", "buf", ")", ";", "throw", "e", ";", "}", "}", "}"], "docstring": "Do an additional read\n@throws InterruptedException thrown by taking a buffer\n@throws IOException if an error happened during read", "docstring_tokens": ["Do", "an", "additional", "read"], "sha": "73c6805ca2c7801b2828ffd3ec12e5cb0daefcf9", "url": "https://github.com/TooTallNate/Java-WebSocket/blob/73c6805ca2c7801b2828ffd3ec12e5cb0daefcf9/src/main/java/org/java_websocket/server/WebSocketServer.java#L383-L403", "partition": "test"}
{"repo": "Unidata/thredds", "path": "ui/src/main/java/thredds/ui/catalog/CatalogTreeView.java", "func_name": "CatalogTreeView.setSelectedDataset", "original_string": "public void setSelectedDataset(Dataset ds) {\n    if (ds == null) return;\n    TreePath path = makePath(ds);\n    if (path == null) return;\n    tree.setSelectionPath( path);\n    tree.scrollPathToVisible( path);\n  }", "language": "java", "code": "public void setSelectedDataset(Dataset ds) {\n    if (ds == null) return;\n    TreePath path = makePath(ds);\n    if (path == null) return;\n    tree.setSelectionPath( path);\n    tree.scrollPathToVisible( path);\n  }", "code_tokens": ["public", "void", "setSelectedDataset", "(", "Dataset", "ds", ")", "{", "if", "(", "ds", "==", "null", ")", "return", ";", "TreePath", "path", "=", "makePath", "(", "ds", ")", ";", "if", "(", "path", "==", "null", ")", "return", ";", "tree", ".", "setSelectionPath", "(", "path", ")", ";", "tree", ".", "scrollPathToVisible", "(", "path", ")", ";", "}"], "docstring": "Set the currently selected InvDataset.\n@param ds select this InvDataset, must be already in the tree.\nLOOK does this work ?? doesnt throw event", "docstring_tokens": ["Set", "the", "currently", "selected", "InvDataset", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/ui/src/main/java/thredds/ui/catalog/CatalogTreeView.java#L218-L224", "partition": "test"}
{"repo": "Netflix/hollow", "path": "hollow/src/main/java/com/netflix/hollow/api/codegen/HollowAPIGenerator.java", "func_name": "HollowAPIGenerator.hasCollectionsInDataSet", "original_string": "protected static boolean hasCollectionsInDataSet(HollowDataset dataset) {\n        for(HollowSchema schema : dataset.getSchemas()) {\n            if ((schema instanceof HollowListSchema) ||\n                    (schema instanceof HollowSetSchema) ||\n                    (schema instanceof HollowMapSchema)) {\n                return true;\n            }\n        }\n        return false;\n    }", "language": "java", "code": "protected static boolean hasCollectionsInDataSet(HollowDataset dataset) {\n        for(HollowSchema schema : dataset.getSchemas()) {\n            if ((schema instanceof HollowListSchema) ||\n                    (schema instanceof HollowSetSchema) ||\n                    (schema instanceof HollowMapSchema)) {\n                return true;\n            }\n        }\n        return false;\n    }", "code_tokens": ["protected", "static", "boolean", "hasCollectionsInDataSet", "(", "HollowDataset", "dataset", ")", "{", "for", "(", "HollowSchema", "schema", ":", "dataset", ".", "getSchemas", "(", ")", ")", "{", "if", "(", "(", "schema", "instanceof", "HollowListSchema", ")", "||", "(", "schema", "instanceof", "HollowSetSchema", ")", "||", "(", "schema", "instanceof", "HollowMapSchema", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Determines whether DataSet contains any collections schema\n@param dataset the data set\n@return {@code true} if the data set contains any collections schema", "docstring_tokens": ["Determines", "whether", "DataSet", "contains", "any", "collections", "schema"], "sha": "43ca100034a01050fb764170bd32b085ac9a3c22", "url": "https://github.com/Netflix/hollow/blob/43ca100034a01050fb764170bd32b085ac9a3c22/hollow/src/main/java/com/netflix/hollow/api/codegen/HollowAPIGenerator.java#L288-L297", "partition": "test"}
{"repo": "Unidata/thredds", "path": "cdm/src/main/java/ucar/nc2/iosp/nids/Nidsheader.java", "func_name": "Nidsheader.pcode_12n13n14", "original_string": "int pcode_12n13n14( int[] pos, int[] dlen, int hoff, int len, boolean isZ, String structName, int code )\r\n    {\r\n       //int vlen = len;\r\n\r\n        int vlen = 0;\r\n        for(int i=0; i<len; i++ ){\r\n           vlen = vlen + dlen[i];\r\n        }\r\n\r\n        ArrayList dims =  new ArrayList();\r\n        Dimension sDim = new Dimension(\"graphicSymbolSize\", vlen);\r\n        ncfile.addDimension( null, sDim);\r\n        dims.add( sDim);\r\n\r\n        Structure dist = new Structure(ncfile, null, null, structName);\r\n        dist.setDimensions(dims);\r\n        ncfile.addVariable(null, dist);\r\n        dist.addAttribute( new Attribute(CDM.LONG_NAME, \"special graphic symbol for code \"+code));\r\n\r\n\r\n        Variable i0 = new Variable(ncfile, null, dist, \"x_start\");\r\n        i0.setDimensions((String)null);\r\n        i0.setDataType(DataType.FLOAT);\r\n        i0.addAttribute( new Attribute(CDM.UNITS, \"KM\"));\r\n        dist.addMemberVariable(i0);\r\n        Variable j0 = new Variable(ncfile, null, dist, \"y_start\");\r\n        j0.setDimensions((String)null);\r\n        j0.setDataType(DataType.FLOAT);\r\n        j0.addAttribute( new Attribute(CDM.UNITS, \"KM\"));\r\n        dist.addMemberVariable(j0);\r\n\r\n\r\n       int[] pos1 = new int[len];\r\n       int[] dlen1 = new int[len];\r\n       System.arraycopy(dlen, 0, dlen1, 0, len);\r\n       System.arraycopy(pos, 0, pos1, 0, len);\r\n       dist.setSPobject( new Vinfo ( 0, 0, 0, 0, hoff, 0, isR, isZ, pos1, dlen1, code, 0));\r\n       return 1;\r\n     }", "language": "java", "code": "int pcode_12n13n14( int[] pos, int[] dlen, int hoff, int len, boolean isZ, String structName, int code )\r\n    {\r\n       //int vlen = len;\r\n\r\n        int vlen = 0;\r\n        for(int i=0; i<len; i++ ){\r\n           vlen = vlen + dlen[i];\r\n        }\r\n\r\n        ArrayList dims =  new ArrayList();\r\n        Dimension sDim = new Dimension(\"graphicSymbolSize\", vlen);\r\n        ncfile.addDimension( null, sDim);\r\n        dims.add( sDim);\r\n\r\n        Structure dist = new Structure(ncfile, null, null, structName);\r\n        dist.setDimensions(dims);\r\n        ncfile.addVariable(null, dist);\r\n        dist.addAttribute( new Attribute(CDM.LONG_NAME, \"special graphic symbol for code \"+code));\r\n\r\n\r\n        Variable i0 = new Variable(ncfile, null, dist, \"x_start\");\r\n        i0.setDimensions((String)null);\r\n        i0.setDataType(DataType.FLOAT);\r\n        i0.addAttribute( new Attribute(CDM.UNITS, \"KM\"));\r\n        dist.addMemberVariable(i0);\r\n        Variable j0 = new Variable(ncfile, null, dist, \"y_start\");\r\n        j0.setDimensions((String)null);\r\n        j0.setDataType(DataType.FLOAT);\r\n        j0.addAttribute( new Attribute(CDM.UNITS, \"KM\"));\r\n        dist.addMemberVariable(j0);\r\n\r\n\r\n       int[] pos1 = new int[len];\r\n       int[] dlen1 = new int[len];\r\n       System.arraycopy(dlen, 0, dlen1, 0, len);\r\n       System.arraycopy(pos, 0, pos1, 0, len);\r\n       dist.setSPobject( new Vinfo ( 0, 0, 0, 0, hoff, 0, isR, isZ, pos1, dlen1, code, 0));\r\n       return 1;\r\n     }", "code_tokens": ["int", "pcode_12n13n14", "(", "int", "[", "]", "pos", ",", "int", "[", "]", "dlen", ",", "int", "hoff", ",", "int", "len", ",", "boolean", "isZ", ",", "String", "structName", ",", "int", "code", ")", "{", "//int vlen = len;\r", "int", "vlen", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "len", ";", "i", "++", ")", "{", "vlen", "=", "vlen", "+", "dlen", "[", "i", "]", ";", "}", "ArrayList", "dims", "=", "new", "ArrayList", "(", ")", ";", "Dimension", "sDim", "=", "new", "Dimension", "(", "\"graphicSymbolSize\"", ",", "vlen", ")", ";", "ncfile", ".", "addDimension", "(", "null", ",", "sDim", ")", ";", "dims", ".", "add", "(", "sDim", ")", ";", "Structure", "dist", "=", "new", "Structure", "(", "ncfile", ",", "null", ",", "null", ",", "structName", ")", ";", "dist", ".", "setDimensions", "(", "dims", ")", ";", "ncfile", ".", "addVariable", "(", "null", ",", "dist", ")", ";", "dist", ".", "addAttribute", "(", "new", "Attribute", "(", "CDM", ".", "LONG_NAME", ",", "\"special graphic symbol for code \"", "+", "code", ")", ")", ";", "Variable", "i0", "=", "new", "Variable", "(", "ncfile", ",", "null", ",", "dist", ",", "\"x_start\"", ")", ";", "i0", ".", "setDimensions", "(", "(", "String", ")", "null", ")", ";", "i0", ".", "setDataType", "(", "DataType", ".", "FLOAT", ")", ";", "i0", ".", "addAttribute", "(", "new", "Attribute", "(", "CDM", ".", "UNITS", ",", "\"KM\"", ")", ")", ";", "dist", ".", "addMemberVariable", "(", "i0", ")", ";", "Variable", "j0", "=", "new", "Variable", "(", "ncfile", ",", "null", ",", "dist", ",", "\"y_start\"", ")", ";", "j0", ".", "setDimensions", "(", "(", "String", ")", "null", ")", ";", "j0", ".", "setDataType", "(", "DataType", ".", "FLOAT", ")", ";", "j0", ".", "addAttribute", "(", "new", "Attribute", "(", "CDM", ".", "UNITS", ",", "\"KM\"", ")", ")", ";", "dist", ".", "addMemberVariable", "(", "j0", ")", ";", "int", "[", "]", "pos1", "=", "new", "int", "[", "len", "]", ";", "int", "[", "]", "dlen1", "=", "new", "int", "[", "len", "]", ";", "System", ".", "arraycopy", "(", "dlen", ",", "0", ",", "dlen1", ",", "0", ",", "len", ")", ";", "System", ".", "arraycopy", "(", "pos", ",", "0", ",", "pos1", ",", "0", ",", "len", ")", ";", "dist", ".", "setSPobject", "(", "new", "Vinfo", "(", "0", ",", "0", ",", "0", ",", "0", ",", "hoff", ",", "0", ",", "isR", ",", "isZ", ",", "pos1", ",", "dlen1", ",", "code", ",", "0", ")", ")", ";", "return", "1", ";", "}"], "docstring": "construct a dataset for special graphic symbol packet with code 12, 13, and 14\n\n\n@param pos, dlen, hoff, len, isZ, structName, code\n\n@return  1 if successful", "docstring_tokens": ["construct", "a", "dataset", "for", "special", "graphic", "symbol", "packet", "with", "code", "12", "13", "and", "14"], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/cdm/src/main/java/ucar/nc2/iosp/nids/Nidsheader.java#L924-L962", "partition": "test"}
{"repo": "artclarke/humble-video", "path": "humble-video-noarch/src/main/java/io/humble/video/Codec.java", "func_name": "Codec.getSupportedAudioFormats", "original_string": "public java.util.Collection<AudioFormat.Type>\n  getSupportedAudioFormats()\n  {\n    java.util.List<AudioFormat.Type> retval =\n      new java.util.LinkedList<AudioFormat.Type>();\n    int count = getNumSupportedAudioFormats();\n    for(int i=0;i<count;i++)\n    {\n      AudioFormat.Type fmt = getSupportedAudioFormat(i);\n      if (fmt != null && fmt != AudioFormat.Type.SAMPLE_FMT_NONE)\n        retval.add(fmt);\n    }\n    return retval;\n  }", "language": "java", "code": "public java.util.Collection<AudioFormat.Type>\n  getSupportedAudioFormats()\n  {\n    java.util.List<AudioFormat.Type> retval =\n      new java.util.LinkedList<AudioFormat.Type>();\n    int count = getNumSupportedAudioFormats();\n    for(int i=0;i<count;i++)\n    {\n      AudioFormat.Type fmt = getSupportedAudioFormat(i);\n      if (fmt != null && fmt != AudioFormat.Type.SAMPLE_FMT_NONE)\n        retval.add(fmt);\n    }\n    return retval;\n  }", "code_tokens": ["public", "java", ".", "util", ".", "Collection", "<", "AudioFormat", ".", "Type", ">", "getSupportedAudioFormats", "(", ")", "{", "java", ".", "util", ".", "List", "<", "AudioFormat", ".", "Type", ">", "retval", "=", "new", "java", ".", "util", ".", "LinkedList", "<", "AudioFormat", ".", "Type", ">", "(", ")", ";", "int", "count", "=", "getNumSupportedAudioFormats", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "count", ";", "i", "++", ")", "{", "AudioFormat", ".", "Type", "fmt", "=", "getSupportedAudioFormat", "(", "i", ")", ";", "if", "(", "fmt", "!=", "null", "&&", "fmt", "!=", "AudioFormat", ".", "Type", ".", "SAMPLE_FMT_NONE", ")", "retval", ".", "add", "(", "fmt", ")", ";", "}", "return", "retval", ";", "}"], "docstring": "Returns a list of supported audio sample formats this codec can encode\naudio in.\n\n<p>\n\nNot all codecs support reporting this, in which case the returned list\nwill be empty.\n\n</p>\n\n@return a list", "docstring_tokens": ["Returns", "a", "list", "of", "supported", "audio", "sample", "formats", "this", "codec", "can", "encode", "audio", "in", "."], "sha": "aa349ae2d7ef74160b7074feac8d298cf90394d1", "url": "https://github.com/artclarke/humble-video/blob/aa349ae2d7ef74160b7074feac8d298cf90394d1/humble-video-noarch/src/main/java/io/humble/video/Codec.java#L255-L268", "partition": "test"}
{"repo": "Unidata/thredds", "path": "legacy/src/main/java/thredds/catalog/parser/jdom/InvCatalogFactory10.java", "func_name": "InvCatalogFactory10.readDatasetScan", "original_string": "protected InvDatasetScan readDatasetScan(InvCatalogImpl catalog, InvDatasetImpl parent, Element dsElem, URI base) {\n    InvDatasetScan datasetScan;\n\n    if (dsElem.getAttributeValue(\"dirLocation\") == null) {\n      if (dsElem.getAttributeValue(\"location\") == null) {\n        logger.error(\"readDatasetScan(): datasetScan has neither a \\\"location\\\" nor a \\\"dirLocation\\\" attribute.\");\n        datasetScan = null;\n      } else {\n        return readDatasetScanNew(catalog, parent, dsElem, base);\n      }\n    } else {\n      String name = dsElem.getAttributeValue(\"name\");\n      factory.appendWarning(\"**Warning: Dataset \" + name + \" using old form of DatasetScan (dirLocation instead of location)\\n\");\n\n      String path = dsElem.getAttributeValue(\"path\");\n\n      String scanDir = expandAliasForPath(dsElem.getAttributeValue(\"dirLocation\"));\n      String filter = dsElem.getAttributeValue(\"filter\");\n      String addDatasetSizeString = dsElem.getAttributeValue(\"addDatasetSize\");\n      String addLatest = dsElem.getAttributeValue(\"addLatest\");\n      String sortOrderIncreasingString = dsElem.getAttributeValue(\"sortOrderIncreasing\");\n      boolean sortOrderIncreasing = false;\n      if (sortOrderIncreasingString != null)\n        if (sortOrderIncreasingString.equalsIgnoreCase(\"true\"))\n          sortOrderIncreasing = true;\n      boolean addDatasetSize = true;\n      if (addDatasetSizeString != null)\n        if (addDatasetSizeString.equalsIgnoreCase(\"false\"))\n          addDatasetSize = false;\n\n      if (path != null) {\n        if (path.charAt(0) == '/') path = path.substring(1);\n        int last = path.length() - 1;\n        if (path.charAt(last) == '/') path = path.substring(0, last);\n      }\n\n      if (scanDir != null) {\n        int last = scanDir.length() - 1;\n        if (scanDir.charAt(last) != '/') scanDir = scanDir + '/';\n      }\n\n      Element atcElem = dsElem.getChild(\"addTimeCoverage\", defNS);\n      String dsNameMatchPattern = null;\n      String startTimeSubstitutionPattern = null;\n      String duration = null;\n      if (atcElem != null) {\n        dsNameMatchPattern = atcElem.getAttributeValue(\"datasetNameMatchPattern\");\n        startTimeSubstitutionPattern = atcElem.getAttributeValue(\"startTimeSubstitutionPattern\");\n        duration = atcElem.getAttributeValue(\"duration\");\n      }\n\n      try {\n        datasetScan = new InvDatasetScan(catalog, parent, name, path, scanDir, filter, addDatasetSize, addLatest, sortOrderIncreasing,\n                dsNameMatchPattern, startTimeSubstitutionPattern, duration);\n        readDatasetInfo(catalog, datasetScan, dsElem, base);\n        if (InvCatalogFactory.debugXML) System.out.println(\" Dataset added: \" + datasetScan.dump());\n\n      } catch (Exception e) {\n        logger.error(\"Reading DatasetScan\", e);\n        datasetScan = null;\n      }\n    }\n\n    return datasetScan;\n  }", "language": "java", "code": "protected InvDatasetScan readDatasetScan(InvCatalogImpl catalog, InvDatasetImpl parent, Element dsElem, URI base) {\n    InvDatasetScan datasetScan;\n\n    if (dsElem.getAttributeValue(\"dirLocation\") == null) {\n      if (dsElem.getAttributeValue(\"location\") == null) {\n        logger.error(\"readDatasetScan(): datasetScan has neither a \\\"location\\\" nor a \\\"dirLocation\\\" attribute.\");\n        datasetScan = null;\n      } else {\n        return readDatasetScanNew(catalog, parent, dsElem, base);\n      }\n    } else {\n      String name = dsElem.getAttributeValue(\"name\");\n      factory.appendWarning(\"**Warning: Dataset \" + name + \" using old form of DatasetScan (dirLocation instead of location)\\n\");\n\n      String path = dsElem.getAttributeValue(\"path\");\n\n      String scanDir = expandAliasForPath(dsElem.getAttributeValue(\"dirLocation\"));\n      String filter = dsElem.getAttributeValue(\"filter\");\n      String addDatasetSizeString = dsElem.getAttributeValue(\"addDatasetSize\");\n      String addLatest = dsElem.getAttributeValue(\"addLatest\");\n      String sortOrderIncreasingString = dsElem.getAttributeValue(\"sortOrderIncreasing\");\n      boolean sortOrderIncreasing = false;\n      if (sortOrderIncreasingString != null)\n        if (sortOrderIncreasingString.equalsIgnoreCase(\"true\"))\n          sortOrderIncreasing = true;\n      boolean addDatasetSize = true;\n      if (addDatasetSizeString != null)\n        if (addDatasetSizeString.equalsIgnoreCase(\"false\"))\n          addDatasetSize = false;\n\n      if (path != null) {\n        if (path.charAt(0) == '/') path = path.substring(1);\n        int last = path.length() - 1;\n        if (path.charAt(last) == '/') path = path.substring(0, last);\n      }\n\n      if (scanDir != null) {\n        int last = scanDir.length() - 1;\n        if (scanDir.charAt(last) != '/') scanDir = scanDir + '/';\n      }\n\n      Element atcElem = dsElem.getChild(\"addTimeCoverage\", defNS);\n      String dsNameMatchPattern = null;\n      String startTimeSubstitutionPattern = null;\n      String duration = null;\n      if (atcElem != null) {\n        dsNameMatchPattern = atcElem.getAttributeValue(\"datasetNameMatchPattern\");\n        startTimeSubstitutionPattern = atcElem.getAttributeValue(\"startTimeSubstitutionPattern\");\n        duration = atcElem.getAttributeValue(\"duration\");\n      }\n\n      try {\n        datasetScan = new InvDatasetScan(catalog, parent, name, path, scanDir, filter, addDatasetSize, addLatest, sortOrderIncreasing,\n                dsNameMatchPattern, startTimeSubstitutionPattern, duration);\n        readDatasetInfo(catalog, datasetScan, dsElem, base);\n        if (InvCatalogFactory.debugXML) System.out.println(\" Dataset added: \" + datasetScan.dump());\n\n      } catch (Exception e) {\n        logger.error(\"Reading DatasetScan\", e);\n        datasetScan = null;\n      }\n    }\n\n    return datasetScan;\n  }", "code_tokens": ["protected", "InvDatasetScan", "readDatasetScan", "(", "InvCatalogImpl", "catalog", ",", "InvDatasetImpl", "parent", ",", "Element", "dsElem", ",", "URI", "base", ")", "{", "InvDatasetScan", "datasetScan", ";", "if", "(", "dsElem", ".", "getAttributeValue", "(", "\"dirLocation\"", ")", "==", "null", ")", "{", "if", "(", "dsElem", ".", "getAttributeValue", "(", "\"location\"", ")", "==", "null", ")", "{", "logger", ".", "error", "(", "\"readDatasetScan(): datasetScan has neither a \\\"location\\\" nor a \\\"dirLocation\\\" attribute.\"", ")", ";", "datasetScan", "=", "null", ";", "}", "else", "{", "return", "readDatasetScanNew", "(", "catalog", ",", "parent", ",", "dsElem", ",", "base", ")", ";", "}", "}", "else", "{", "String", "name", "=", "dsElem", ".", "getAttributeValue", "(", "\"name\"", ")", ";", "factory", ".", "appendWarning", "(", "\"**Warning: Dataset \"", "+", "name", "+", "\" using old form of DatasetScan (dirLocation instead of location)\\n\"", ")", ";", "String", "path", "=", "dsElem", ".", "getAttributeValue", "(", "\"path\"", ")", ";", "String", "scanDir", "=", "expandAliasForPath", "(", "dsElem", ".", "getAttributeValue", "(", "\"dirLocation\"", ")", ")", ";", "String", "filter", "=", "dsElem", ".", "getAttributeValue", "(", "\"filter\"", ")", ";", "String", "addDatasetSizeString", "=", "dsElem", ".", "getAttributeValue", "(", "\"addDatasetSize\"", ")", ";", "String", "addLatest", "=", "dsElem", ".", "getAttributeValue", "(", "\"addLatest\"", ")", ";", "String", "sortOrderIncreasingString", "=", "dsElem", ".", "getAttributeValue", "(", "\"sortOrderIncreasing\"", ")", ";", "boolean", "sortOrderIncreasing", "=", "false", ";", "if", "(", "sortOrderIncreasingString", "!=", "null", ")", "if", "(", "sortOrderIncreasingString", ".", "equalsIgnoreCase", "(", "\"true\"", ")", ")", "sortOrderIncreasing", "=", "true", ";", "boolean", "addDatasetSize", "=", "true", ";", "if", "(", "addDatasetSizeString", "!=", "null", ")", "if", "(", "addDatasetSizeString", ".", "equalsIgnoreCase", "(", "\"false\"", ")", ")", "addDatasetSize", "=", "false", ";", "if", "(", "path", "!=", "null", ")", "{", "if", "(", "path", ".", "charAt", "(", "0", ")", "==", "'", "'", ")", "path", "=", "path", ".", "substring", "(", "1", ")", ";", "int", "last", "=", "path", ".", "length", "(", ")", "-", "1", ";", "if", "(", "path", ".", "charAt", "(", "last", ")", "==", "'", "'", ")", "path", "=", "path", ".", "substring", "(", "0", ",", "last", ")", ";", "}", "if", "(", "scanDir", "!=", "null", ")", "{", "int", "last", "=", "scanDir", ".", "length", "(", ")", "-", "1", ";", "if", "(", "scanDir", ".", "charAt", "(", "last", ")", "!=", "'", "'", ")", "scanDir", "=", "scanDir", "+", "'", "'", ";", "}", "Element", "atcElem", "=", "dsElem", ".", "getChild", "(", "\"addTimeCoverage\"", ",", "defNS", ")", ";", "String", "dsNameMatchPattern", "=", "null", ";", "String", "startTimeSubstitutionPattern", "=", "null", ";", "String", "duration", "=", "null", ";", "if", "(", "atcElem", "!=", "null", ")", "{", "dsNameMatchPattern", "=", "atcElem", ".", "getAttributeValue", "(", "\"datasetNameMatchPattern\"", ")", ";", "startTimeSubstitutionPattern", "=", "atcElem", ".", "getAttributeValue", "(", "\"startTimeSubstitutionPattern\"", ")", ";", "duration", "=", "atcElem", ".", "getAttributeValue", "(", "\"duration\"", ")", ";", "}", "try", "{", "datasetScan", "=", "new", "InvDatasetScan", "(", "catalog", ",", "parent", ",", "name", ",", "path", ",", "scanDir", ",", "filter", ",", "addDatasetSize", ",", "addLatest", ",", "sortOrderIncreasing", ",", "dsNameMatchPattern", ",", "startTimeSubstitutionPattern", ",", "duration", ")", ";", "readDatasetInfo", "(", "catalog", ",", "datasetScan", ",", "dsElem", ",", "base", ")", ";", "if", "(", "InvCatalogFactory", ".", "debugXML", ")", "System", ".", "out", ".", "println", "(", "\" Dataset added: \"", "+", "datasetScan", ".", "dump", "(", ")", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "error", "(", "\"Reading DatasetScan\"", ",", "e", ")", ";", "datasetScan", "=", "null", ";", "}", "}", "return", "datasetScan", ";", "}"], "docstring": "read a dataset scan element", "docstring_tokens": ["read", "a", "dataset", "scan", "element"], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/legacy/src/main/java/thredds/catalog/parser/jdom/InvCatalogFactory10.java#L359-L423", "partition": "test"}
{"repo": "Unidata/thredds", "path": "cdm/src/main/java/ucar/nc2/units/SimpleUnit.java", "func_name": "SimpleUnit.factory", "original_string": "static public SimpleUnit factory(String name) {\n    try {\n      return factoryWithExceptions(name);\n    } catch (Exception e) {\n      if (debugParse) System.out.println(\"Parse \" + name + \" got Exception \" + e);\n      return null;\n    }\n  }", "language": "java", "code": "static public SimpleUnit factory(String name) {\n    try {\n      return factoryWithExceptions(name);\n    } catch (Exception e) {\n      if (debugParse) System.out.println(\"Parse \" + name + \" got Exception \" + e);\n      return null;\n    }\n  }", "code_tokens": ["static", "public", "SimpleUnit", "factory", "(", "String", "name", ")", "{", "try", "{", "return", "factoryWithExceptions", "(", "name", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "if", "(", "debugParse", ")", "System", ".", "out", ".", "println", "(", "\"Parse \"", "+", "name", "+", "\" got Exception \"", "+", "e", ")", ";", "return", "null", ";", "}", "}"], "docstring": "Create a SimpleUnit from the given name, catch Exceptions.\n\n@param name parse this name to create a unit.\n@return SimpleUnit, DateUnit, TimeUnit, or null if failed\n@see ucar.units.UnitFormat#parse", "docstring_tokens": ["Create", "a", "SimpleUnit", "from", "the", "given", "name", "catch", "Exceptions", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/cdm/src/main/java/ucar/nc2/units/SimpleUnit.java#L60-L67", "partition": "test"}
{"repo": "orientechnologies/orientdb", "path": "core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/statistic/OSessionStoragePerformanceStatistic.java", "func_name": "OSessionStoragePerformanceStatistic.stopWALFlushTimer", "original_string": "public void stopWALFlushTimer() {\n    final long endTs = nanoTimer.getNano();\n    final long timeDiff = (endTs - timeStamps.pop());\n\n    if (walCountersHolder == null)\n      walCountersHolder = new WALCountersHolder();\n\n    walCountersHolder.flushCount++;\n    walCountersHolder.flushTime += timeDiff;\n\n    makeSnapshotIfNeeded(endTs);\n  }", "language": "java", "code": "public void stopWALFlushTimer() {\n    final long endTs = nanoTimer.getNano();\n    final long timeDiff = (endTs - timeStamps.pop());\n\n    if (walCountersHolder == null)\n      walCountersHolder = new WALCountersHolder();\n\n    walCountersHolder.flushCount++;\n    walCountersHolder.flushTime += timeDiff;\n\n    makeSnapshotIfNeeded(endTs);\n  }", "code_tokens": ["public", "void", "stopWALFlushTimer", "(", ")", "{", "final", "long", "endTs", "=", "nanoTimer", ".", "getNano", "(", ")", ";", "final", "long", "timeDiff", "=", "(", "endTs", "-", "timeStamps", ".", "pop", "(", ")", ")", ";", "if", "(", "walCountersHolder", "==", "null", ")", "walCountersHolder", "=", "new", "WALCountersHolder", "(", ")", ";", "walCountersHolder", ".", "flushCount", "++", ";", "walCountersHolder", ".", "flushTime", "+=", "timeDiff", ";", "makeSnapshotIfNeeded", "(", "endTs", ")", ";", "}"], "docstring": "Stops timer and records how much time was spent on flushing of data from write ahead log cache.", "docstring_tokens": ["Stops", "timer", "and", "records", "how", "much", "time", "was", "spent", "on", "flushing", "of", "data", "from", "write", "ahead", "log", "cache", "."], "sha": "d970b12033f0462f0239ea0ad8ed41207e6e26f1", "url": "https://github.com/orientechnologies/orientdb/blob/d970b12033f0462f0239ea0ad8ed41207e6e26f1/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/statistic/OSessionStoragePerformanceStatistic.java#L1146-L1157", "partition": "test"}
{"repo": "Koekiebox-PTY-LTD/Fluid", "path": "fluid-ws-java-client/src/main/java/com/fluidbpm/ws/client/v1/form/FormContainerClient.java", "func_name": "FormContainerClient.lockFormContainer", "original_string": "public Form lockFormContainer(\n            Form formParam,\n            JobView jobViewParam\n    ) {\n        return this.lockFormContainer(\n                formParam, jobViewParam, null);\n    }", "language": "java", "code": "public Form lockFormContainer(\n            Form formParam,\n            JobView jobViewParam\n    ) {\n        return this.lockFormContainer(\n                formParam, jobViewParam, null);\n    }", "code_tokens": ["public", "Form", "lockFormContainer", "(", "Form", "formParam", ",", "JobView", "jobViewParam", ")", "{", "return", "this", ".", "lockFormContainer", "(", "formParam", ",", "jobViewParam", ",", "null", ")", ";", "}"], "docstring": "Lock the provided form container for logged in user.\n\n@param formParam The form to lock.\n@param jobViewParam If retrieved from a view, the lock to view from.\n\n@return The locked form.", "docstring_tokens": ["Lock", "the", "provided", "form", "container", "for", "logged", "in", "user", "."], "sha": "81153d865f71b84ca933532c7115717bc3979270", "url": "https://github.com/Koekiebox-PTY-LTD/Fluid/blob/81153d865f71b84ca933532c7115717bc3979270/fluid-ws-java-client/src/main/java/com/fluidbpm/ws/client/v1/form/FormContainerClient.java#L287-L293", "partition": "test"}
{"repo": "cologneintelligence/FitGoodies", "path": "fitgoodies-db-jdbc/src/main/java/de/cologneintelligence/fitgoodies/database/dynamic/DynamicObjectFactory.java", "func_name": "DynamicObjectFactory.compile", "original_string": "public final Class<?> compile() {\n\t\tif (result == null) {\n\t\t\tloader.loadJavaClass(cg.getClassName(), cg.getJavaClass());\n\t\t\ttry {\n\t\t\t\tresult = loader.loadClass(cg.getClassName());\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "public final Class<?> compile() {\n\t\tif (result == null) {\n\t\t\tloader.loadJavaClass(cg.getClassName(), cg.getJavaClass());\n\t\t\ttry {\n\t\t\t\tresult = loader.loadClass(cg.getClassName());\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["public", "final", "Class", "<", "?", ">", "compile", "(", ")", "{", "if", "(", "result", "==", "null", ")", "{", "loader", ".", "loadJavaClass", "(", "cg", ".", "getClassName", "(", ")", ",", "cg", ".", "getJavaClass", "(", ")", ")", ";", "try", "{", "result", "=", "loader", ".", "loadClass", "(", "cg", ".", "getClassName", "(", ")", ")", ";", "}", "catch", "(", "ClassNotFoundException", "e", ")", "{", "throw", "new", "RuntimeException", "(", "e", ")", ";", "}", "}", "return", "result", ";", "}"], "docstring": "Compiles the class and returns a class object which contains all\nadded fields.\n\n@return dynamic generated class with all added fields.", "docstring_tokens": ["Compiles", "the", "class", "and", "returns", "a", "class", "object", "which", "contains", "all", "added", "fields", "."], "sha": "834e42d1f41b4b9226060b1e83a80cc69ea88c7b", "url": "https://github.com/cologneintelligence/FitGoodies/blob/834e42d1f41b4b9226060b1e83a80cc69ea88c7b/fitgoodies-db-jdbc/src/main/java/de/cologneintelligence/fitgoodies/database/dynamic/DynamicObjectFactory.java#L140-L150", "partition": "test"}
{"repo": "kiegroup/droolsjbpm-tools", "path": "drools-eclipse/org.drools.eclipse/src/main/java/org/drools/eclipse/editors/rete/ReteViewer.java", "func_name": "ReteViewer.drawGraph", "original_string": "public void drawGraph(ReteGraph newGraph) {\n\n        LayerManager manager = (LayerManager) getGraphicalViewer().getEditPartRegistry().get( LayerManager.ID );\n        ConnectionLayer connLayer = (ConnectionLayer) manager.getLayer( LayerConstants.CONNECTION_LAYER );\n\n        // Lazy-init model initialization\n        if ( getGraphicalViewer().getContents() == null ) {\n            getGraphicalViewer().setContents( getModel() );\n        }\n\n        final boolean isNewDiagram = newGraph != null && newGraph != diagram;\n\n        if ( isNewDiagram ) {\n            diagram.removeAll();\n        }\n\n        // Update connection router according to new model size\n        ConnectionRouter router;\n        if ( (isNewDiagram && newGraph.getChildren().size() < SIMPLE_ROUTER_MIN_NODES) || (!isNewDiagram && getModel().getChildren().size() < SIMPLE_ROUTER_MIN_NODES) ) {\n            router = new ShortestPathConnectionRouter( (IFigure) rootEditPart.getContentPane().getChildren().get( 0 ) );\n        } else {\n            router = ConnectionRouter.NULL;\n        }\n        connLayer.setConnectionRouter( router );\n\n        if ( newGraph != null && newGraph != diagram ) {\n            diagram.addAll( newGraph.getChildren() );\n        }\n\n    }", "language": "java", "code": "public void drawGraph(ReteGraph newGraph) {\n\n        LayerManager manager = (LayerManager) getGraphicalViewer().getEditPartRegistry().get( LayerManager.ID );\n        ConnectionLayer connLayer = (ConnectionLayer) manager.getLayer( LayerConstants.CONNECTION_LAYER );\n\n        // Lazy-init model initialization\n        if ( getGraphicalViewer().getContents() == null ) {\n            getGraphicalViewer().setContents( getModel() );\n        }\n\n        final boolean isNewDiagram = newGraph != null && newGraph != diagram;\n\n        if ( isNewDiagram ) {\n            diagram.removeAll();\n        }\n\n        // Update connection router according to new model size\n        ConnectionRouter router;\n        if ( (isNewDiagram && newGraph.getChildren().size() < SIMPLE_ROUTER_MIN_NODES) || (!isNewDiagram && getModel().getChildren().size() < SIMPLE_ROUTER_MIN_NODES) ) {\n            router = new ShortestPathConnectionRouter( (IFigure) rootEditPart.getContentPane().getChildren().get( 0 ) );\n        } else {\n            router = ConnectionRouter.NULL;\n        }\n        connLayer.setConnectionRouter( router );\n\n        if ( newGraph != null && newGraph != diagram ) {\n            diagram.addAll( newGraph.getChildren() );\n        }\n\n    }", "code_tokens": ["public", "void", "drawGraph", "(", "ReteGraph", "newGraph", ")", "{", "LayerManager", "manager", "=", "(", "LayerManager", ")", "getGraphicalViewer", "(", ")", ".", "getEditPartRegistry", "(", ")", ".", "get", "(", "LayerManager", ".", "ID", ")", ";", "ConnectionLayer", "connLayer", "=", "(", "ConnectionLayer", ")", "manager", ".", "getLayer", "(", "LayerConstants", ".", "CONNECTION_LAYER", ")", ";", "// Lazy-init model initialization", "if", "(", "getGraphicalViewer", "(", ")", ".", "getContents", "(", ")", "==", "null", ")", "{", "getGraphicalViewer", "(", ")", ".", "setContents", "(", "getModel", "(", ")", ")", ";", "}", "final", "boolean", "isNewDiagram", "=", "newGraph", "!=", "null", "&&", "newGraph", "!=", "diagram", ";", "if", "(", "isNewDiagram", ")", "{", "diagram", ".", "removeAll", "(", ")", ";", "}", "// Update connection router according to new model size", "ConnectionRouter", "router", ";", "if", "(", "(", "isNewDiagram", "&&", "newGraph", ".", "getChildren", "(", ")", ".", "size", "(", ")", "<", "SIMPLE_ROUTER_MIN_NODES", ")", "||", "(", "!", "isNewDiagram", "&&", "getModel", "(", ")", ".", "getChildren", "(", ")", ".", "size", "(", ")", "<", "SIMPLE_ROUTER_MIN_NODES", ")", ")", "{", "router", "=", "new", "ShortestPathConnectionRouter", "(", "(", "IFigure", ")", "rootEditPart", ".", "getContentPane", "(", ")", ".", "getChildren", "(", ")", ".", "get", "(", "0", ")", ")", ";", "}", "else", "{", "router", "=", "ConnectionRouter", ".", "NULL", ";", "}", "connLayer", ".", "setConnectionRouter", "(", "router", ")", ";", "if", "(", "newGraph", "!=", "null", "&&", "newGraph", "!=", "diagram", ")", "{", "diagram", ".", "addAll", "(", "newGraph", ".", "getChildren", "(", ")", ")", ";", "}", "}"], "docstring": "Draws graph.\n\n@param newGraph used to replace existing graph. if null then existing graph is simply redrawn.", "docstring_tokens": ["Draws", "graph", "."], "sha": "05e1f73c591178360a198dca29f99d73918991db", "url": "https://github.com/kiegroup/droolsjbpm-tools/blob/05e1f73c591178360a198dca29f99d73918991db/drools-eclipse/org.drools.eclipse/src/main/java/org/drools/eclipse/editors/rete/ReteViewer.java#L286-L315", "partition": "test"}
{"repo": "buschmais/jqa-commandline-tool", "path": "application/src/main/java/com/buschmais/jqassistant/commandline/Main.java", "func_name": "Main.gatherTasksOptions", "original_string": "private void gatherTasksOptions(TaskFactory taskFactory, Options options) {\n        for (Task task : taskFactory.getTasks()) {\n            for (Option option : task.getOptions()) {\n                options.addOption(option);\n            }\n        }\n    }", "language": "java", "code": "private void gatherTasksOptions(TaskFactory taskFactory, Options options) {\n        for (Task task : taskFactory.getTasks()) {\n            for (Option option : task.getOptions()) {\n                options.addOption(option);\n            }\n        }\n    }", "code_tokens": ["private", "void", "gatherTasksOptions", "(", "TaskFactory", "taskFactory", ",", "Options", "options", ")", "{", "for", "(", "Task", "task", ":", "taskFactory", ".", "getTasks", "(", ")", ")", "{", "for", "(", "Option", "option", ":", "task", ".", "getOptions", "(", ")", ")", "{", "options", ".", "addOption", "(", "option", ")", ";", "}", "}", "}"], "docstring": "Gathers the task specific options for all tasks.\n\n@param options\nThe task specific options.", "docstring_tokens": ["Gathers", "the", "task", "specific", "options", "for", "all", "tasks", "."], "sha": "c24de584ef4414fca673a75c16f4a533a188481f", "url": "https://github.com/buschmais/jqa-commandline-tool/blob/c24de584ef4414fca673a75c16f4a533a188481f/application/src/main/java/com/buschmais/jqassistant/commandline/Main.java#L144-L150", "partition": "test"}
{"repo": "cologneintelligence/FitGoodies", "path": "fitgoodies-core/src/main/java/de/cologneintelligence/fitgoodies/runners/FitResultTable.java", "func_name": "FitResultTable.getSubSummaryRow", "original_string": "public String getSubSummaryRow(final File path) throws IOException {\n\t\tCounts sum = subDirSum(path);\n\n\t\treturn String.format(\"<tr bgcolor=\\\"%s\\\"><th style=\\\"text-align: left\\\">%s</th><td>%s</td></tr>\",\n\t\t\t\tcolor(sum), FitUtils.htmlSafeFile(dirHelper.abs2rel(new File(\"\").getAbsolutePath(), path.getAbsolutePath())), sum.toString());\n\t}", "language": "java", "code": "public String getSubSummaryRow(final File path) throws IOException {\n\t\tCounts sum = subDirSum(path);\n\n\t\treturn String.format(\"<tr bgcolor=\\\"%s\\\"><th style=\\\"text-align: left\\\">%s</th><td>%s</td></tr>\",\n\t\t\t\tcolor(sum), FitUtils.htmlSafeFile(dirHelper.abs2rel(new File(\"\").getAbsolutePath(), path.getAbsolutePath())), sum.toString());\n\t}", "code_tokens": ["public", "String", "getSubSummaryRow", "(", "final", "File", "path", ")", "throws", "IOException", "{", "Counts", "sum", "=", "subDirSum", "(", "path", ")", ";", "return", "String", ".", "format", "(", "\"<tr bgcolor=\\\"%s\\\"><th style=\\\"text-align: left\\\">%s</th><td>%s</td></tr>\"", ",", "color", "(", "sum", ")", ",", "FitUtils", ".", "htmlSafeFile", "(", "dirHelper", ".", "abs2rel", "(", "new", "File", "(", "\"\"", ")", ".", "getAbsolutePath", "(", ")", ",", "path", ".", "getAbsolutePath", "(", ")", ")", ")", ",", "sum", ".", "toString", "(", ")", ")", ";", "}"], "docstring": "Generates a HTML summary row for a subdirectory.\n\n@param path subdirectory to process\n@return a single HTML row\n@throws IOException if path cannot be resolved correctly", "docstring_tokens": ["Generates", "a", "HTML", "summary", "row", "for", "a", "subdirectory", "."], "sha": "834e42d1f41b4b9226060b1e83a80cc69ea88c7b", "url": "https://github.com/cologneintelligence/FitGoodies/blob/834e42d1f41b4b9226060b1e83a80cc69ea88c7b/fitgoodies-core/src/main/java/de/cologneintelligence/fitgoodies/runners/FitResultTable.java#L228-L233", "partition": "test"}
{"repo": "1337joe/cubesensors-for-java", "path": "src/main/java/com/w3asel/cubesensors/util/PrefAuthPersistence.java", "func_name": "PrefAuthPersistence.saveToken", "original_string": "@Override\n\tpublic void saveToken(Token token) {\n\t\tset(ACCESS_TOKEN_TOKEN_PREF, token.getToken());\n\t\tset(ACCESS_TOKEN_SECRET_PREF, token.getSecret());\n\t}", "language": "java", "code": "@Override\n\tpublic void saveToken(Token token) {\n\t\tset(ACCESS_TOKEN_TOKEN_PREF, token.getToken());\n\t\tset(ACCESS_TOKEN_SECRET_PREF, token.getSecret());\n\t}", "code_tokens": ["@", "Override", "public", "void", "saveToken", "(", "Token", "token", ")", "{", "set", "(", "ACCESS_TOKEN_TOKEN_PREF", ",", "token", ".", "getToken", "(", ")", ")", ";", "set", "(", "ACCESS_TOKEN_SECRET_PREF", ",", "token", ".", "getSecret", "(", ")", ")", ";", "}"], "docstring": "Save the token using java preferences.", "docstring_tokens": ["Save", "the", "token", "using", "java", "preferences", "."], "sha": "f3ba432d36b744e68b916682d7ef24afaff447f8", "url": "https://github.com/1337joe/cubesensors-for-java/blob/f3ba432d36b744e68b916682d7ef24afaff447f8/src/main/java/com/w3asel/cubesensors/util/PrefAuthPersistence.java#L19-L23", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-bean/src/main/java/jodd/bean/BeanCopy.java", "func_name": "BeanCopy.copy", "original_string": "public void copy() {\n\t\tbeanUtil = new BeanUtilBean()\n\t\t\t\t\t\t.declared(declared)\n\t\t\t\t\t\t.forced(forced)\n\t\t\t\t\t\t.silent(true);\n\t\tvisit();\n\t}", "language": "java", "code": "public void copy() {\n\t\tbeanUtil = new BeanUtilBean()\n\t\t\t\t\t\t.declared(declared)\n\t\t\t\t\t\t.forced(forced)\n\t\t\t\t\t\t.silent(true);\n\t\tvisit();\n\t}", "code_tokens": ["public", "void", "copy", "(", ")", "{", "beanUtil", "=", "new", "BeanUtilBean", "(", ")", ".", "declared", "(", "declared", ")", ".", "forced", "(", "forced", ")", ".", "silent", "(", "true", ")", ";", "visit", "(", ")", ";", "}"], "docstring": "Performs the copying.", "docstring_tokens": ["Performs", "the", "copying", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-bean/src/main/java/jodd/bean/BeanCopy.java#L164-L170", "partition": "test"}
{"repo": "TooTallNate/Java-WebSocket", "path": "src/main/java/org/java_websocket/AbstractWebSocket.java", "func_name": "AbstractWebSocket.restartConnectionLostTimer", "original_string": "private void restartConnectionLostTimer() {\n\t\tcancelConnectionLostTimer();\n\t\tconnectionLostCheckerService = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"connectionLostChecker\"));\n\t\tRunnable connectionLostChecker = new Runnable() {\n\n\t\t\t/**\n\t\t\t * Keep the connections in a separate list to not cause deadlocks\n\t\t\t */\n\t\t\tprivate ArrayList<WebSocket> connections = new ArrayList<WebSocket>(  );\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tconnections.clear();\n\t\t\t\ttry {\n\t\t\t\t\tconnections.addAll( getConnections() );\n\t\t\t\t\tlong minimumPongTime = (long) (System.nanoTime() - ( connectionLostTimeout * 1.5 ));\n\t\t\t\t\tfor( WebSocket conn : connections ) {\n\t\t\t\t\t\texecuteConnectionLostDetection(conn, minimumPongTime);\n\t\t\t\t\t}\n\t\t\t\t} catch ( Exception e ) {\n\t\t\t\t\t//Ignore this exception\n\t\t\t\t}\n\t\t\t\tconnections.clear();\n\t\t\t}\n\t\t};\n\n\t\tconnectionLostCheckerFuture = connectionLostCheckerService.scheduleAtFixedRate(connectionLostChecker, connectionLostTimeout, connectionLostTimeout, TimeUnit.NANOSECONDS);\n\t}", "language": "java", "code": "private void restartConnectionLostTimer() {\n\t\tcancelConnectionLostTimer();\n\t\tconnectionLostCheckerService = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"connectionLostChecker\"));\n\t\tRunnable connectionLostChecker = new Runnable() {\n\n\t\t\t/**\n\t\t\t * Keep the connections in a separate list to not cause deadlocks\n\t\t\t */\n\t\t\tprivate ArrayList<WebSocket> connections = new ArrayList<WebSocket>(  );\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tconnections.clear();\n\t\t\t\ttry {\n\t\t\t\t\tconnections.addAll( getConnections() );\n\t\t\t\t\tlong minimumPongTime = (long) (System.nanoTime() - ( connectionLostTimeout * 1.5 ));\n\t\t\t\t\tfor( WebSocket conn : connections ) {\n\t\t\t\t\t\texecuteConnectionLostDetection(conn, minimumPongTime);\n\t\t\t\t\t}\n\t\t\t\t} catch ( Exception e ) {\n\t\t\t\t\t//Ignore this exception\n\t\t\t\t}\n\t\t\t\tconnections.clear();\n\t\t\t}\n\t\t};\n\n\t\tconnectionLostCheckerFuture = connectionLostCheckerService.scheduleAtFixedRate(connectionLostChecker, connectionLostTimeout, connectionLostTimeout, TimeUnit.NANOSECONDS);\n\t}", "code_tokens": ["private", "void", "restartConnectionLostTimer", "(", ")", "{", "cancelConnectionLostTimer", "(", ")", ";", "connectionLostCheckerService", "=", "Executors", ".", "newSingleThreadScheduledExecutor", "(", "new", "NamedThreadFactory", "(", "\"connectionLostChecker\"", ")", ")", ";", "Runnable", "connectionLostChecker", "=", "new", "Runnable", "(", ")", "{", "/**\n\t\t\t * Keep the connections in a separate list to not cause deadlocks\n\t\t\t */", "private", "ArrayList", "<", "WebSocket", ">", "connections", "=", "new", "ArrayList", "<", "WebSocket", ">", "(", ")", ";", "@", "Override", "public", "void", "run", "(", ")", "{", "connections", ".", "clear", "(", ")", ";", "try", "{", "connections", ".", "addAll", "(", "getConnections", "(", ")", ")", ";", "long", "minimumPongTime", "=", "(", "long", ")", "(", "System", ".", "nanoTime", "(", ")", "-", "(", "connectionLostTimeout", "*", "1.5", ")", ")", ";", "for", "(", "WebSocket", "conn", ":", "connections", ")", "{", "executeConnectionLostDetection", "(", "conn", ",", "minimumPongTime", ")", ";", "}", "}", "catch", "(", "Exception", "e", ")", "{", "//Ignore this exception", "}", "connections", ".", "clear", "(", ")", ";", "}", "}", ";", "connectionLostCheckerFuture", "=", "connectionLostCheckerService", ".", "scheduleAtFixedRate", "(", "connectionLostChecker", ",", "connectionLostTimeout", ",", "connectionLostTimeout", ",", "TimeUnit", ".", "NANOSECONDS", ")", ";", "}"], "docstring": "This methods allows the reset of the connection lost timer in case of a changed parameter\n@since 1.3.4", "docstring_tokens": ["This", "methods", "allows", "the", "reset", "of", "the", "connection", "lost", "timer", "in", "case", "of", "a", "changed", "parameter"], "sha": "73c6805ca2c7801b2828ffd3ec12e5cb0daefcf9", "url": "https://github.com/TooTallNate/Java-WebSocket/blob/73c6805ca2c7801b2828ffd3ec12e5cb0daefcf9/src/main/java/org/java_websocket/AbstractWebSocket.java#L172-L198", "partition": "test"}
{"repo": "DigitalPebble/storm-crawler", "path": "core/src/main/java/com/digitalpebble/stormcrawler/persistence/AbstractStatusUpdaterBolt.java", "func_name": "AbstractStatusUpdaterBolt.ack", "original_string": "protected final void ack(Tuple t, String url) {\n        // keep the URL in the cache\n        if (useCache) {\n            cache.put(url, \"\");\n        }\n\n        _collector.ack(t);\n    }", "language": "java", "code": "protected final void ack(Tuple t, String url) {\n        // keep the URL in the cache\n        if (useCache) {\n            cache.put(url, \"\");\n        }\n\n        _collector.ack(t);\n    }", "code_tokens": ["protected", "final", "void", "ack", "(", "Tuple", "t", ",", "String", "url", ")", "{", "// keep the URL in the cache", "if", "(", "useCache", ")", "{", "cache", ".", "put", "(", "url", ",", "\"\"", ")", ";", "}", "_collector", ".", "ack", "(", "t", ")", ";", "}"], "docstring": "Must be called by extending classes to store and collect in one go", "docstring_tokens": ["Must", "be", "called", "by", "extending", "classes", "to", "store", "and", "collect", "in", "one", "go"], "sha": "5d0465192ab8fbd89a90db32cb20960a282411ea", "url": "https://github.com/DigitalPebble/storm-crawler/blob/5d0465192ab8fbd89a90db32cb20960a282411ea/core/src/main/java/com/digitalpebble/stormcrawler/persistence/AbstractStatusUpdaterBolt.java#L258-L265", "partition": "test"}
{"repo": "RuedigerMoeller/fast-serialization", "path": "src/main/java/org/nustaq/serialization/FSTObjectRegistry.java", "func_name": "FSTObjectRegistry.registerObjectForWrite", "original_string": "public int registerObjectForWrite(Object o, int streamPosition, FSTClazzInfo clzInfo, int reUseType[]) {\n        if (disabled) {\n            return Integer.MIN_VALUE;\n        }\n//        System.out.println(\"REGISTER AT WRITE:\"+streamPosition+\" \"+o.getClass().getSimpleName());\n//        final Class clazz = o.getClass();\n        if ( clzInfo == null ) { // array oder enum oder primitive\n            // unused ?\n//            clzInfo = reg.getCLInfo(clazz);\n        } else if ( clzInfo.isFlat() ) {\n            return Integer.MIN_VALUE;\n        }\n        int handle = objects.putOrGet(o,streamPosition);\n        if ( handle >= 0 ) {\n//            if ( idToObject.get(handle) == null ) { // (*) (can get improved)\n//                idToObject.add(handle, o);\n//            }\n            reUseType[0] = 0;\n            return handle;\n        }\n        return Integer.MIN_VALUE;\n    }", "language": "java", "code": "public int registerObjectForWrite(Object o, int streamPosition, FSTClazzInfo clzInfo, int reUseType[]) {\n        if (disabled) {\n            return Integer.MIN_VALUE;\n        }\n//        System.out.println(\"REGISTER AT WRITE:\"+streamPosition+\" \"+o.getClass().getSimpleName());\n//        final Class clazz = o.getClass();\n        if ( clzInfo == null ) { // array oder enum oder primitive\n            // unused ?\n//            clzInfo = reg.getCLInfo(clazz);\n        } else if ( clzInfo.isFlat() ) {\n            return Integer.MIN_VALUE;\n        }\n        int handle = objects.putOrGet(o,streamPosition);\n        if ( handle >= 0 ) {\n//            if ( idToObject.get(handle) == null ) { // (*) (can get improved)\n//                idToObject.add(handle, o);\n//            }\n            reUseType[0] = 0;\n            return handle;\n        }\n        return Integer.MIN_VALUE;\n    }", "code_tokens": ["public", "int", "registerObjectForWrite", "(", "Object", "o", ",", "int", "streamPosition", ",", "FSTClazzInfo", "clzInfo", ",", "int", "reUseType", "[", "]", ")", "{", "if", "(", "disabled", ")", "{", "return", "Integer", ".", "MIN_VALUE", ";", "}", "//        System.out.println(\"REGISTER AT WRITE:\"+streamPosition+\" \"+o.getClass().getSimpleName());", "//        final Class clazz = o.getClass();", "if", "(", "clzInfo", "==", "null", ")", "{", "// array oder enum oder primitive", "// unused ?", "//            clzInfo = reg.getCLInfo(clazz);", "}", "else", "if", "(", "clzInfo", ".", "isFlat", "(", ")", ")", "{", "return", "Integer", ".", "MIN_VALUE", ";", "}", "int", "handle", "=", "objects", ".", "putOrGet", "(", "o", ",", "streamPosition", ")", ";", "if", "(", "handle", ">=", "0", ")", "{", "//            if ( idToObject.get(handle) == null ) { // (*) (can get improved)", "//                idToObject.add(handle, o);", "//            }", "reUseType", "[", "0", "]", "=", "0", ";", "return", "handle", ";", "}", "return", "Integer", ".", "MIN_VALUE", ";", "}"], "docstring": "add an object to the register, return handle if already present. Called during write only\n\n@param o\n@param streamPosition\n@return 0 if added, handle if already present", "docstring_tokens": ["add", "an", "object", "to", "the", "register", "return", "handle", "if", "already", "present", ".", "Called", "during", "write", "only"], "sha": "59f8f800b79479d0b9c80901cf55903d9b027f26", "url": "https://github.com/RuedigerMoeller/fast-serialization/blob/59f8f800b79479d0b9c80901cf55903d9b027f26/src/main/java/org/nustaq/serialization/FSTObjectRegistry.java#L131-L152", "partition": "test"}
{"repo": "kiegroup/droolsjbpm-tools", "path": "drools-eclipse/org.kie.eclipse/src/main/java/com/eclipsesource/json/JsonValue.java", "func_name": "JsonValue.readFrom", "original_string": "public static JsonValue readFrom( String text ) {\n    try {\n      return new JsonParser( text ).parse();\n    } catch( IOException exception ) {\n      // JsonParser does not throw IOException for String\n      throw new RuntimeException( exception );\n    }\n  }", "language": "java", "code": "public static JsonValue readFrom( String text ) {\n    try {\n      return new JsonParser( text ).parse();\n    } catch( IOException exception ) {\n      // JsonParser does not throw IOException for String\n      throw new RuntimeException( exception );\n    }\n  }", "code_tokens": ["public", "static", "JsonValue", "readFrom", "(", "String", "text", ")", "{", "try", "{", "return", "new", "JsonParser", "(", "text", ")", ".", "parse", "(", ")", ";", "}", "catch", "(", "IOException", "exception", ")", "{", "// JsonParser does not throw IOException for String", "throw", "new", "RuntimeException", "(", "exception", ")", ";", "}", "}"], "docstring": "Reads a JSON value from the given string.\n\n@param text\nthe string that contains the JSON value\n@return the JSON value that has been read\n@throws ParseException\nif the input is not valid JSON", "docstring_tokens": ["Reads", "a", "JSON", "value", "from", "the", "given", "string", "."], "sha": "05e1f73c591178360a198dca29f99d73918991db", "url": "https://github.com/kiegroup/droolsjbpm-tools/blob/05e1f73c591178360a198dca29f99d73918991db/drools-eclipse/org.kie.eclipse/src/main/java/com/eclipsesource/json/JsonValue.java#L103-L110", "partition": "test"}
{"repo": "phax/ph-math", "path": "ph-math/src/main/java/com/helger/numbercruncher/matrix/SquareMatrix.java", "func_name": "SquareMatrix.set", "original_string": "@Override\n  protected void set (final float values[][])\n  {\n    super.set (values);\n    m_nRows = m_nCols = Math.min (m_nRows, m_nCols);\n  }", "language": "java", "code": "@Override\n  protected void set (final float values[][])\n  {\n    super.set (values);\n    m_nRows = m_nCols = Math.min (m_nRows, m_nCols);\n  }", "code_tokens": ["@", "Override", "protected", "void", "set", "(", "final", "float", "values", "[", "]", "[", "]", ")", "{", "super", ".", "set", "(", "values", ")", ";", "m_nRows", "=", "m_nCols", "=", "Math", ".", "min", "(", "m_nRows", ",", "m_nCols", ")", ";", "}"], "docstring": "Set this square matrix from a 2-d array of values. If the values are not\nsquare, only the upper left square is used.\n\n@param values\nthe 2-d array of values", "docstring_tokens": ["Set", "this", "square", "matrix", "from", "a", "2", "-", "d", "array", "of", "values", ".", "If", "the", "values", "are", "not", "square", "only", "the", "upper", "left", "square", "is", "used", "."], "sha": "9f998870c7e05226e032b1f38c23e7d45ec0169d", "url": "https://github.com/phax/ph-math/blob/9f998870c7e05226e032b1f38c23e7d45ec0169d/ph-math/src/main/java/com/helger/numbercruncher/matrix/SquareMatrix.java#L86-L91", "partition": "test"}
{"repo": "Unidata/thredds", "path": "cdm/src/main/java/ucar/nc2/dataset/StructureDS.java", "func_name": "StructureDS.findVariableFromOrgName", "original_string": "private VariableEnhanced findVariableFromOrgName(String orgName) {\r\n    for (Variable vTop : getVariables()) {\r\n      Variable v = vTop;\r\n      while (v instanceof VariableEnhanced) {\r\n        VariableEnhanced ve = (VariableEnhanced) v;\r\n        if ((ve.getOriginalName() != null) && (ve.getOriginalName().equals(orgName)))\r\n          return (VariableEnhanced) vTop;\r\n        v = ve.getOriginalVariable();\r\n      }\r\n    }\r\n    return null;\r\n  }", "language": "java", "code": "private VariableEnhanced findVariableFromOrgName(String orgName) {\r\n    for (Variable vTop : getVariables()) {\r\n      Variable v = vTop;\r\n      while (v instanceof VariableEnhanced) {\r\n        VariableEnhanced ve = (VariableEnhanced) v;\r\n        if ((ve.getOriginalName() != null) && (ve.getOriginalName().equals(orgName)))\r\n          return (VariableEnhanced) vTop;\r\n        v = ve.getOriginalVariable();\r\n      }\r\n    }\r\n    return null;\r\n  }", "code_tokens": ["private", "VariableEnhanced", "findVariableFromOrgName", "(", "String", "orgName", ")", "{", "for", "(", "Variable", "vTop", ":", "getVariables", "(", ")", ")", "{", "Variable", "v", "=", "vTop", ";", "while", "(", "v", "instanceof", "VariableEnhanced", ")", "{", "VariableEnhanced", "ve", "=", "(", "VariableEnhanced", ")", "v", ";", "if", "(", "(", "ve", ".", "getOriginalName", "(", ")", "!=", "null", ")", "&&", "(", "ve", ".", "getOriginalName", "(", ")", ".", "equals", "(", "orgName", ")", ")", ")", "return", "(", "VariableEnhanced", ")", "vTop", ";", "v", "=", "ve", ".", "getOriginalVariable", "(", ")", ";", "}", "}", "return", "null", ";", "}"], "docstring": "look for the top variable that has an orgVar with the wanted orgName", "docstring_tokens": ["look", "for", "the", "top", "variable", "that", "has", "an", "orgVar", "with", "the", "wanted", "orgName"], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/cdm/src/main/java/ucar/nc2/dataset/StructureDS.java#L460-L471", "partition": "test"}
{"repo": "jboss/jboss-common-core", "path": "src/main/java/org/jboss/util/timeout/TimeoutPriorityQueueImpl.java", "func_name": "TimeoutPriorityQueueImpl.removeNode", "original_string": "private TimeoutExtImpl removeNode(int index)\n   {\n      // INV: assertExpr(index > 0);\n      // INV: assertExpr(index <= size);\n      TimeoutExtImpl res = queue[index];\n      // INV: assertExpr(res != null);\n      // INV: assertExpr(res.index == index);\n      if (index == size)\n      {\n         --size;\n         queue[index] = null;\n         return res;\n      }\n      swap(index, size); // Exchange removed node with last leaf node\n      --size;\n      // INV: assertExpr(res.index == size + 1);\n      queue[res.index] = null;\n      if (normalizeUp(index))\n         return res; // Node moved up, so it shouldn't move down\n      long t = queue[index].time;\n      int c = index << 1;\n      while (c <= size)\n      {\n         // INV: assertExpr(q[index].time == t);\n         TimeoutExtImpl l = queue[c];\n         // INV: assertExpr(l != null);\n         // INV: assertExpr(l.index == c);\n         if (c + 1 <= size)\n         {\n            // two children, swap with smallest\n            TimeoutExtImpl r = queue[c + 1];\n            // INV: assertExpr(r != null);\n            // INV: assertExpr(r.index == c+1);\n            if (l.time <= r.time)\n            {\n               if (t <= l.time)\n                  break; // done\n               swap(index, c);\n               index = c;\n            }\n            else\n            {\n               if (t <= r.time)\n                  break; // done\n               swap(index, c + 1);\n               index = c + 1;\n            }\n         }\n         else\n         { // one child\n            if (t <= l.time)\n               break; // done\n            swap(index, c);\n            index = c;\n         }\n         c = index << 1;\n      }\n      return res;\n   }", "language": "java", "code": "private TimeoutExtImpl removeNode(int index)\n   {\n      // INV: assertExpr(index > 0);\n      // INV: assertExpr(index <= size);\n      TimeoutExtImpl res = queue[index];\n      // INV: assertExpr(res != null);\n      // INV: assertExpr(res.index == index);\n      if (index == size)\n      {\n         --size;\n         queue[index] = null;\n         return res;\n      }\n      swap(index, size); // Exchange removed node with last leaf node\n      --size;\n      // INV: assertExpr(res.index == size + 1);\n      queue[res.index] = null;\n      if (normalizeUp(index))\n         return res; // Node moved up, so it shouldn't move down\n      long t = queue[index].time;\n      int c = index << 1;\n      while (c <= size)\n      {\n         // INV: assertExpr(q[index].time == t);\n         TimeoutExtImpl l = queue[c];\n         // INV: assertExpr(l != null);\n         // INV: assertExpr(l.index == c);\n         if (c + 1 <= size)\n         {\n            // two children, swap with smallest\n            TimeoutExtImpl r = queue[c + 1];\n            // INV: assertExpr(r != null);\n            // INV: assertExpr(r.index == c+1);\n            if (l.time <= r.time)\n            {\n               if (t <= l.time)\n                  break; // done\n               swap(index, c);\n               index = c;\n            }\n            else\n            {\n               if (t <= r.time)\n                  break; // done\n               swap(index, c + 1);\n               index = c + 1;\n            }\n         }\n         else\n         { // one child\n            if (t <= l.time)\n               break; // done\n            swap(index, c);\n            index = c;\n         }\n         c = index << 1;\n      }\n      return res;\n   }", "code_tokens": ["private", "TimeoutExtImpl", "removeNode", "(", "int", "index", ")", "{", "// INV: assertExpr(index > 0);", "// INV: assertExpr(index <= size);", "TimeoutExtImpl", "res", "=", "queue", "[", "index", "]", ";", "// INV: assertExpr(res != null);", "// INV: assertExpr(res.index == index);", "if", "(", "index", "==", "size", ")", "{", "--", "size", ";", "queue", "[", "index", "]", "=", "null", ";", "return", "res", ";", "}", "swap", "(", "index", ",", "size", ")", ";", "// Exchange removed node with last leaf node", "--", "size", ";", "// INV: assertExpr(res.index == size + 1);", "queue", "[", "res", ".", "index", "]", "=", "null", ";", "if", "(", "normalizeUp", "(", "index", ")", ")", "return", "res", ";", "// Node moved up, so it shouldn't move down", "long", "t", "=", "queue", "[", "index", "]", ".", "time", ";", "int", "c", "=", "index", "<<", "1", ";", "while", "(", "c", "<=", "size", ")", "{", "// INV: assertExpr(q[index].time == t);", "TimeoutExtImpl", "l", "=", "queue", "[", "c", "]", ";", "// INV: assertExpr(l != null);", "// INV: assertExpr(l.index == c);", "if", "(", "c", "+", "1", "<=", "size", ")", "{", "// two children, swap with smallest", "TimeoutExtImpl", "r", "=", "queue", "[", "c", "+", "1", "]", ";", "// INV: assertExpr(r != null);", "// INV: assertExpr(r.index == c+1);", "if", "(", "l", ".", "time", "<=", "r", ".", "time", ")", "{", "if", "(", "t", "<=", "l", ".", "time", ")", "break", ";", "// done", "swap", "(", "index", ",", "c", ")", ";", "index", "=", "c", ";", "}", "else", "{", "if", "(", "t", "<=", "r", ".", "time", ")", "break", ";", "// done", "swap", "(", "index", ",", "c", "+", "1", ")", ";", "index", "=", "c", "+", "1", ";", "}", "}", "else", "{", "// one child", "if", "(", "t", "<=", "l", ".", "time", ")", "break", ";", "// done", "swap", "(", "index", ",", "c", ")", ";", "index", "=", "c", ";", "}", "c", "=", "index", "<<", "1", ";", "}", "return", "res", ";", "}"], "docstring": "Remove a node from the tree and normalize.\n\n@param index the index in the queue\n@return the removed node.", "docstring_tokens": ["Remove", "a", "node", "from", "the", "tree", "and", "normalize", "."], "sha": "c191bb18db83fa106c6913cf34ed47989b65dc97", "url": "https://github.com/jboss/jboss-common-core/blob/c191bb18db83fa106c6913cf34ed47989b65dc97/src/main/java/org/jboss/util/timeout/TimeoutPriorityQueueImpl.java#L421-L479", "partition": "test"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/publish/EndpointPublisherImpl.java", "func_name": "EndpointPublisherImpl.doDeploy", "original_string": "protected void doDeploy(ServiceTarget target, DeploymentUnit unit) {\n        List<DeploymentAspect> aspects = getDeploymentAspects();\n        ClassLoader origClassLoader = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();\n        Deployment dep = null;\n        try {\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(ClassLoaderProvider.getDefaultProvider().getServerIntegrationClassLoader());\n            dep = unit.getAttachment(WSAttachmentKeys.DEPLOYMENT_KEY);\n            dep.addAttachment(ServiceTarget.class, target);\n            DeploymentAspectManager dam = new DeploymentAspectManagerImpl();\n            dam.setDeploymentAspects(aspects);\n            dam.deploy(dep);\n        } finally {\n            if (dep != null) {\n                dep.removeAttachment(ServiceTarget.class);\n            }\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(origClassLoader);\n        }\n    }", "language": "java", "code": "protected void doDeploy(ServiceTarget target, DeploymentUnit unit) {\n        List<DeploymentAspect> aspects = getDeploymentAspects();\n        ClassLoader origClassLoader = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();\n        Deployment dep = null;\n        try {\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(ClassLoaderProvider.getDefaultProvider().getServerIntegrationClassLoader());\n            dep = unit.getAttachment(WSAttachmentKeys.DEPLOYMENT_KEY);\n            dep.addAttachment(ServiceTarget.class, target);\n            DeploymentAspectManager dam = new DeploymentAspectManagerImpl();\n            dam.setDeploymentAspects(aspects);\n            dam.deploy(dep);\n        } finally {\n            if (dep != null) {\n                dep.removeAttachment(ServiceTarget.class);\n            }\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(origClassLoader);\n        }\n    }", "code_tokens": ["protected", "void", "doDeploy", "(", "ServiceTarget", "target", ",", "DeploymentUnit", "unit", ")", "{", "List", "<", "DeploymentAspect", ">", "aspects", "=", "getDeploymentAspects", "(", ")", ";", "ClassLoader", "origClassLoader", "=", "WildFlySecurityManager", ".", "getCurrentContextClassLoaderPrivileged", "(", ")", ";", "Deployment", "dep", "=", "null", ";", "try", "{", "WildFlySecurityManager", ".", "setCurrentContextClassLoaderPrivileged", "(", "ClassLoaderProvider", ".", "getDefaultProvider", "(", ")", ".", "getServerIntegrationClassLoader", "(", ")", ")", ";", "dep", "=", "unit", ".", "getAttachment", "(", "WSAttachmentKeys", ".", "DEPLOYMENT_KEY", ")", ";", "dep", ".", "addAttachment", "(", "ServiceTarget", ".", "class", ",", "target", ")", ";", "DeploymentAspectManager", "dam", "=", "new", "DeploymentAspectManagerImpl", "(", ")", ";", "dam", ".", "setDeploymentAspects", "(", "aspects", ")", ";", "dam", ".", "deploy", "(", "dep", ")", ";", "}", "finally", "{", "if", "(", "dep", "!=", "null", ")", "{", "dep", ".", "removeAttachment", "(", "ServiceTarget", ".", "class", ")", ";", "}", "WildFlySecurityManager", ".", "setCurrentContextClassLoaderPrivileged", "(", "origClassLoader", ")", ";", "}", "}"], "docstring": "Triggers the WS deployment aspects, which process the deployment and\ninstall the endpoint services.\n\n@param target\n@param unit", "docstring_tokens": ["Triggers", "the", "WS", "deployment", "aspects", "which", "process", "the", "deployment", "and", "install", "the", "endpoint", "services", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/publish/EndpointPublisherImpl.java#L150-L167", "partition": "test"}
{"repo": "Unidata/thredds", "path": "cdm/src/main/java/ucar/nc2/iosp/sigmet/SigmetIOServiceProvider.java", "func_name": "SigmetIOServiceProvider.readIntData", "original_string": "public Array readIntData(LayoutRegular index, Variable v2) throws IOException {\r\n    int[] var = (int[]) (v2.read().get1DJavaArray(v2.getDataType()));\r\n    int[] data = new int[(int) index.getTotalNelems()];\r\n    while (index.hasNext()) {\r\n      Layout.Chunk chunk = index.next();\r\n      System.arraycopy(var, (int) chunk.getSrcPos() / 4, data, (int) chunk.getDestElem(), chunk.getNelems());\r\n    }\r\n    return Array.factory(v2.getDataType(), new int[] {(int) index.getTotalNelems()}, data);\r\n  }", "language": "java", "code": "public Array readIntData(LayoutRegular index, Variable v2) throws IOException {\r\n    int[] var = (int[]) (v2.read().get1DJavaArray(v2.getDataType()));\r\n    int[] data = new int[(int) index.getTotalNelems()];\r\n    while (index.hasNext()) {\r\n      Layout.Chunk chunk = index.next();\r\n      System.arraycopy(var, (int) chunk.getSrcPos() / 4, data, (int) chunk.getDestElem(), chunk.getNelems());\r\n    }\r\n    return Array.factory(v2.getDataType(), new int[] {(int) index.getTotalNelems()}, data);\r\n  }", "code_tokens": ["public", "Array", "readIntData", "(", "LayoutRegular", "index", ",", "Variable", "v2", ")", "throws", "IOException", "{", "int", "[", "]", "var", "=", "(", "int", "[", "]", ")", "(", "v2", ".", "read", "(", ")", ".", "get1DJavaArray", "(", "v2", ".", "getDataType", "(", ")", ")", ")", ";", "int", "[", "]", "data", "=", "new", "int", "[", "(", "int", ")", "index", ".", "getTotalNelems", "(", ")", "]", ";", "while", "(", "index", ".", "hasNext", "(", ")", ")", "{", "Layout", ".", "Chunk", "chunk", "=", "index", ".", "next", "(", ")", ";", "System", ".", "arraycopy", "(", "var", ",", "(", "int", ")", "chunk", ".", "getSrcPos", "(", ")", "/", "4", ",", "data", ",", "(", "int", ")", "chunk", ".", "getDestElem", "(", ")", ",", "chunk", ".", "getNelems", "(", ")", ")", ";", "}", "return", "Array", ".", "factory", "(", "v2", ".", "getDataType", "(", ")", ",", "new", "int", "[", "]", "{", "(", "int", ")", "index", ".", "getTotalNelems", "(", ")", "}", ",", "data", ")", ";", "}"], "docstring": "Read data from a top level Variable of INTEGER data type and return a memory resident Array.\n\n@param index LayoutRegular object\n@param v2    Variable has INTEGER data type.\n@return Array of data which will be read from Variable through this call.", "docstring_tokens": ["Read", "data", "from", "a", "top", "level", "Variable", "of", "INTEGER", "data", "type", "and", "return", "a", "memory", "resident", "Array", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/cdm/src/main/java/ucar/nc2/iosp/sigmet/SigmetIOServiceProvider.java#L825-L833", "partition": "test"}
{"repo": "orientechnologies/orientdb", "path": "client/src/main/java/com/orientechnologies/orient/client/remote/OServerAdmin.java", "func_name": "OServerAdmin.connect", "original_string": "@Deprecated\r\n  public synchronized OServerAdmin connect(final String iUserName, final String iUserPassword) throws IOException {\r\n    final String username;\r\n    final String password;\r\n\r\n    OCredentialInterceptor ci = OSecurityManager.instance().newCredentialInterceptor();\r\n\r\n    if (ci != null) {\r\n      ci.intercept(storage.getURL(), iUserName, iUserPassword);\r\n      username = ci.getUsername();\r\n      password = ci.getPassword();\r\n    } else {\r\n      username = iUserName;\r\n      password = iUserPassword;\r\n    }\r\n    OConnect37Request request = new OConnect37Request(username, password);\r\n\r\n    networkAdminOperation((network, session) -> {\r\n      OStorageRemoteNodeSession nodeSession = session.getOrCreateServerSession(network.getServerURL());\r\n      try {\r\n        network.beginRequest(request.getCommand(), session);\r\n        request.write(network, session);\r\n      } finally {\r\n        network.endRequest();\r\n      }\r\n      OConnectResponse response = request.createResponse();\r\n      try {\r\n        network.beginResponse(nodeSession.getSessionId(), true);\r\n        response.read(network, session);\r\n      } finally {\r\n        storage.endResponse(network);\r\n      }\r\n      return null;\r\n    }, \"Cannot connect to the remote server/database '\" + storage.getURL() + \"'\");\r\n\r\n    return this;\r\n  }", "language": "java", "code": "@Deprecated\r\n  public synchronized OServerAdmin connect(final String iUserName, final String iUserPassword) throws IOException {\r\n    final String username;\r\n    final String password;\r\n\r\n    OCredentialInterceptor ci = OSecurityManager.instance().newCredentialInterceptor();\r\n\r\n    if (ci != null) {\r\n      ci.intercept(storage.getURL(), iUserName, iUserPassword);\r\n      username = ci.getUsername();\r\n      password = ci.getPassword();\r\n    } else {\r\n      username = iUserName;\r\n      password = iUserPassword;\r\n    }\r\n    OConnect37Request request = new OConnect37Request(username, password);\r\n\r\n    networkAdminOperation((network, session) -> {\r\n      OStorageRemoteNodeSession nodeSession = session.getOrCreateServerSession(network.getServerURL());\r\n      try {\r\n        network.beginRequest(request.getCommand(), session);\r\n        request.write(network, session);\r\n      } finally {\r\n        network.endRequest();\r\n      }\r\n      OConnectResponse response = request.createResponse();\r\n      try {\r\n        network.beginResponse(nodeSession.getSessionId(), true);\r\n        response.read(network, session);\r\n      } finally {\r\n        storage.endResponse(network);\r\n      }\r\n      return null;\r\n    }, \"Cannot connect to the remote server/database '\" + storage.getURL() + \"'\");\r\n\r\n    return this;\r\n  }", "code_tokens": ["@", "Deprecated", "public", "synchronized", "OServerAdmin", "connect", "(", "final", "String", "iUserName", ",", "final", "String", "iUserPassword", ")", "throws", "IOException", "{", "final", "String", "username", ";", "final", "String", "password", ";", "OCredentialInterceptor", "ci", "=", "OSecurityManager", ".", "instance", "(", ")", ".", "newCredentialInterceptor", "(", ")", ";", "if", "(", "ci", "!=", "null", ")", "{", "ci", ".", "intercept", "(", "storage", ".", "getURL", "(", ")", ",", "iUserName", ",", "iUserPassword", ")", ";", "username", "=", "ci", ".", "getUsername", "(", ")", ";", "password", "=", "ci", ".", "getPassword", "(", ")", ";", "}", "else", "{", "username", "=", "iUserName", ";", "password", "=", "iUserPassword", ";", "}", "OConnect37Request", "request", "=", "new", "OConnect37Request", "(", "username", ",", "password", ")", ";", "networkAdminOperation", "(", "(", "network", ",", "session", ")", "->", "{", "OStorageRemoteNodeSession", "nodeSession", "=", "session", ".", "getOrCreateServerSession", "(", "network", ".", "getServerURL", "(", ")", ")", ";", "try", "{", "network", ".", "beginRequest", "(", "request", ".", "getCommand", "(", ")", ",", "session", ")", ";", "request", ".", "write", "(", "network", ",", "session", ")", ";", "}", "finally", "{", "network", ".", "endRequest", "(", ")", ";", "}", "OConnectResponse", "response", "=", "request", ".", "createResponse", "(", ")", ";", "try", "{", "network", ".", "beginResponse", "(", "nodeSession", ".", "getSessionId", "(", ")", ",", "true", ")", ";", "response", ".", "read", "(", "network", ",", "session", ")", ";", "}", "finally", "{", "storage", ".", "endResponse", "(", "network", ")", ";", "}", "return", "null", ";", "}", ",", "\"Cannot connect to the remote server/database '\"", "+", "storage", ".", "getURL", "(", ")", "+", "\"'\"", ")", ";", "return", "this", ";", "}"], "docstring": "Connects to a remote server.\n\n@param iUserName     Server's user name\n@param iUserPassword Server's password for the user name used\n\n@return The instance itself. Useful to execute method in chain\n\n@throws IOException", "docstring_tokens": ["Connects", "to", "a", "remote", "server", "."], "sha": "d970b12033f0462f0239ea0ad8ed41207e6e26f1", "url": "https://github.com/orientechnologies/orientdb/blob/d970b12033f0462f0239ea0ad8ed41207e6e26f1/client/src/main/java/com/orientechnologies/orient/client/remote/OServerAdmin.java#L109-L145", "partition": "test"}
{"repo": "ieb/sparsemapcontent", "path": "core/src/main/java/org/sakaiproject/nakamura/api/lite/StorageClientUtils.java", "func_name": "StorageClientUtils.deleteTree", "original_string": "public static void deleteTree(ContentManager contentManager, String path)\n            throws AccessDeniedException, StorageClientException {\n        Content content = contentManager.get(path);\n        if (content != null) {\n            for (String childPath : content.listChildPaths()) {\n                deleteTree(contentManager, childPath);\n            }\n        }\n        contentManager.delete(path);\n    }", "language": "java", "code": "public static void deleteTree(ContentManager contentManager, String path)\n            throws AccessDeniedException, StorageClientException {\n        Content content = contentManager.get(path);\n        if (content != null) {\n            for (String childPath : content.listChildPaths()) {\n                deleteTree(contentManager, childPath);\n            }\n        }\n        contentManager.delete(path);\n    }", "code_tokens": ["public", "static", "void", "deleteTree", "(", "ContentManager", "contentManager", ",", "String", "path", ")", "throws", "AccessDeniedException", ",", "StorageClientException", "{", "Content", "content", "=", "contentManager", ".", "get", "(", "path", ")", ";", "if", "(", "content", "!=", "null", ")", "{", "for", "(", "String", "childPath", ":", "content", ".", "listChildPaths", "(", ")", ")", "{", "deleteTree", "(", "contentManager", ",", "childPath", ")", ";", "}", "}", "contentManager", ".", "delete", "(", "path", ")", ";", "}"], "docstring": "Delete an entire tree starting from the deepest part of the tree and\nworking back up. Will stop the moment a permission denied is encountered\neither for read or for delete.\n\n@param contentManager\n@param path\n@throws AccessDeniedException\n@throws StorageClientException", "docstring_tokens": ["Delete", "an", "entire", "tree", "starting", "from", "the", "deepest", "part", "of", "the", "tree", "and", "working", "back", "up", ".", "Will", "stop", "the", "moment", "a", "permission", "denied", "is", "encountered", "either", "for", "read", "or", "for", "delete", "."], "sha": "0570fdf868adbbf7734790cbc09fe66480e5f2dc", "url": "https://github.com/ieb/sparsemapcontent/blob/0570fdf868adbbf7734790cbc09fe66480e5f2dc/core/src/main/java/org/sakaiproject/nakamura/api/lite/StorageClientUtils.java#L561-L570", "partition": "test"}
{"repo": "deeplearning4j/nd4j", "path": "nd4j-backends/nd4j-backend-impls/nd4j-cuda/src/main/java/org/nd4j/linalg/jcublas/ops/executioner/CudaGridExecutioner.java", "func_name": "CudaGridExecutioner.flushQueueBlocking", "original_string": "@Override\n    public void flushQueueBlocking() {\n        flushQueue();\n\n        //    logger.info(\"Blocking flush\");n\n\n        ((CudaContext) AtomicAllocator.getInstance().getDeviceContext().getContext()).syncOldStream();\n        ((CudaContext) AtomicAllocator.getInstance().getDeviceContext().getContext()).syncSpecialStream();\n    }", "language": "java", "code": "@Override\n    public void flushQueueBlocking() {\n        flushQueue();\n\n        //    logger.info(\"Blocking flush\");n\n\n        ((CudaContext) AtomicAllocator.getInstance().getDeviceContext().getContext()).syncOldStream();\n        ((CudaContext) AtomicAllocator.getInstance().getDeviceContext().getContext()).syncSpecialStream();\n    }", "code_tokens": ["@", "Override", "public", "void", "flushQueueBlocking", "(", ")", "{", "flushQueue", "(", ")", ";", "//    logger.info(\"Blocking flush\");n", "(", "(", "CudaContext", ")", "AtomicAllocator", ".", "getInstance", "(", ")", ".", "getDeviceContext", "(", ")", ".", "getContext", "(", ")", ")", ".", "syncOldStream", "(", ")", ";", "(", "(", "CudaContext", ")", "AtomicAllocator", ".", "getInstance", "(", ")", ".", "getDeviceContext", "(", ")", ".", "getContext", "(", ")", ")", ".", "syncSpecialStream", "(", ")", ";", "}"], "docstring": "This method forces all currently enqueued ops to be executed immediately\n\nPLEASE NOTE: This call is always blocking, until all queued operations are finished", "docstring_tokens": ["This", "method", "forces", "all", "currently", "enqueued", "ops", "to", "be", "executed", "immediately"], "sha": "8f005bcecb240d1fbb83b9d390ad801d1d3b6933", "url": "https://github.com/deeplearning4j/nd4j/blob/8f005bcecb240d1fbb83b9d390ad801d1d3b6933/nd4j-backends/nd4j-backend-impls/nd4j-cuda/src/main/java/org/nd4j/linalg/jcublas/ops/executioner/CudaGridExecutioner.java#L934-L942", "partition": "test"}
{"repo": "Unidata/thredds", "path": "udunits/src/main/java/ucar/units/OffsetUnit.java", "func_name": "OffsetUnit.myDivideInto", "original_string": "@Override\n    protected Unit myDivideInto(final Unit that) throws OperationException {\n        return that instanceof OffsetUnit\n                ? getUnit().divideInto(((OffsetUnit) that).getUnit())\n                : getUnit().divideInto(that);\n    }", "language": "java", "code": "@Override\n    protected Unit myDivideInto(final Unit that) throws OperationException {\n        return that instanceof OffsetUnit\n                ? getUnit().divideInto(((OffsetUnit) that).getUnit())\n                : getUnit().divideInto(that);\n    }", "code_tokens": ["@", "Override", "protected", "Unit", "myDivideInto", "(", "final", "Unit", "that", ")", "throws", "OperationException", "{", "return", "that", "instanceof", "OffsetUnit", "?", "getUnit", "(", ")", ".", "divideInto", "(", "(", "(", "OffsetUnit", ")", "that", ")", ".", "getUnit", "(", ")", ")", ":", "getUnit", "(", ")", ".", "divideInto", "(", "that", ")", ";", "}"], "docstring": "Divide this unit into another unit.\n\n@param that\nThe unit to divide this unit into.\n@return The quotient of <code>that</code> unit and this unit. The offset\nof this unit will be ignored; thus, for example\n\"celsius.myDivideInto(day)\" is equivalent to\n\"kelvin.myDivideInto(day)\".\n@throws OperationException\nCan't divide these units.", "docstring_tokens": ["Divide", "this", "unit", "into", "another", "unit", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/udunits/src/main/java/ucar/units/OffsetUnit.java#L183-L188", "partition": "test"}
{"repo": "agentsoz/jill", "path": "jill/src/main/java/io/github/agentsoz/jill/lang/PlanBindings.java", "func_name": "PlanBindings.getResultAtIndex", "original_string": "private Belief getResultAtIndex(Set<Belief> results, int index) {\n    Belief belief = null;\n    if (!(results == null || index < 0 || index >= results.size())) {\n      int idx = 0;\n      for (Belief b : results) {\n        if (idx == index) {\n          belief = b;\n          break;\n        }\n        idx++;\n      }\n    }\n    return belief;\n  }", "language": "java", "code": "private Belief getResultAtIndex(Set<Belief> results, int index) {\n    Belief belief = null;\n    if (!(results == null || index < 0 || index >= results.size())) {\n      int idx = 0;\n      for (Belief b : results) {\n        if (idx == index) {\n          belief = b;\n          break;\n        }\n        idx++;\n      }\n    }\n    return belief;\n  }", "code_tokens": ["private", "Belief", "getResultAtIndex", "(", "Set", "<", "Belief", ">", "results", ",", "int", "index", ")", "{", "Belief", "belief", "=", "null", ";", "if", "(", "!", "(", "results", "==", "null", "||", "index", "<", "0", "||", "index", ">=", "results", ".", "size", "(", ")", ")", ")", "{", "int", "idx", "=", "0", ";", "for", "(", "Belief", "b", ":", "results", ")", "{", "if", "(", "idx", "==", "index", ")", "{", "belief", "=", "b", ";", "break", ";", "}", "idx", "++", ";", "}", "}", "return", "belief", ";", "}"], "docstring": "Gets the result at the given index from the results set.\n\n@param results results set (implementation must support predictable iteration order)\n@param index the index within the set {@code (0 < index < results.size())} to retrieve\n@return the result at the given index, or null if there was an error", "docstring_tokens": ["Gets", "the", "result", "at", "the", "given", "index", "from", "the", "results", "set", "."], "sha": "13126fc78350465b477386132465f84cad719426", "url": "https://github.com/agentsoz/jill/blob/13126fc78350465b477386132465f84cad719426/jill/src/main/java/io/github/agentsoz/jill/lang/PlanBindings.java#L244-L257", "partition": "test"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/DefaultFeatureTiles.java", "func_name": "DefaultFeatureTiles.addPolygon", "original_string": "private void addPolygon(double simplifyTolerance, BoundingBox boundingBox, ProjectionTransform transform, Path path, Polygon polygon) {\n        List<LineString> rings = polygon.getRings();\n        if (!rings.isEmpty()) {\n\n            // Add the polygon points\n            LineString polygonLineString = rings.get(0);\n            List<Point> polygonPoints = polygonLineString.getPoints();\n            if (polygonPoints.size() >= 2) {\n                addRing(simplifyTolerance, boundingBox, transform, path, polygonPoints);\n\n                // Add the holes\n                for (int i = 1; i < rings.size(); i++) {\n                    LineString holeLineString = rings.get(i);\n                    List<Point> holePoints = holeLineString.getPoints();\n                    if (holePoints.size() >= 2) {\n                        addRing(simplifyTolerance, boundingBox, transform, path, holePoints);\n                    }\n                }\n            }\n        }\n    }", "language": "java", "code": "private void addPolygon(double simplifyTolerance, BoundingBox boundingBox, ProjectionTransform transform, Path path, Polygon polygon) {\n        List<LineString> rings = polygon.getRings();\n        if (!rings.isEmpty()) {\n\n            // Add the polygon points\n            LineString polygonLineString = rings.get(0);\n            List<Point> polygonPoints = polygonLineString.getPoints();\n            if (polygonPoints.size() >= 2) {\n                addRing(simplifyTolerance, boundingBox, transform, path, polygonPoints);\n\n                // Add the holes\n                for (int i = 1; i < rings.size(); i++) {\n                    LineString holeLineString = rings.get(i);\n                    List<Point> holePoints = holeLineString.getPoints();\n                    if (holePoints.size() >= 2) {\n                        addRing(simplifyTolerance, boundingBox, transform, path, holePoints);\n                    }\n                }\n            }\n        }\n    }", "code_tokens": ["private", "void", "addPolygon", "(", "double", "simplifyTolerance", ",", "BoundingBox", "boundingBox", ",", "ProjectionTransform", "transform", ",", "Path", "path", ",", "Polygon", "polygon", ")", "{", "List", "<", "LineString", ">", "rings", "=", "polygon", ".", "getRings", "(", ")", ";", "if", "(", "!", "rings", ".", "isEmpty", "(", ")", ")", "{", "// Add the polygon points", "LineString", "polygonLineString", "=", "rings", ".", "get", "(", "0", ")", ";", "List", "<", "Point", ">", "polygonPoints", "=", "polygonLineString", ".", "getPoints", "(", ")", ";", "if", "(", "polygonPoints", ".", "size", "(", ")", ">=", "2", ")", "{", "addRing", "(", "simplifyTolerance", ",", "boundingBox", ",", "transform", ",", "path", ",", "polygonPoints", ")", ";", "// Add the holes", "for", "(", "int", "i", "=", "1", ";", "i", "<", "rings", ".", "size", "(", ")", ";", "i", "++", ")", "{", "LineString", "holeLineString", "=", "rings", ".", "get", "(", "i", ")", ";", "List", "<", "Point", ">", "holePoints", "=", "holeLineString", ".", "getPoints", "(", ")", ";", "if", "(", "holePoints", ".", "size", "(", ")", ">=", "2", ")", "{", "addRing", "(", "simplifyTolerance", ",", "boundingBox", ",", "transform", ",", "path", ",", "holePoints", ")", ";", "}", "}", "}", "}", "}"], "docstring": "Add the polygon on the canvas\n\n@param simplifyTolerance simplify tolerance in meters\n@param boundingBox       bounding box\n@param transform         projection transform\n@param path              path\n@param polygon           polygon", "docstring_tokens": ["Add", "the", "polygon", "on", "the", "canvas"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/DefaultFeatureTiles.java#L454-L474", "partition": "test"}
{"repo": "eclipse/packagedrone", "path": "bundles/org.apache.jasper.glassfish/src/org/apache/jasper/compiler/ParserController.java", "func_name": "ParserController.parse", "original_string": "public Node.Nodes parse(String inFileName, Node parent,\n\t\t\t    URL jarFileUrl)\n\t        throws FileNotFoundException, JasperException, IOException {\n        // For files that are statically included, isTagfile and directiveOnly\n        // remain unchanged.\n        return doParse(inFileName, parent, jarFileUrl);\n    }", "language": "java", "code": "public Node.Nodes parse(String inFileName, Node parent,\n\t\t\t    URL jarFileUrl)\n\t        throws FileNotFoundException, JasperException, IOException {\n        // For files that are statically included, isTagfile and directiveOnly\n        // remain unchanged.\n        return doParse(inFileName, parent, jarFileUrl);\n    }", "code_tokens": ["public", "Node", ".", "Nodes", "parse", "(", "String", "inFileName", ",", "Node", "parent", ",", "URL", "jarFileUrl", ")", "throws", "FileNotFoundException", ",", "JasperException", ",", "IOException", "{", "// For files that are statically included, isTagfile and directiveOnly", "// remain unchanged.", "return", "doParse", "(", "inFileName", ",", "parent", ",", "jarFileUrl", ")", ";", "}"], "docstring": "Processes an include directive with the given path.\n\n@param inFileName The path to the resource to be included.\n@param parent The parent node of the include directive.\n@param jarFile The JAR file from which to read the included resource,\nor null of the included resource is to be read from the filesystem", "docstring_tokens": ["Processes", "an", "include", "directive", "with", "the", "given", "path", "."], "sha": "3869c1643cdc6f7cb8b26097a7b6994683b13d7e", "url": "https://github.com/eclipse/packagedrone/blob/3869c1643cdc6f7cb8b26097a7b6994683b13d7e/bundles/org.apache.jasper.glassfish/src/org/apache/jasper/compiler/ParserController.java#L156-L162", "partition": "test"}
{"repo": "Netflix/hollow", "path": "hollow/src/main/java/com/netflix/hollow/core/util/SimultaneousExecutor.java", "func_name": "SimultaneousExecutor.awaitSuccessfulCompletionOfCurrentTasks", "original_string": "public void awaitSuccessfulCompletionOfCurrentTasks() throws InterruptedException, ExecutionException {\n        for(Future<?> f : futures) {\n            f.get();\n        }\n\n        futures.clear();\n    }", "language": "java", "code": "public void awaitSuccessfulCompletionOfCurrentTasks() throws InterruptedException, ExecutionException {\n        for(Future<?> f : futures) {\n            f.get();\n        }\n\n        futures.clear();\n    }", "code_tokens": ["public", "void", "awaitSuccessfulCompletionOfCurrentTasks", "(", ")", "throws", "InterruptedException", ",", "ExecutionException", "{", "for", "(", "Future", "<", "?", ">", "f", ":", "futures", ")", "{", "f", ".", "get", "(", ")", ";", "}", "futures", ".", "clear", "(", ")", ";", "}"], "docstring": "Await successful completion of all previously submitted tasks.  Throw exception of the first failed task\nif 1 or more tasks failed.\n\nAfter this call completes, the thread pool will <i>not</i> be shut down and can be reused.\n\n@throws ExecutionException if a computation threw an\nexception\n@throws InterruptedException if the current thread was interrupted\nwhile waiting", "docstring_tokens": ["Await", "successful", "completion", "of", "all", "previously", "submitted", "tasks", ".", "Throw", "exception", "of", "the", "first", "failed", "task", "if", "1", "or", "more", "tasks", "failed", "."], "sha": "43ca100034a01050fb764170bd32b085ac9a3c22", "url": "https://github.com/Netflix/hollow/blob/43ca100034a01050fb764170bd32b085ac9a3c22/hollow/src/main/java/com/netflix/hollow/core/util/SimultaneousExecutor.java#L231-L237", "partition": "test"}
{"repo": "basis-technology-corp/tcl-regex-java", "path": "src/main/java/com/basistech/tclre/Compiler.java", "func_name": "Compiler.optst", "original_string": "private void optst(Subre t) {\n        if (t == null) {\n            return;\n        }\n\n    /* recurse through children */\n        if (t.left != null) {\n            optst(t.left);\n        }\n        if (t.right != null) {\n            optst(t.right);\n        }\n    }", "language": "java", "code": "private void optst(Subre t) {\n        if (t == null) {\n            return;\n        }\n\n    /* recurse through children */\n        if (t.left != null) {\n            optst(t.left);\n        }\n        if (t.right != null) {\n            optst(t.right);\n        }\n    }", "code_tokens": ["private", "void", "optst", "(", "Subre", "t", ")", "{", "if", "(", "t", "==", "null", ")", "{", "return", ";", "}", "/* recurse through children */", "if", "(", "t", ".", "left", "!=", "null", ")", "{", "optst", "(", "t", ".", "left", ")", ";", "}", "if", "(", "t", ".", "right", "!=", "null", ")", "{", "optst", "(", "t", ".", "right", ")", ";", "}", "}"], "docstring": "optst - optimize a subRE subtree", "docstring_tokens": ["optst", "-", "optimize", "a", "subRE", "subtree"], "sha": "de0d5eaccf9a61b694cb8793f234cc229c395b43", "url": "https://github.com/basis-technology-corp/tcl-regex-java/blob/de0d5eaccf9a61b694cb8793f234cc229c395b43/src/main/java/com/basistech/tclre/Compiler.java#L426-L438", "partition": "test"}
{"repo": "Unidata/thredds", "path": "opendap/src/main/java/opendap/dap/Util.java", "func_name": "Util.quickSort", "original_string": "static private void quickSort(String a[], int lo0, int hi0) {\n        int lo = lo0;\n        int hi = hi0;\n        String mid;\n\n        if (hi0 > lo0) {\n            // Arbitrarily establishing partition element as the array midpoint */\n            //Coverity[FB.IM_AVERAGE_COMPUTATION_COULD_OVERFLOW]\n            mid = a[(lo0 + hi0) / 2];\n\n            // loop through the array until indices cross\n            while (lo <= hi) {\n                // find the first element that is >= the partition element\n                // starting from the left index.\n                while ((lo < hi0) && (a[lo].compareTo(mid) < 0))\n                    ++lo;\n\n                // find an element that is <= the partition element\n                // starting from the right index.\n                while ((hi > lo0) && (a[hi].compareTo(mid) > 0))\n                    --hi;\n\n                // if the indexes have not crossed, swap\n                if (lo <= hi) {\n                    swap(a, lo, hi);\n                    ++lo;\n                    --hi;\n                }\n            }\n            // If the right index has not reached the left side of array,\n            // sort the left partition.\n            if (lo0 < hi)\n                quickSort(a, lo0, hi);\n\n            // If the left index has not reached the right side of array,\n            // sort the right partition.\n            if (lo < hi0)\n                quickSort(a, lo, hi0);\n        }\n    }", "language": "java", "code": "static private void quickSort(String a[], int lo0, int hi0) {\n        int lo = lo0;\n        int hi = hi0;\n        String mid;\n\n        if (hi0 > lo0) {\n            // Arbitrarily establishing partition element as the array midpoint */\n            //Coverity[FB.IM_AVERAGE_COMPUTATION_COULD_OVERFLOW]\n            mid = a[(lo0 + hi0) / 2];\n\n            // loop through the array until indices cross\n            while (lo <= hi) {\n                // find the first element that is >= the partition element\n                // starting from the left index.\n                while ((lo < hi0) && (a[lo].compareTo(mid) < 0))\n                    ++lo;\n\n                // find an element that is <= the partition element\n                // starting from the right index.\n                while ((hi > lo0) && (a[hi].compareTo(mid) > 0))\n                    --hi;\n\n                // if the indexes have not crossed, swap\n                if (lo <= hi) {\n                    swap(a, lo, hi);\n                    ++lo;\n                    --hi;\n                }\n            }\n            // If the right index has not reached the left side of array,\n            // sort the left partition.\n            if (lo0 < hi)\n                quickSort(a, lo0, hi);\n\n            // If the left index has not reached the right side of array,\n            // sort the right partition.\n            if (lo < hi0)\n                quickSort(a, lo, hi0);\n        }\n    }", "code_tokens": ["static", "private", "void", "quickSort", "(", "String", "a", "[", "]", ",", "int", "lo0", ",", "int", "hi0", ")", "{", "int", "lo", "=", "lo0", ";", "int", "hi", "=", "hi0", ";", "String", "mid", ";", "if", "(", "hi0", ">", "lo0", ")", "{", "// Arbitrarily establishing partition element as the array midpoint */", "//Coverity[FB.IM_AVERAGE_COMPUTATION_COULD_OVERFLOW]", "mid", "=", "a", "[", "(", "lo0", "+", "hi0", ")", "/", "2", "]", ";", "// loop through the array until indices cross", "while", "(", "lo", "<=", "hi", ")", "{", "// find the first element that is >= the partition element", "// starting from the left index.", "while", "(", "(", "lo", "<", "hi0", ")", "&&", "(", "a", "[", "lo", "]", ".", "compareTo", "(", "mid", ")", "<", "0", ")", ")", "++", "lo", ";", "// find an element that is <= the partition element", "// starting from the right index.", "while", "(", "(", "hi", ">", "lo0", ")", "&&", "(", "a", "[", "hi", "]", ".", "compareTo", "(", "mid", ")", ">", "0", ")", ")", "--", "hi", ";", "// if the indexes have not crossed, swap", "if", "(", "lo", "<=", "hi", ")", "{", "swap", "(", "a", ",", "lo", ",", "hi", ")", ";", "++", "lo", ";", "--", "hi", ";", "}", "}", "// If the right index has not reached the left side of array,", "// sort the left partition.", "if", "(", "lo0", "<", "hi", ")", "quickSort", "(", "a", ",", "lo0", ",", "hi", ")", ";", "// If the left index has not reached the right side of array,", "// sort the right partition.", "if", "(", "lo", "<", "hi0", ")", "quickSort", "(", "a", ",", "lo", ",", "hi0", ")", ";", "}", "}"], "docstring": "Internal recursive method to perform Quick Sort on name array.\n\n@param a   an array of <code>String</code>.\n@param lo0 the low index to sort.\n@param hi0 the high index to sort.", "docstring_tokens": ["Internal", "recursive", "method", "to", "perform", "Quick", "Sort", "on", "name", "array", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/opendap/src/main/java/opendap/dap/Util.java#L124-L163", "partition": "test"}
{"repo": "Axway/iron", "path": "iron-spi-aws/src/main/java/io/axway/iron/spi/aws/kinesis/AwsKinesisTransactionStore.java", "func_name": "AwsKinesisTransactionStore.getRecords", "original_string": "@Nullable\n    private List<Record> getRecords(GetRecordsRequest getRecordsRequest) {\n        return tryAmazonAction(\"\", () -> {\n            GetRecordsResult getRecordsResult = m_kinesis.getRecords(getRecordsRequest);\n            m_shardIterator = getRecordsResult.getNextShardIterator();\n            List<Record> records = getRecordsResult.getRecords();\n            LOG.trace(\"Get records\", args -> args.add(\"streamName\", m_streamName).add(\"record number\", records.size())\n                    .add(\"millisBehindLatest\", getRecordsResult.getMillisBehindLatest()));\n            return records;\n        }, m_durationBetweenRequests).orElse(List.of());\n    }", "language": "java", "code": "@Nullable\n    private List<Record> getRecords(GetRecordsRequest getRecordsRequest) {\n        return tryAmazonAction(\"\", () -> {\n            GetRecordsResult getRecordsResult = m_kinesis.getRecords(getRecordsRequest);\n            m_shardIterator = getRecordsResult.getNextShardIterator();\n            List<Record> records = getRecordsResult.getRecords();\n            LOG.trace(\"Get records\", args -> args.add(\"streamName\", m_streamName).add(\"record number\", records.size())\n                    .add(\"millisBehindLatest\", getRecordsResult.getMillisBehindLatest()));\n            return records;\n        }, m_durationBetweenRequests).orElse(List.of());\n    }", "code_tokens": ["@", "Nullable", "private", "List", "<", "Record", ">", "getRecords", "(", "GetRecordsRequest", "getRecordsRequest", ")", "{", "return", "tryAmazonAction", "(", "\"\"", ",", "(", ")", "->", "{", "GetRecordsResult", "getRecordsResult", "=", "m_kinesis", ".", "getRecords", "(", "getRecordsRequest", ")", ";", "m_shardIterator", "=", "getRecordsResult", ".", "getNextShardIterator", "(", ")", ";", "List", "<", "Record", ">", "records", "=", "getRecordsResult", ".", "getRecords", "(", ")", ";", "LOG", ".", "trace", "(", "\"Get records\"", ",", "args", "->", "args", ".", "add", "(", "\"streamName\"", ",", "m_streamName", ")", ".", "add", "(", "\"record number\"", ",", "records", ".", "size", "(", ")", ")", ".", "add", "(", "\"millisBehindLatest\"", ",", "getRecordsResult", ".", "getMillisBehindLatest", "(", ")", ")", ")", ";", "return", "records", ";", "}", ",", "m_durationBetweenRequests", ")", ".", "orElse", "(", "List", ".", "of", "(", ")", ")", ";", "}"], "docstring": "Retrieves records corresponding to the request.\n\n@param getRecordsRequest the request\n@return records corresponding to the request", "docstring_tokens": ["Retrieves", "records", "corresponding", "to", "the", "request", "."], "sha": "387ec6d43d2353f857d510dd29f93a06a8db9069", "url": "https://github.com/Axway/iron/blob/387ec6d43d2353f857d510dd29f93a06a8db9069/iron-spi-aws/src/main/java/io/axway/iron/spi/aws/kinesis/AwsKinesisTransactionStore.java#L209-L219", "partition": "test"}
{"repo": "dschulten/hydra-java", "path": "spring-hateoas-ext/src/main/java/de/escalon/hypermedia/spring/uber/AbstractUberNode.java", "func_name": "AbstractUberNode.iterator", "original_string": "@Override\n    public Iterator<UberNode> iterator() {\n\n        return new Iterator<UberNode>() {\n\n            int index = 0;\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"removing from uber node is not supported\");\n            }\n\n            @Override\n            public UberNode next() {\n                index = findNextChildWithData();\n                return data.get(index++);\n            }\n\n            @Override\n            public boolean hasNext() {\n                return findNextChildWithData() != -1;\n            }\n\n            private int findNextChildWithData() {\n                for (int i = index; i < data.size(); i++) {\n                    if (!data.get(i)\n                            .getData()\n                            .isEmpty()) {\n                        return i;\n                    }\n                }\n                return -1;\n            }\n        };\n    }", "language": "java", "code": "@Override\n    public Iterator<UberNode> iterator() {\n\n        return new Iterator<UberNode>() {\n\n            int index = 0;\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"removing from uber node is not supported\");\n            }\n\n            @Override\n            public UberNode next() {\n                index = findNextChildWithData();\n                return data.get(index++);\n            }\n\n            @Override\n            public boolean hasNext() {\n                return findNextChildWithData() != -1;\n            }\n\n            private int findNextChildWithData() {\n                for (int i = index; i < data.size(); i++) {\n                    if (!data.get(i)\n                            .getData()\n                            .isEmpty()) {\n                        return i;\n                    }\n                }\n                return -1;\n            }\n        };\n    }", "code_tokens": ["@", "Override", "public", "Iterator", "<", "UberNode", ">", "iterator", "(", ")", "{", "return", "new", "Iterator", "<", "UberNode", ">", "(", ")", "{", "int", "index", "=", "0", ";", "@", "Override", "public", "void", "remove", "(", ")", "{", "throw", "new", "UnsupportedOperationException", "(", "\"removing from uber node is not supported\"", ")", ";", "}", "@", "Override", "public", "UberNode", "next", "(", ")", "{", "index", "=", "findNextChildWithData", "(", ")", ";", "return", "data", ".", "get", "(", "index", "++", ")", ";", "}", "@", "Override", "public", "boolean", "hasNext", "(", ")", "{", "return", "findNextChildWithData", "(", ")", "!=", "-", "1", ";", "}", "private", "int", "findNextChildWithData", "(", ")", "{", "for", "(", "int", "i", "=", "index", ";", "i", "<", "data", ".", "size", "(", ")", ";", "i", "++", ")", "{", "if", "(", "!", "data", ".", "get", "(", "i", ")", ".", "getData", "(", ")", ".", "isEmpty", "(", ")", ")", "{", "return", "i", ";", "}", "}", "return", "-", "1", ";", "}", "}", ";", "}"], "docstring": "Allows iterating over children of this uber node which have a data attribute.", "docstring_tokens": ["Allows", "iterating", "over", "children", "of", "this", "uber", "node", "which", "have", "a", "data", "attribute", "."], "sha": "21f2ec64ed8f8294dcd7705a55477a4f85ed9d0a", "url": "https://github.com/dschulten/hydra-java/blob/21f2ec64ed8f8294dcd7705a55477a4f85ed9d0a/spring-hateoas-ext/src/main/java/de/escalon/hypermedia/spring/uber/AbstractUberNode.java#L106-L140", "partition": "test"}
{"repo": "TooTallNate/Java-WebSocket", "path": "src/main/java/org/java_websocket/client/WebSocketClient.java", "func_name": "WebSocketClient.getPort", "original_string": "private int getPort() {\n\t\tint port = uri.getPort();\n\t\tif( port == -1 ) {\n\t\t\tString scheme = uri.getScheme();\n\t\t\tif( \"wss\".equals( scheme ) ) {\n\t\t\t\treturn WebSocketImpl.DEFAULT_WSS_PORT;\n\t\t\t} else if(  \"ws\".equals( scheme ) ) {\n\t\t\t\treturn WebSocketImpl.DEFAULT_PORT;\n\t\t\t} else {\n\t\t\t\tthrow new IllegalArgumentException( \"unknown scheme: \" + scheme );\n\t\t\t}\n\t\t}\n\t\treturn port;\n\t}", "language": "java", "code": "private int getPort() {\n\t\tint port = uri.getPort();\n\t\tif( port == -1 ) {\n\t\t\tString scheme = uri.getScheme();\n\t\t\tif( \"wss\".equals( scheme ) ) {\n\t\t\t\treturn WebSocketImpl.DEFAULT_WSS_PORT;\n\t\t\t} else if(  \"ws\".equals( scheme ) ) {\n\t\t\t\treturn WebSocketImpl.DEFAULT_PORT;\n\t\t\t} else {\n\t\t\t\tthrow new IllegalArgumentException( \"unknown scheme: \" + scheme );\n\t\t\t}\n\t\t}\n\t\treturn port;\n\t}", "code_tokens": ["private", "int", "getPort", "(", ")", "{", "int", "port", "=", "uri", ".", "getPort", "(", ")", ";", "if", "(", "port", "==", "-", "1", ")", "{", "String", "scheme", "=", "uri", ".", "getScheme", "(", ")", ";", "if", "(", "\"wss\"", ".", "equals", "(", "scheme", ")", ")", "{", "return", "WebSocketImpl", ".", "DEFAULT_WSS_PORT", ";", "}", "else", "if", "(", "\"ws\"", ".", "equals", "(", "scheme", ")", ")", "{", "return", "WebSocketImpl", ".", "DEFAULT_PORT", ";", "}", "else", "{", "throw", "new", "IllegalArgumentException", "(", "\"unknown scheme: \"", "+", "scheme", ")", ";", "}", "}", "return", "port", ";", "}"], "docstring": "Extract the specified port\n@return the specified port or the default port for the specific scheme", "docstring_tokens": ["Extract", "the", "specified", "port"], "sha": "73c6805ca2c7801b2828ffd3ec12e5cb0daefcf9", "url": "https://github.com/TooTallNate/Java-WebSocket/blob/73c6805ca2c7801b2828ffd3ec12e5cb0daefcf9/src/main/java/org/java_websocket/client/WebSocketClient.java#L482-L495", "partition": "test"}
{"repo": "Netflix/hollow", "path": "hollow/src/main/java/com/netflix/hollow/core/index/FieldPaths.java", "func_name": "FieldPaths.createFieldPathForPrimaryKey", "original_string": "public static FieldPath<ObjectFieldSegment> createFieldPathForPrimaryKey(\n            HollowDataset dataset, String type, String path) {\n        boolean autoExpand = !path.endsWith(\"!\");\n        path = autoExpand ? path : path.substring(0, path.length() - 1);\n\n        FieldPath<FieldSegment> fp = createFieldPath(dataset, type, path, autoExpand, false, false);\n\n        // Erasure trick to avoid copying when it is known the list only contains\n        // instances of ObjectFieldSegment\n        assert fp.segments.stream().allMatch(o -> o instanceof ObjectFieldSegment);\n        @SuppressWarnings( {\"unchecked\", \"raw\"})\n        FieldPath<ObjectFieldSegment> result = (FieldPath<ObjectFieldSegment>) (FieldPath) fp;\n        return result;\n    }", "language": "java", "code": "public static FieldPath<ObjectFieldSegment> createFieldPathForPrimaryKey(\n            HollowDataset dataset, String type, String path) {\n        boolean autoExpand = !path.endsWith(\"!\");\n        path = autoExpand ? path : path.substring(0, path.length() - 1);\n\n        FieldPath<FieldSegment> fp = createFieldPath(dataset, type, path, autoExpand, false, false);\n\n        // Erasure trick to avoid copying when it is known the list only contains\n        // instances of ObjectFieldSegment\n        assert fp.segments.stream().allMatch(o -> o instanceof ObjectFieldSegment);\n        @SuppressWarnings( {\"unchecked\", \"raw\"})\n        FieldPath<ObjectFieldSegment> result = (FieldPath<ObjectFieldSegment>) (FieldPath) fp;\n        return result;\n    }", "code_tokens": ["public", "static", "FieldPath", "<", "ObjectFieldSegment", ">", "createFieldPathForPrimaryKey", "(", "HollowDataset", "dataset", ",", "String", "type", ",", "String", "path", ")", "{", "boolean", "autoExpand", "=", "!", "path", ".", "endsWith", "(", "\"!\"", ")", ";", "path", "=", "autoExpand", "?", "path", ":", "path", ".", "substring", "(", "0", ",", "path", ".", "length", "(", ")", "-", "1", ")", ";", "FieldPath", "<", "FieldSegment", ">", "fp", "=", "createFieldPath", "(", "dataset", ",", "type", ",", "path", ",", "autoExpand", ",", "false", ",", "false", ")", ";", "// Erasure trick to avoid copying when it is known the list only contains", "// instances of ObjectFieldSegment", "assert", "fp", ".", "segments", ".", "stream", "(", ")", ".", "allMatch", "(", "o", "->", "o", "instanceof", "ObjectFieldSegment", ")", ";", "@", "SuppressWarnings", "(", "{", "\"unchecked\"", ",", "\"raw\"", "}", ")", "FieldPath", "<", "ObjectFieldSegment", ">", "result", "=", "(", "FieldPath", "<", "ObjectFieldSegment", ">", ")", "(", "FieldPath", ")", "fp", ";", "return", "result", ";", "}"], "docstring": "Creates an object-based field path given a data set and the field path in symbolic form conforming to paths\nassociated with a primary key.\n\n@param dataset the data set\n@param type the type name from which to bind the field path\n@param path the symbolic field path\n@return the field path\n@throws IllegalArgumentException if the symbolic field path is ill-formed and cannot be bound", "docstring_tokens": ["Creates", "an", "object", "-", "based", "field", "path", "given", "a", "data", "set", "and", "the", "field", "path", "in", "symbolic", "form", "conforming", "to", "paths", "associated", "with", "a", "primary", "key", "."], "sha": "43ca100034a01050fb764170bd32b085ac9a3c22", "url": "https://github.com/Netflix/hollow/blob/43ca100034a01050fb764170bd32b085ac9a3c22/hollow/src/main/java/com/netflix/hollow/core/index/FieldPaths.java#L48-L61", "partition": "test"}
{"repo": "vdmeer/execs", "path": "src/main/java/de/vandermeer/execs/cf/CF_Locator.java", "func_name": "CF_Locator.include", "original_string": "protected final void include(String name, File file){\n\t\tif(!file.exists()){\n\t\t\treturn;\n\t\t}\n\t\tif(!file.isDirectory()){\n\t\t\tif(this.jarFilter.size()>0){\n\t\t\t\tboolean ok = false;\n\t\t\t\tfor(String s : this.jarFilter){\n\t\t\t\t\tif(file.getName().startsWith(s)){\n\t\t\t\t\t\tok = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(ok==false){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.includeJar(file);\n\t\t\treturn;\n\t\t}\n\n\t\tif(name==null){\n\t\t\tname = \"\";\n\t\t}\n\t\telse{\n\t\t\tname += \".\";\n\t\t}\n\n\t\tFile[] dirs = file.listFiles(CF_Utils.DIRECTORIES_ONLY);\n\t\tfor(int i=0; i<dirs.length; i++){\n\t\t\ttry{\n\t\t\t\tthis.locationMap.put(new URI(\"file://\" + dirs[i].getCanonicalPath()), name + dirs[i].getName());\n\t\t\t}\n\t\t\tcatch(IOException ignore){return;}\n\t\t\tcatch(URISyntaxException ignore){return;}\n\n\t\t\tthis.include(name + dirs[i].getName(), dirs[i]);\n\t\t}\n\t}", "language": "java", "code": "protected final void include(String name, File file){\n\t\tif(!file.exists()){\n\t\t\treturn;\n\t\t}\n\t\tif(!file.isDirectory()){\n\t\t\tif(this.jarFilter.size()>0){\n\t\t\t\tboolean ok = false;\n\t\t\t\tfor(String s : this.jarFilter){\n\t\t\t\t\tif(file.getName().startsWith(s)){\n\t\t\t\t\t\tok = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(ok==false){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.includeJar(file);\n\t\t\treturn;\n\t\t}\n\n\t\tif(name==null){\n\t\t\tname = \"\";\n\t\t}\n\t\telse{\n\t\t\tname += \".\";\n\t\t}\n\n\t\tFile[] dirs = file.listFiles(CF_Utils.DIRECTORIES_ONLY);\n\t\tfor(int i=0; i<dirs.length; i++){\n\t\t\ttry{\n\t\t\t\tthis.locationMap.put(new URI(\"file://\" + dirs[i].getCanonicalPath()), name + dirs[i].getName());\n\t\t\t}\n\t\t\tcatch(IOException ignore){return;}\n\t\t\tcatch(URISyntaxException ignore){return;}\n\n\t\t\tthis.include(name + dirs[i].getName(), dirs[i]);\n\t\t}\n\t}", "code_tokens": ["protected", "final", "void", "include", "(", "String", "name", ",", "File", "file", ")", "{", "if", "(", "!", "file", ".", "exists", "(", ")", ")", "{", "return", ";", "}", "if", "(", "!", "file", ".", "isDirectory", "(", ")", ")", "{", "if", "(", "this", ".", "jarFilter", ".", "size", "(", ")", ">", "0", ")", "{", "boolean", "ok", "=", "false", ";", "for", "(", "String", "s", ":", "this", ".", "jarFilter", ")", "{", "if", "(", "file", ".", "getName", "(", ")", ".", "startsWith", "(", "s", ")", ")", "{", "ok", "=", "true", ";", "}", "}", "if", "(", "ok", "==", "false", ")", "{", "return", ";", "}", "}", "this", ".", "includeJar", "(", "file", ")", ";", "return", ";", "}", "if", "(", "name", "==", "null", ")", "{", "name", "=", "\"\"", ";", "}", "else", "{", "name", "+=", "\".\"", ";", "}", "File", "[", "]", "dirs", "=", "file", ".", "listFiles", "(", "CF_Utils", ".", "DIRECTORIES_ONLY", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "dirs", ".", "length", ";", "i", "++", ")", "{", "try", "{", "this", ".", "locationMap", ".", "put", "(", "new", "URI", "(", "\"file://\"", "+", "dirs", "[", "i", "]", ".", "getCanonicalPath", "(", ")", ")", ",", "name", "+", "dirs", "[", "i", "]", ".", "getName", "(", ")", ")", ";", "}", "catch", "(", "IOException", "ignore", ")", "{", "return", ";", "}", "catch", "(", "URISyntaxException", "ignore", ")", "{", "return", ";", "}", "this", ".", "include", "(", "name", "+", "dirs", "[", "i", "]", ".", "getName", "(", ")", ",", "dirs", "[", "i", "]", ")", ";", "}", "}"], "docstring": "Include a name and file\n@param name name to be included, if null will be set to empty\n@param file file to be included", "docstring_tokens": ["Include", "a", "name", "and", "file"], "sha": "ac73170bfd449de1f460248d56ece57ff3b0c761", "url": "https://github.com/vdmeer/execs/blob/ac73170bfd449de1f460248d56ece57ff3b0c761/src/main/java/de/vandermeer/execs/cf/CF_Locator.java#L128-L165", "partition": "test"}
{"repo": "Unidata/thredds", "path": "dap4/d4core/src/main/java/dap4/core/util/DapDump.java", "func_name": "DapDump.dumpbytes", "original_string": "static public void\n    dumpbytes(ByteBuffer buf0, boolean skipdmr)\n    {\n        int savepos = buf0.position();\n        int limit0 = buf0.limit();\n        int skipcount = 0;\n        if(limit0 > MAXLIMIT) limit0 = MAXLIMIT;\n        if(limit0 >= buf0.limit()) limit0 = buf0.limit();\n        if(skipdmr) {\n            ByteOrder saveorder = buf0.order();\n            buf0.order(ByteOrder.BIG_ENDIAN); // must read in network order\n            skipcount = buf0.getInt(); //dmr count\n            buf0.order(saveorder);\n            skipcount &= 0xFFFFFF; // mask off the flags to get true count\n            skipcount += 4; // skip the count also\n        }\n        byte[] bytes = new byte[(limit0 + 8) - skipcount];\n        Arrays.fill(bytes, (byte) 0);\n        buf0.position(savepos + skipcount);\n        buf0.get(bytes, 0, limit0 - skipcount);\n        buf0.position(savepos);\n\n        System.err.println(\"order=\"+buf0.order());\n\n        ByteBuffer buf = ByteBuffer.wrap(bytes).order(buf0.order());\n        dumpbytes(buf);\n    }", "language": "java", "code": "static public void\n    dumpbytes(ByteBuffer buf0, boolean skipdmr)\n    {\n        int savepos = buf0.position();\n        int limit0 = buf0.limit();\n        int skipcount = 0;\n        if(limit0 > MAXLIMIT) limit0 = MAXLIMIT;\n        if(limit0 >= buf0.limit()) limit0 = buf0.limit();\n        if(skipdmr) {\n            ByteOrder saveorder = buf0.order();\n            buf0.order(ByteOrder.BIG_ENDIAN); // must read in network order\n            skipcount = buf0.getInt(); //dmr count\n            buf0.order(saveorder);\n            skipcount &= 0xFFFFFF; // mask off the flags to get true count\n            skipcount += 4; // skip the count also\n        }\n        byte[] bytes = new byte[(limit0 + 8) - skipcount];\n        Arrays.fill(bytes, (byte) 0);\n        buf0.position(savepos + skipcount);\n        buf0.get(bytes, 0, limit0 - skipcount);\n        buf0.position(savepos);\n\n        System.err.println(\"order=\"+buf0.order());\n\n        ByteBuffer buf = ByteBuffer.wrap(bytes).order(buf0.order());\n        dumpbytes(buf);\n    }", "code_tokens": ["static", "public", "void", "dumpbytes", "(", "ByteBuffer", "buf0", ",", "boolean", "skipdmr", ")", "{", "int", "savepos", "=", "buf0", ".", "position", "(", ")", ";", "int", "limit0", "=", "buf0", ".", "limit", "(", ")", ";", "int", "skipcount", "=", "0", ";", "if", "(", "limit0", ">", "MAXLIMIT", ")", "limit0", "=", "MAXLIMIT", ";", "if", "(", "limit0", ">=", "buf0", ".", "limit", "(", ")", ")", "limit0", "=", "buf0", ".", "limit", "(", ")", ";", "if", "(", "skipdmr", ")", "{", "ByteOrder", "saveorder", "=", "buf0", ".", "order", "(", ")", ";", "buf0", ".", "order", "(", "ByteOrder", ".", "BIG_ENDIAN", ")", ";", "// must read in network order", "skipcount", "=", "buf0", ".", "getInt", "(", ")", ";", "//dmr count", "buf0", ".", "order", "(", "saveorder", ")", ";", "skipcount", "&=", "0xFFFFFF", ";", "// mask off the flags to get true count", "skipcount", "+=", "4", ";", "// skip the count also", "}", "byte", "[", "]", "bytes", "=", "new", "byte", "[", "(", "limit0", "+", "8", ")", "-", "skipcount", "]", ";", "Arrays", ".", "fill", "(", "bytes", ",", "(", "byte", ")", "0", ")", ";", "buf0", ".", "position", "(", "savepos", "+", "skipcount", ")", ";", "buf0", ".", "get", "(", "bytes", ",", "0", ",", "limit0", "-", "skipcount", ")", ";", "buf0", ".", "position", "(", "savepos", ")", ";", "System", ".", "err", ".", "println", "(", "\"order=\"", "+", "buf0", ".", "order", "(", ")", ")", ";", "ByteBuffer", "buf", "=", "ByteBuffer", ".", "wrap", "(", "bytes", ")", ".", "order", "(", "buf0", ".", "order", "(", ")", ")", ";", "dumpbytes", "(", "buf", ")", ";", "}"], "docstring": "Provide a simple dump of binary data", "docstring_tokens": ["Provide", "a", "simple", "dump", "of", "binary", "data"], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/dap4/d4core/src/main/java/dap4/core/util/DapDump.java#L26-L52", "partition": "test"}
{"repo": "wildfly/wildfly", "path": "pojo/src/main/java/org/jboss/as/pojo/descriptor/BeanMetaDataConfig.java", "func_name": "BeanMetaDataConfig.toInstancesName", "original_string": "public static ServiceName toInstancesName(Class<?> clazz, BeanState state) {\n        String clName;\n        ClassLoader classLoader = clazz.getClassLoader();\n        if (classLoader != null)\n            clName = classLoader.toString();\n        else\n            clName = \"SystemClassLoader\";\n\n        if (state == null)\n            state = BeanState.INSTALLED;\n\n        return JBOSS_POJO.append(clName, clazz.getName(), state.name());\n    }", "language": "java", "code": "public static ServiceName toInstancesName(Class<?> clazz, BeanState state) {\n        String clName;\n        ClassLoader classLoader = clazz.getClassLoader();\n        if (classLoader != null)\n            clName = classLoader.toString();\n        else\n            clName = \"SystemClassLoader\";\n\n        if (state == null)\n            state = BeanState.INSTALLED;\n\n        return JBOSS_POJO.append(clName, clazz.getName(), state.name());\n    }", "code_tokens": ["public", "static", "ServiceName", "toInstancesName", "(", "Class", "<", "?", ">", "clazz", ",", "BeanState", "state", ")", "{", "String", "clName", ";", "ClassLoader", "classLoader", "=", "clazz", ".", "getClassLoader", "(", ")", ";", "if", "(", "classLoader", "!=", "null", ")", "clName", "=", "classLoader", ".", "toString", "(", ")", ";", "else", "clName", "=", "\"SystemClassLoader\"", ";", "if", "(", "state", "==", "null", ")", "state", "=", "BeanState", ".", "INSTALLED", ";", "return", "JBOSS_POJO", ".", "append", "(", "clName", ",", "clazz", ".", "getName", "(", ")", ",", "state", ".", "name", "(", ")", ")", ";", "}"], "docstring": "To instances name.\n\n@param clazz the class\n@param state the bean state\n@return unique instance name", "docstring_tokens": ["To", "instances", "name", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/pojo/src/main/java/org/jboss/as/pojo/descriptor/BeanMetaDataConfig.java#L64-L76", "partition": "test"}
{"repo": "kiegroup/droolsjbpm-tools", "path": "drools-eclipse/org.guvnor.eclipse.webdav/src/interface/org/eclipse/webdav/dom/SupportedLock.java", "func_name": "SupportedLock.addLockEntry", "original_string": "public LockEntry addLockEntry() {\n\n        Element lockentry = addChild(root, \"lockentry\", childNames, false); //$NON-NLS-1$\n        Element locktype = appendChild(lockentry, \"locktype\"); //$NON-NLS-1$\n        appendChild(locktype, \"write\"); //$NON-NLS-1$\n\n        LockEntry result = null;\n        try {\n            result = new LockEntry(lockentry);\n        } catch (MalformedElementException e) {\n            Assert.isTrue(false, Policy.bind(\"assert.internalError\")); //$NON-NLS-1$\n        }\n\n        return result;\n    }", "language": "java", "code": "public LockEntry addLockEntry() {\n\n        Element lockentry = addChild(root, \"lockentry\", childNames, false); //$NON-NLS-1$\n        Element locktype = appendChild(lockentry, \"locktype\"); //$NON-NLS-1$\n        appendChild(locktype, \"write\"); //$NON-NLS-1$\n\n        LockEntry result = null;\n        try {\n            result = new LockEntry(lockentry);\n        } catch (MalformedElementException e) {\n            Assert.isTrue(false, Policy.bind(\"assert.internalError\")); //$NON-NLS-1$\n        }\n\n        return result;\n    }", "code_tokens": ["public", "LockEntry", "addLockEntry", "(", ")", "{", "Element", "lockentry", "=", "addChild", "(", "root", ",", "\"lockentry\"", ",", "childNames", ",", "false", ")", ";", "//$NON-NLS-1$", "Element", "locktype", "=", "appendChild", "(", "lockentry", ",", "\"locktype\"", ")", ";", "//$NON-NLS-1$", "appendChild", "(", "locktype", ",", "\"write\"", ")", ";", "//$NON-NLS-1$", "LockEntry", "result", "=", "null", ";", "try", "{", "result", "=", "new", "LockEntry", "(", "lockentry", ")", ";", "}", "catch", "(", "MalformedElementException", "e", ")", "{", "Assert", ".", "isTrue", "(", "false", ",", "Policy", ".", "bind", "(", "\"assert.internalError\"", ")", ")", ";", "//$NON-NLS-1$", "}", "return", "result", ";", "}"], "docstring": "Creates a new lockentry and adds it to this supported lock. Returns\nan editor on the new lockentry.\n\n@return an editor on a new lockentry for this supportedlock", "docstring_tokens": ["Creates", "a", "new", "lockentry", "and", "adds", "it", "to", "this", "supported", "lock", ".", "Returns", "an", "editor", "on", "the", "new", "lockentry", "."], "sha": "05e1f73c591178360a198dca29f99d73918991db", "url": "https://github.com/kiegroup/droolsjbpm-tools/blob/05e1f73c591178360a198dca29f99d73918991db/drools-eclipse/org.guvnor.eclipse.webdav/src/interface/org/eclipse/webdav/dom/SupportedLock.java#L62-L76", "partition": "test"}
{"repo": "cologneintelligence/FitGoodies", "path": "fitgoodies-core/src/main/java/de/cologneintelligence/fitgoodies/file/FileSystemDirectoryHelper.java", "func_name": "FileSystemDirectoryHelper.getCommonDir", "original_string": "public File getCommonDir(final File dir1, final File dir2) throws IOException {\n\t\tList<File> parts1 = getParentDirs(dir1);\n\t\tList<File> parts2 = getParentDirs(dir2);\n\t\tFile matched = null;\n\n\t\tfinal int maxCommonSize = Math.min(parts1.size(), parts2.size());\n\t\tfor (int i = 0; i < maxCommonSize; ++i) {\n\t\t\tif (parts1.get(i).equals(parts2.get(i))) {\n\t\t\t\tmatched = parts1.get(i);\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn matched;\n\t}", "language": "java", "code": "public File getCommonDir(final File dir1, final File dir2) throws IOException {\n\t\tList<File> parts1 = getParentDirs(dir1);\n\t\tList<File> parts2 = getParentDirs(dir2);\n\t\tFile matched = null;\n\n\t\tfinal int maxCommonSize = Math.min(parts1.size(), parts2.size());\n\t\tfor (int i = 0; i < maxCommonSize; ++i) {\n\t\t\tif (parts1.get(i).equals(parts2.get(i))) {\n\t\t\t\tmatched = parts1.get(i);\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn matched;\n\t}", "code_tokens": ["public", "File", "getCommonDir", "(", "final", "File", "dir1", ",", "final", "File", "dir2", ")", "throws", "IOException", "{", "List", "<", "File", ">", "parts1", "=", "getParentDirs", "(", "dir1", ")", ";", "List", "<", "File", ">", "parts2", "=", "getParentDirs", "(", "dir2", ")", ";", "File", "matched", "=", "null", ";", "final", "int", "maxCommonSize", "=", "Math", ".", "min", "(", "parts1", ".", "size", "(", ")", ",", "parts2", ".", "size", "(", ")", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "maxCommonSize", ";", "++", "i", ")", "{", "if", "(", "parts1", ".", "get", "(", "i", ")", ".", "equals", "(", "parts2", ".", "get", "(", "i", ")", ")", ")", "{", "matched", "=", "parts1", ".", "get", "(", "i", ")", ";", "}", "else", "{", "break", ";", "}", "}", "return", "matched", ";", "}"], "docstring": "Gets the longest common parent directory path of two paths.\n\n@param dir1 first path\n@param dir2 second path\n@return longest common path in {@code dir1} and {@code dir2}\n@throws java.io.IOException Exception which is thrown if paths cannot be normalized", "docstring_tokens": ["Gets", "the", "longest", "common", "parent", "directory", "path", "of", "two", "paths", "."], "sha": "834e42d1f41b4b9226060b1e83a80cc69ea88c7b", "url": "https://github.com/cologneintelligence/FitGoodies/blob/834e42d1f41b4b9226060b1e83a80cc69ea88c7b/fitgoodies-core/src/main/java/de/cologneintelligence/fitgoodies/file/FileSystemDirectoryHelper.java#L104-L119", "partition": "test"}
{"repo": "orientechnologies/orientdb", "path": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/OIdentifier.java", "func_name": "OIdentifier.getStringValue", "original_string": "public String getStringValue() {\n    if (value == null) {\n      return null;\n    }\n    if (value.contains(\"`\")) {\n      return value.replaceAll(\"\\\\\\\\`\", \"`\");\n    }\n    return value;\n  }", "language": "java", "code": "public String getStringValue() {\n    if (value == null) {\n      return null;\n    }\n    if (value.contains(\"`\")) {\n      return value.replaceAll(\"\\\\\\\\`\", \"`\");\n    }\n    return value;\n  }", "code_tokens": ["public", "String", "getStringValue", "(", ")", "{", "if", "(", "value", "==", "null", ")", "{", "return", "null", ";", "}", "if", "(", "value", ".", "contains", "(", "\"`\"", ")", ")", "{", "return", "value", ".", "replaceAll", "(", "\"\\\\\\\\`\"", ",", "\"`\"", ")", ";", "}", "return", "value", ";", "}"], "docstring": "returns the plain string representation of this identifier, with quoting removed from back-ticks\n\n@return", "docstring_tokens": ["returns", "the", "plain", "string", "representation", "of", "this", "identifier", "with", "quoting", "removed", "from", "back", "-", "ticks"], "sha": "d970b12033f0462f0239ea0ad8ed41207e6e26f1", "url": "https://github.com/orientechnologies/orientdb/blob/d970b12033f0462f0239ea0ad8ed41207e6e26f1/core/src/main/java/com/orientechnologies/orient/core/sql/parser/OIdentifier.java#L83-L91", "partition": "test"}
{"repo": "Unidata/thredds", "path": "cdm/src/main/java/ucar/nc2/iosp/uf/Ray.java", "func_name": "Ray.readData", "original_string": "public void readData(RandomAccessFile raf, String abbrev, Range gateRange, IndexIterator ii) throws IOException {\n    long offset = rayOffset;\n    offset += (getDataOffset(abbrev) * 2 - 2);\n    raf.seek(offset);\n    byte[] b2 = new byte[2];\n    int dataCount = getGateCount(abbrev);\n    byte[] data = new byte[dataCount * 2];\n    raf.readFully(data);\n\n    for (int gateIdx : gateRange) {\n      if (gateIdx >= dataCount)\n        ii.setShortNext(uf_header2.missing);\n      else {\n        b2[0] = data[gateIdx * 2];\n        b2[1] = data[gateIdx * 2 + 1];\n        short value = getShort(b2, 0);\n\n        ii.setShortNext(value);\n      }\n    }\n\n  }", "language": "java", "code": "public void readData(RandomAccessFile raf, String abbrev, Range gateRange, IndexIterator ii) throws IOException {\n    long offset = rayOffset;\n    offset += (getDataOffset(abbrev) * 2 - 2);\n    raf.seek(offset);\n    byte[] b2 = new byte[2];\n    int dataCount = getGateCount(abbrev);\n    byte[] data = new byte[dataCount * 2];\n    raf.readFully(data);\n\n    for (int gateIdx : gateRange) {\n      if (gateIdx >= dataCount)\n        ii.setShortNext(uf_header2.missing);\n      else {\n        b2[0] = data[gateIdx * 2];\n        b2[1] = data[gateIdx * 2 + 1];\n        short value = getShort(b2, 0);\n\n        ii.setShortNext(value);\n      }\n    }\n\n  }", "code_tokens": ["public", "void", "readData", "(", "RandomAccessFile", "raf", ",", "String", "abbrev", ",", "Range", "gateRange", ",", "IndexIterator", "ii", ")", "throws", "IOException", "{", "long", "offset", "=", "rayOffset", ";", "offset", "+=", "(", "getDataOffset", "(", "abbrev", ")", "*", "2", "-", "2", ")", ";", "raf", ".", "seek", "(", "offset", ")", ";", "byte", "[", "]", "b2", "=", "new", "byte", "[", "2", "]", ";", "int", "dataCount", "=", "getGateCount", "(", "abbrev", ")", ";", "byte", "[", "]", "data", "=", "new", "byte", "[", "dataCount", "*", "2", "]", ";", "raf", ".", "readFully", "(", "data", ")", ";", "for", "(", "int", "gateIdx", ":", "gateRange", ")", "{", "if", "(", "gateIdx", ">=", "dataCount", ")", "ii", ".", "setShortNext", "(", "uf_header2", ".", "missing", ")", ";", "else", "{", "b2", "[", "0", "]", "=", "data", "[", "gateIdx", "*", "2", "]", ";", "b2", "[", "1", "]", "=", "data", "[", "gateIdx", "*", "2", "+", "1", "]", ";", "short", "value", "=", "getShort", "(", "b2", ",", "0", ")", ";", "ii", ".", "setShortNext", "(", "value", ")", ";", "}", "}", "}"], "docstring": "Read data from this ray.\n\n@param raf       read from this file\n@param abbrev    which data type we want\n@param gateRange handles the possible subset of data to return\n@param ii        put the data here\n@throws java.io.IOException", "docstring_tokens": ["Read", "data", "from", "this", "ray", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/cdm/src/main/java/ucar/nc2/iosp/uf/Ray.java#L447-L468", "partition": "test"}
{"repo": "algolia/algoliasearch-client-android", "path": "algoliasearch/src/main/java/com/algolia/search/saas/AbstractClient.java", "func_name": "AbstractClient._toByteArray", "original_string": "private static byte[] _toByteArray(InputStream stream) throws AlgoliaException {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        int read;\n        byte[] buffer = new byte[1024];\n\n        try {\n            while ((read = stream.read(buffer, 0, buffer.length)) != -1) {\n                out.write(buffer, 0, read);\n            }\n\n            out.flush();\n            return out.toByteArray();\n        } catch (IOException e) {\n            throw new AlgoliaException(\"Error while reading stream: \" + e.getMessage());\n        }\n    }", "language": "java", "code": "private static byte[] _toByteArray(InputStream stream) throws AlgoliaException {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        int read;\n        byte[] buffer = new byte[1024];\n\n        try {\n            while ((read = stream.read(buffer, 0, buffer.length)) != -1) {\n                out.write(buffer, 0, read);\n            }\n\n            out.flush();\n            return out.toByteArray();\n        } catch (IOException e) {\n            throw new AlgoliaException(\"Error while reading stream: \" + e.getMessage());\n        }\n    }", "code_tokens": ["private", "static", "byte", "[", "]", "_toByteArray", "(", "InputStream", "stream", ")", "throws", "AlgoliaException", "{", "ByteArrayOutputStream", "out", "=", "new", "ByteArrayOutputStream", "(", ")", ";", "int", "read", ";", "byte", "[", "]", "buffer", "=", "new", "byte", "[", "1024", "]", ";", "try", "{", "while", "(", "(", "read", "=", "stream", ".", "read", "(", "buffer", ",", "0", ",", "buffer", ".", "length", ")", ")", "!=", "-", "1", ")", "{", "out", ".", "write", "(", "buffer", ",", "0", ",", "read", ")", ";", "}", "out", ".", "flush", "(", ")", ";", "return", "out", ".", "toByteArray", "(", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "throw", "new", "AlgoliaException", "(", "\"Error while reading stream: \"", "+", "e", ".", "getMessage", "(", ")", ")", ";", "}", "}"], "docstring": "Reads the InputStream into a byte array\n\n@param stream the InputStream to read\n@return the stream's content as a byte[]\n@throws AlgoliaException if the stream can't be read or flushed", "docstring_tokens": ["Reads", "the", "InputStream", "into", "a", "byte", "array"], "sha": "3293ba6e6116a4f6c1face2cc606bc047d6d4a3c", "url": "https://github.com/algolia/algoliasearch-client-android/blob/3293ba6e6116a4f6c1face2cc606bc047d6d4a3c/algoliasearch/src/main/java/com/algolia/search/saas/AbstractClient.java#L459-L474", "partition": "test"}
{"repo": "GojaFramework/goja", "path": "goja-core/src/main/java/goja/core/libs/IO.java", "func_name": "IO.readContentAsString", "original_string": "public static String readContentAsString(InputStream is, String encoding) {\n        String res = null;\n        try {\n            res = IOUtils.toString(is, encoding);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            try {\n                is.close();\n            } catch (Exception e) {\n                //\n            }\n        }\n        return res;\n    }", "language": "java", "code": "public static String readContentAsString(InputStream is, String encoding) {\n        String res = null;\n        try {\n            res = IOUtils.toString(is, encoding);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            try {\n                is.close();\n            } catch (Exception e) {\n                //\n            }\n        }\n        return res;\n    }", "code_tokens": ["public", "static", "String", "readContentAsString", "(", "InputStream", "is", ",", "String", "encoding", ")", "{", "String", "res", "=", "null", ";", "try", "{", "res", "=", "IOUtils", ".", "toString", "(", "is", ",", "encoding", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "RuntimeException", "(", "e", ")", ";", "}", "finally", "{", "try", "{", "is", ".", "close", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "//", "}", "}", "return", "res", ";", "}"], "docstring": "Read the Stream content as a string\n\n@param is The stream to read\n@return The String content", "docstring_tokens": ["Read", "the", "Stream", "content", "as", "a", "string"], "sha": "77179b495f668fc1fa20accc912991df6bb2d917", "url": "https://github.com/GojaFramework/goja/blob/77179b495f668fc1fa20accc912991df6bb2d917/goja-core/src/main/java/goja/core/libs/IO.java#L61-L75", "partition": "test"}
{"repo": "orientechnologies/orientdb", "path": "core/src/main/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLDropClass.java", "func_name": "OCommandExecutorSQLDropClass.execute", "original_string": "public Object execute(final Map<Object, Object> iArgs) {\r\n    if (className == null) {\r\n      throw new OCommandExecutionException(\"Cannot execute the command because it has not been parsed yet\");\r\n    }\r\n\r\n    final ODatabaseDocument database = getDatabase();\r\n    if (ifExists && !database.getMetadata().getSchema().existsClass(className)) {\r\n      return true;\r\n    }\r\n    final OClass cls = database.getMetadata().getSchema().getClass(className);\r\n    if (cls == null) {\r\n      return null;\r\n    }\r\n\r\n    final long records = cls.count(true);\r\n\r\n    if (records > 0 && !unsafe) {\r\n      // NOT EMPTY, CHECK IF CLASS IS OF VERTEX OR EDGES\r\n      if (cls.isSubClassOf(\"V\")) {\r\n        // FOUND VERTEX CLASS\r\n        throw new OCommandExecutionException(\"'DROP CLASS' command cannot drop class '\" + className\r\n            + \"' because it contains Vertices. Use 'DELETE VERTEX' command first to avoid broken edges in a database, or apply the 'UNSAFE' keyword to force it\");\r\n      } else if (cls.isSubClassOf(\"E\")) {\r\n        // FOUND EDGE CLASS\r\n        throw new OCommandExecutionException(\"'DROP CLASS' command cannot drop class '\" + className\r\n            + \"' because it contains Edges. Use 'DELETE EDGE' command first to avoid broken vertices in a database, or apply the 'UNSAFE' keyword to force it\");\r\n      }\r\n    }\r\n\r\n    database.getMetadata().getSchema().dropClass(className);\r\n\r\n    if (records > 0 && unsafe) {\r\n      // NOT EMPTY, CHECK IF CLASS IS OF VERTEX OR EDGES\r\n      if (cls.isSubClassOf(\"V\")) {\r\n        // FOUND VERTICES\r\n        if (unsafe)\r\n          OLogManager.instance().warn(this,\r\n              \"Dropped class '%s' containing %d vertices using UNSAFE mode. Database could contain broken edges\", className,\r\n              records);\r\n      } else if (cls.isSubClassOf(\"E\")) {\r\n        // FOUND EDGES\r\n        OLogManager.instance().warn(this,\r\n            \"Dropped class '%s' containing %d edges using UNSAFE mode. Database could contain broken vertices\", className, records);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }", "language": "java", "code": "public Object execute(final Map<Object, Object> iArgs) {\r\n    if (className == null) {\r\n      throw new OCommandExecutionException(\"Cannot execute the command because it has not been parsed yet\");\r\n    }\r\n\r\n    final ODatabaseDocument database = getDatabase();\r\n    if (ifExists && !database.getMetadata().getSchema().existsClass(className)) {\r\n      return true;\r\n    }\r\n    final OClass cls = database.getMetadata().getSchema().getClass(className);\r\n    if (cls == null) {\r\n      return null;\r\n    }\r\n\r\n    final long records = cls.count(true);\r\n\r\n    if (records > 0 && !unsafe) {\r\n      // NOT EMPTY, CHECK IF CLASS IS OF VERTEX OR EDGES\r\n      if (cls.isSubClassOf(\"V\")) {\r\n        // FOUND VERTEX CLASS\r\n        throw new OCommandExecutionException(\"'DROP CLASS' command cannot drop class '\" + className\r\n            + \"' because it contains Vertices. Use 'DELETE VERTEX' command first to avoid broken edges in a database, or apply the 'UNSAFE' keyword to force it\");\r\n      } else if (cls.isSubClassOf(\"E\")) {\r\n        // FOUND EDGE CLASS\r\n        throw new OCommandExecutionException(\"'DROP CLASS' command cannot drop class '\" + className\r\n            + \"' because it contains Edges. Use 'DELETE EDGE' command first to avoid broken vertices in a database, or apply the 'UNSAFE' keyword to force it\");\r\n      }\r\n    }\r\n\r\n    database.getMetadata().getSchema().dropClass(className);\r\n\r\n    if (records > 0 && unsafe) {\r\n      // NOT EMPTY, CHECK IF CLASS IS OF VERTEX OR EDGES\r\n      if (cls.isSubClassOf(\"V\")) {\r\n        // FOUND VERTICES\r\n        if (unsafe)\r\n          OLogManager.instance().warn(this,\r\n              \"Dropped class '%s' containing %d vertices using UNSAFE mode. Database could contain broken edges\", className,\r\n              records);\r\n      } else if (cls.isSubClassOf(\"E\")) {\r\n        // FOUND EDGES\r\n        OLogManager.instance().warn(this,\r\n            \"Dropped class '%s' containing %d edges using UNSAFE mode. Database could contain broken vertices\", className, records);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }", "code_tokens": ["public", "Object", "execute", "(", "final", "Map", "<", "Object", ",", "Object", ">", "iArgs", ")", "{", "if", "(", "className", "==", "null", ")", "{", "throw", "new", "OCommandExecutionException", "(", "\"Cannot execute the command because it has not been parsed yet\"", ")", ";", "}", "final", "ODatabaseDocument", "database", "=", "getDatabase", "(", ")", ";", "if", "(", "ifExists", "&&", "!", "database", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "existsClass", "(", "className", ")", ")", "{", "return", "true", ";", "}", "final", "OClass", "cls", "=", "database", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "getClass", "(", "className", ")", ";", "if", "(", "cls", "==", "null", ")", "{", "return", "null", ";", "}", "final", "long", "records", "=", "cls", ".", "count", "(", "true", ")", ";", "if", "(", "records", ">", "0", "&&", "!", "unsafe", ")", "{", "// NOT EMPTY, CHECK IF CLASS IS OF VERTEX OR EDGES\r", "if", "(", "cls", ".", "isSubClassOf", "(", "\"V\"", ")", ")", "{", "// FOUND VERTEX CLASS\r", "throw", "new", "OCommandExecutionException", "(", "\"'DROP CLASS' command cannot drop class '\"", "+", "className", "+", "\"' because it contains Vertices. Use 'DELETE VERTEX' command first to avoid broken edges in a database, or apply the 'UNSAFE' keyword to force it\"", ")", ";", "}", "else", "if", "(", "cls", ".", "isSubClassOf", "(", "\"E\"", ")", ")", "{", "// FOUND EDGE CLASS\r", "throw", "new", "OCommandExecutionException", "(", "\"'DROP CLASS' command cannot drop class '\"", "+", "className", "+", "\"' because it contains Edges. Use 'DELETE EDGE' command first to avoid broken vertices in a database, or apply the 'UNSAFE' keyword to force it\"", ")", ";", "}", "}", "database", ".", "getMetadata", "(", ")", ".", "getSchema", "(", ")", ".", "dropClass", "(", "className", ")", ";", "if", "(", "records", ">", "0", "&&", "unsafe", ")", "{", "// NOT EMPTY, CHECK IF CLASS IS OF VERTEX OR EDGES\r", "if", "(", "cls", ".", "isSubClassOf", "(", "\"V\"", ")", ")", "{", "// FOUND VERTICES\r", "if", "(", "unsafe", ")", "OLogManager", ".", "instance", "(", ")", ".", "warn", "(", "this", ",", "\"Dropped class '%s' containing %d vertices using UNSAFE mode. Database could contain broken edges\"", ",", "className", ",", "records", ")", ";", "}", "else", "if", "(", "cls", ".", "isSubClassOf", "(", "\"E\"", ")", ")", "{", "// FOUND EDGES\r", "OLogManager", ".", "instance", "(", ")", ".", "warn", "(", "this", ",", "\"Dropped class '%s' containing %d edges using UNSAFE mode. Database could contain broken vertices\"", ",", "className", ",", "records", ")", ";", "}", "}", "return", "true", ";", "}"], "docstring": "Execute the DROP CLASS.", "docstring_tokens": ["Execute", "the", "DROP", "CLASS", "."], "sha": "d970b12033f0462f0239ea0ad8ed41207e6e26f1", "url": "https://github.com/orientechnologies/orientdb/blob/d970b12033f0462f0239ea0ad8ed41207e6e26f1/core/src/main/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLDropClass.java#L119-L166", "partition": "test"}
{"repo": "jboss/jboss-common-core", "path": "src/main/java/org/jboss/net/protocol/file/FileURLConnection.java", "func_name": "FileURLConnection.connect", "original_string": "public void connect() throws IOException\n   {\n      if (connected)\n         return;\n\n      if (!file.exists())\n      {\n         throw new FileNotFoundException(file.getPath());\n      }\n      connected = true;\n   }", "language": "java", "code": "public void connect() throws IOException\n   {\n      if (connected)\n         return;\n\n      if (!file.exists())\n      {\n         throw new FileNotFoundException(file.getPath());\n      }\n      connected = true;\n   }", "code_tokens": ["public", "void", "connect", "(", ")", "throws", "IOException", "{", "if", "(", "connected", ")", "return", ";", "if", "(", "!", "file", ".", "exists", "(", ")", ")", "{", "throw", "new", "FileNotFoundException", "(", "file", ".", "getPath", "(", ")", ")", ";", "}", "connected", "=", "true", ";", "}"], "docstring": "Checks if the underlying file for this connection exists.\n\n@throws FileNotFoundException", "docstring_tokens": ["Checks", "if", "the", "underlying", "file", "for", "this", "connection", "exists", "."], "sha": "c191bb18db83fa106c6913cf34ed47989b65dc97", "url": "https://github.com/jboss/jboss-common-core/blob/c191bb18db83fa106c6913cf34ed47989b65dc97/src/main/java/org/jboss/net/protocol/file/FileURLConnection.java#L118-L128", "partition": "test"}
{"repo": "spring-projects/spring-security", "path": "web/src/main/java/org/springframework/security/web/savedrequest/FastHttpDateFormat.java", "func_name": "FastHttpDateFormat.internalParseDate", "original_string": "private static Long internalParseDate(String value, DateFormat[] formats) {\n\t\tDate date = null;\n\n\t\tfor (int i = 0; (date == null) && (i < formats.length); i++) {\n\t\t\ttry {\n\t\t\t\tdate = formats[i].parse(value);\n\t\t\t}\n\t\t\tcatch (ParseException ignored) {\n\t\t\t}\n\t\t}\n\n\t\tif (date == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn new Long(date.getTime());\n\t}", "language": "java", "code": "private static Long internalParseDate(String value, DateFormat[] formats) {\n\t\tDate date = null;\n\n\t\tfor (int i = 0; (date == null) && (i < formats.length); i++) {\n\t\t\ttry {\n\t\t\t\tdate = formats[i].parse(value);\n\t\t\t}\n\t\t\tcatch (ParseException ignored) {\n\t\t\t}\n\t\t}\n\n\t\tif (date == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn new Long(date.getTime());\n\t}", "code_tokens": ["private", "static", "Long", "internalParseDate", "(", "String", "value", ",", "DateFormat", "[", "]", "formats", ")", "{", "Date", "date", "=", "null", ";", "for", "(", "int", "i", "=", "0", ";", "(", "date", "==", "null", ")", "&&", "(", "i", "<", "formats", ".", "length", ")", ";", "i", "++", ")", "{", "try", "{", "date", "=", "formats", "[", "i", "]", ".", "parse", "(", "value", ")", ";", "}", "catch", "(", "ParseException", "ignored", ")", "{", "}", "}", "if", "(", "date", "==", "null", ")", "{", "return", "null", ";", "}", "return", "new", "Long", "(", "date", ".", "getTime", "(", ")", ")", ";", "}"], "docstring": "Parses date with given formatters.\n\n@param value The string to parse\n@param formats Array of formats to use\n\n@return Parsed date (or <code>null</code> if no formatter mached)", "docstring_tokens": ["Parses", "date", "with", "given", "formatters", "."], "sha": "98a8467e4c2ae05b3e09c67ece856944fa48ed23", "url": "https://github.com/spring-projects/spring-security/blob/98a8467e4c2ae05b3e09c67ece856944fa48ed23/web/src/main/java/org/springframework/security/web/savedrequest/FastHttpDateFormat.java#L148-L164", "partition": "test"}
{"repo": "kiegroup/droolsjbpm-tools", "path": "drools-eclipse/org.guvnor.eclipse.webdav/src/interface/org/eclipse/webdav/dom/ResponseBody.java", "func_name": "ResponseBody.getStatus", "original_string": "public String getStatus() throws MalformedElementException {\n        Element status = getFirstChild(root, \"status\"); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingStatusElmt\"), status); //$NON-NLS-1$\n        return getFirstText(status);\n    }", "language": "java", "code": "public String getStatus() throws MalformedElementException {\n        Element status = getFirstChild(root, \"status\"); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingStatusElmt\"), status); //$NON-NLS-1$\n        return getFirstText(status);\n    }", "code_tokens": ["public", "String", "getStatus", "(", ")", "throws", "MalformedElementException", "{", "Element", "status", "=", "getFirstChild", "(", "root", ",", "\"status\"", ")", ";", "//$NON-NLS-1$", "ensureNotNull", "(", "Policy", ".", "bind", "(", "\"ensure.missingStatusElmt\"", ")", ",", "status", ")", ";", "//$NON-NLS-1$", "return", "getFirstText", "(", "status", ")", ";", "}"], "docstring": "Returns this response's status.\n\n@return this response's status\n@throws MalformedElementException if there is reason to believe that\nthis editor's underlying element is not well formed, or if\nthis response is not in \"status\" form", "docstring_tokens": ["Returns", "this", "response", "s", "status", "."], "sha": "05e1f73c591178360a198dca29f99d73918991db", "url": "https://github.com/kiegroup/droolsjbpm-tools/blob/05e1f73c591178360a198dca29f99d73918991db/drools-eclipse/org.guvnor.eclipse.webdav/src/interface/org/eclipse/webdav/dom/ResponseBody.java#L385-L389", "partition": "test"}
{"repo": "google/guice", "path": "extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java", "func_name": "FactoryProvider2.invoke", "original_string": "@Override\n  public Object invoke(Object proxy, final Method method, final Object[] args) throws Throwable {\n    // If we setup a method handle earlier for this method, call it.\n    // This is necessary for default methods that java8 creates, so we\n    // can call the default method implementation (and not our proxied version of it).\n    if (methodHandleByMethod.containsKey(method)) {\n      return methodHandleByMethod.get(method).invokeWithArguments(args);\n    }\n\n    if (method.getDeclaringClass().equals(Object.class)) {\n      if (\"equals\".equals(method.getName())) {\n        return proxy == args[0];\n      } else if (\"hashCode\".equals(method.getName())) {\n        return System.identityHashCode(proxy);\n      } else {\n        return method.invoke(this, args);\n      }\n    }\n\n    AssistData data = assistDataByMethod.get(method);\n    checkState(data != null, \"No data for method: %s\", method);\n    Provider<?> provider;\n    if (data.cachedBinding != null) { // Try to get optimized form...\n      provider = data.cachedBinding.getProvider();\n    } else {\n      provider = getBindingFromNewInjector(method, args, data).getProvider();\n    }\n    try {\n      int p = 0;\n      for (ThreadLocalProvider tlp : data.providers) {\n        tlp.set(args[p++]);\n      }\n      return provider.get();\n    } catch (ProvisionException e) {\n      // if this is an exception declared by the factory method, throw it as-is\n      if (e.getErrorMessages().size() == 1) {\n        Message onlyError = getOnlyElement(e.getErrorMessages());\n        Throwable cause = onlyError.getCause();\n        if (cause != null && canRethrow(method, cause)) {\n          throw cause;\n        }\n      }\n      throw e;\n    } finally {\n      for (ThreadLocalProvider tlp : data.providers) {\n        tlp.remove();\n      }\n    }\n  }", "language": "java", "code": "@Override\n  public Object invoke(Object proxy, final Method method, final Object[] args) throws Throwable {\n    // If we setup a method handle earlier for this method, call it.\n    // This is necessary for default methods that java8 creates, so we\n    // can call the default method implementation (and not our proxied version of it).\n    if (methodHandleByMethod.containsKey(method)) {\n      return methodHandleByMethod.get(method).invokeWithArguments(args);\n    }\n\n    if (method.getDeclaringClass().equals(Object.class)) {\n      if (\"equals\".equals(method.getName())) {\n        return proxy == args[0];\n      } else if (\"hashCode\".equals(method.getName())) {\n        return System.identityHashCode(proxy);\n      } else {\n        return method.invoke(this, args);\n      }\n    }\n\n    AssistData data = assistDataByMethod.get(method);\n    checkState(data != null, \"No data for method: %s\", method);\n    Provider<?> provider;\n    if (data.cachedBinding != null) { // Try to get optimized form...\n      provider = data.cachedBinding.getProvider();\n    } else {\n      provider = getBindingFromNewInjector(method, args, data).getProvider();\n    }\n    try {\n      int p = 0;\n      for (ThreadLocalProvider tlp : data.providers) {\n        tlp.set(args[p++]);\n      }\n      return provider.get();\n    } catch (ProvisionException e) {\n      // if this is an exception declared by the factory method, throw it as-is\n      if (e.getErrorMessages().size() == 1) {\n        Message onlyError = getOnlyElement(e.getErrorMessages());\n        Throwable cause = onlyError.getCause();\n        if (cause != null && canRethrow(method, cause)) {\n          throw cause;\n        }\n      }\n      throw e;\n    } finally {\n      for (ThreadLocalProvider tlp : data.providers) {\n        tlp.remove();\n      }\n    }\n  }", "code_tokens": ["@", "Override", "public", "Object", "invoke", "(", "Object", "proxy", ",", "final", "Method", "method", ",", "final", "Object", "[", "]", "args", ")", "throws", "Throwable", "{", "// If we setup a method handle earlier for this method, call it.", "// This is necessary for default methods that java8 creates, so we", "// can call the default method implementation (and not our proxied version of it).", "if", "(", "methodHandleByMethod", ".", "containsKey", "(", "method", ")", ")", "{", "return", "methodHandleByMethod", ".", "get", "(", "method", ")", ".", "invokeWithArguments", "(", "args", ")", ";", "}", "if", "(", "method", ".", "getDeclaringClass", "(", ")", ".", "equals", "(", "Object", ".", "class", ")", ")", "{", "if", "(", "\"equals\"", ".", "equals", "(", "method", ".", "getName", "(", ")", ")", ")", "{", "return", "proxy", "==", "args", "[", "0", "]", ";", "}", "else", "if", "(", "\"hashCode\"", ".", "equals", "(", "method", ".", "getName", "(", ")", ")", ")", "{", "return", "System", ".", "identityHashCode", "(", "proxy", ")", ";", "}", "else", "{", "return", "method", ".", "invoke", "(", "this", ",", "args", ")", ";", "}", "}", "AssistData", "data", "=", "assistDataByMethod", ".", "get", "(", "method", ")", ";", "checkState", "(", "data", "!=", "null", ",", "\"No data for method: %s\"", ",", "method", ")", ";", "Provider", "<", "?", ">", "provider", ";", "if", "(", "data", ".", "cachedBinding", "!=", "null", ")", "{", "// Try to get optimized form...", "provider", "=", "data", ".", "cachedBinding", ".", "getProvider", "(", ")", ";", "}", "else", "{", "provider", "=", "getBindingFromNewInjector", "(", "method", ",", "args", ",", "data", ")", ".", "getProvider", "(", ")", ";", "}", "try", "{", "int", "p", "=", "0", ";", "for", "(", "ThreadLocalProvider", "tlp", ":", "data", ".", "providers", ")", "{", "tlp", ".", "set", "(", "args", "[", "p", "++", "]", ")", ";", "}", "return", "provider", ".", "get", "(", ")", ";", "}", "catch", "(", "ProvisionException", "e", ")", "{", "// if this is an exception declared by the factory method, throw it as-is", "if", "(", "e", ".", "getErrorMessages", "(", ")", ".", "size", "(", ")", "==", "1", ")", "{", "Message", "onlyError", "=", "getOnlyElement", "(", "e", ".", "getErrorMessages", "(", ")", ")", ";", "Throwable", "cause", "=", "onlyError", ".", "getCause", "(", ")", ";", "if", "(", "cause", "!=", "null", "&&", "canRethrow", "(", "method", ",", "cause", ")", ")", "{", "throw", "cause", ";", "}", "}", "throw", "e", ";", "}", "finally", "{", "for", "(", "ThreadLocalProvider", "tlp", ":", "data", ".", "providers", ")", "{", "tlp", ".", "remove", "(", ")", ";", "}", "}", "}"], "docstring": "When a factory method is invoked, we create a child injector that binds all parameters, then\nuse that to get an instance of the return type.", "docstring_tokens": ["When", "a", "factory", "method", "is", "invoked", "we", "create", "a", "child", "injector", "that", "binds", "all", "parameters", "then", "use", "that", "to", "get", "an", "instance", "of", "the", "return", "type", "."], "sha": "a0552a16d813ead98fe73737fb001db336650251", "url": "https://github.com/google/guice/blob/a0552a16d813ead98fe73737fb001db336650251/extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java#L806-L854", "partition": "test"}
{"repo": "CAFapi/caf-common", "path": "util-jerseycompat/src/main/java/com/hpe/caf/util/jerseycompat/Jersey2ServiceIteratorProvider.java", "func_name": "Jersey2ServiceIteratorProvider.createClassIterator", "original_string": "@Override\n    public <T> Iterator<Class<T>> createClassIterator(\n        final Class<T> service,\n        final String serviceName,\n        final ClassLoader loader,\n        final boolean ignoreOnClassNotFound\n    )\n    {\n        final Iterator<Class<T>> delegateClassIterator = delegate.createClassIterator(\n            service, serviceName, loader, ignoreOnClassNotFound);\n\n        Stream<Class<T>> stream = StreamSupport.stream(\n            Spliterators.spliteratorUnknownSize(delegateClassIterator, Spliterator.ORDERED), false);\n\n        return stream.filter(t -> !t.getPackage().getName().startsWith(\"com.sun.jersey\")).collect(Collectors.toList()).iterator();\n    }", "language": "java", "code": "@Override\n    public <T> Iterator<Class<T>> createClassIterator(\n        final Class<T> service,\n        final String serviceName,\n        final ClassLoader loader,\n        final boolean ignoreOnClassNotFound\n    )\n    {\n        final Iterator<Class<T>> delegateClassIterator = delegate.createClassIterator(\n            service, serviceName, loader, ignoreOnClassNotFound);\n\n        Stream<Class<T>> stream = StreamSupport.stream(\n            Spliterators.spliteratorUnknownSize(delegateClassIterator, Spliterator.ORDERED), false);\n\n        return stream.filter(t -> !t.getPackage().getName().startsWith(\"com.sun.jersey\")).collect(Collectors.toList()).iterator();\n    }", "code_tokens": ["@", "Override", "public", "<", "T", ">", "Iterator", "<", "Class", "<", "T", ">", ">", "createClassIterator", "(", "final", "Class", "<", "T", ">", "service", ",", "final", "String", "serviceName", ",", "final", "ClassLoader", "loader", ",", "final", "boolean", "ignoreOnClassNotFound", ")", "{", "final", "Iterator", "<", "Class", "<", "T", ">", ">", "delegateClassIterator", "=", "delegate", ".", "createClassIterator", "(", "service", ",", "serviceName", ",", "loader", ",", "ignoreOnClassNotFound", ")", ";", "Stream", "<", "Class", "<", "T", ">", ">", "stream", "=", "StreamSupport", ".", "stream", "(", "Spliterators", ".", "spliteratorUnknownSize", "(", "delegateClassIterator", ",", "Spliterator", ".", "ORDERED", ")", ",", "false", ")", ";", "return", "stream", ".", "filter", "(", "t", "->", "!", "t", ".", "getPackage", "(", ")", ".", "getName", "(", ")", ".", "startsWith", "(", "\"com.sun.jersey\"", ")", ")", ".", "collect", "(", "Collectors", ".", "toList", "(", ")", ")", ".", "iterator", "(", ")", ";", "}"], "docstring": "Excludes all \"com.sun.jersey\" classes.", "docstring_tokens": ["Excludes", "all", "com", ".", "sun", ".", "jersey", "classes", "."], "sha": "c9e617cd0b39e19d9480653f8c82efee53dee885", "url": "https://github.com/CAFapi/caf-common/blob/c9e617cd0b39e19d9480653f8c82efee53dee885/util-jerseycompat/src/main/java/com/hpe/caf/util/jerseycompat/Jersey2ServiceIteratorProvider.java#L51-L66", "partition": "test"}
{"repo": "objectify/objectify", "path": "src/main/java/com/googlecode/objectify/Key.java", "func_name": "Key.key", "original_string": "public static com.google.cloud.datastore.Key key(final Key<?> typed) {\r\n\t\tif (typed == null)\r\n\t\t\treturn null;\r\n\t\telse\r\n\t\t\treturn typed.getRaw();\r\n\t}", "language": "java", "code": "public static com.google.cloud.datastore.Key key(final Key<?> typed) {\r\n\t\tif (typed == null)\r\n\t\t\treturn null;\r\n\t\telse\r\n\t\t\treturn typed.getRaw();\r\n\t}", "code_tokens": ["public", "static", "com", ".", "google", ".", "cloud", ".", "datastore", ".", "Key", "key", "(", "final", "Key", "<", "?", ">", "typed", ")", "{", "if", "(", "typed", "==", "null", ")", "return", "null", ";", "else", "return", "typed", ".", "getRaw", "(", ")", ";", "}"], "docstring": "Easy null-safe conversion of the typed key.", "docstring_tokens": ["Easy", "null", "-", "safe", "conversion", "of", "the", "typed", "key", "."], "sha": "4bf325d2e49b400326416977c7d9bbdf5380175b", "url": "https://github.com/objectify/objectify/blob/4bf325d2e49b400326416977c7d9bbdf5380175b/src/main/java/com/googlecode/objectify/Key.java#L341-L346", "partition": "test"}
