{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/processors/MulticastProcessor.java", "func_name": "MulticastProcessor.startUnbounded", "original_string": "public void startUnbounded() {\n        if (SubscriptionHelper.setOnce(upstream, EmptySubscription.INSTANCE)) {\n            queue = new SpscLinkedArrayQueue<T>(bufferSize);\n        }\n    }", "language": "java", "code": "public void startUnbounded() {\n        if (SubscriptionHelper.setOnce(upstream, EmptySubscription.INSTANCE)) {\n            queue = new SpscLinkedArrayQueue<T>(bufferSize);\n        }\n    }", "code_tokens": ["public", "void", "startUnbounded", "(", ")", "{", "if", "(", "SubscriptionHelper", ".", "setOnce", "(", "upstream", ",", "EmptySubscription", ".", "INSTANCE", ")", ")", "{", "queue", "=", "new", "SpscLinkedArrayQueue", "<", "T", ">", "(", "bufferSize", ")", ";", "}", "}"], "docstring": "Initializes this Processor by setting an upstream Subscription that\nignores request amounts, uses an unbounded buffer\nand allows using the onXXX and offer methods\nafterwards.", "docstring_tokens": ["Initializes", "this", "Processor", "by", "setting", "an", "upstream", "Subscription", "that", "ignores", "request", "amounts", "uses", "an", "unbounded", "buffer", "and", "allows", "using", "the", "onXXX", "and", "offer", "methods", "afterwards", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/processors/MulticastProcessor.java#L253-L257", "partition": "test"}
{"repo": "rupertlssmith/lojix", "path": "lojix/logic/src/main/com/thesett/aima/logic/fol/builder/TermBuilder.java", "func_name": "TermBuilder.var", "original_string": "public Variable var(String name)\n    {\n        boolean isAnonymous = name.startsWith(\"_\");\n        int internedName = interner.internVariableName(name);\n\n        return new Variable(internedName, null, isAnonymous);\n    }", "language": "java", "code": "public Variable var(String name)\n    {\n        boolean isAnonymous = name.startsWith(\"_\");\n        int internedName = interner.internVariableName(name);\n\n        return new Variable(internedName, null, isAnonymous);\n    }", "code_tokens": ["public", "Variable", "var", "(", "String", "name", ")", "{", "boolean", "isAnonymous", "=", "name", ".", "startsWith", "(", "\"_\"", ")", ";", "int", "internedName", "=", "interner", ".", "internVariableName", "(", "name", ")", ";", "return", "new", "Variable", "(", "internedName", ",", "null", ",", "isAnonymous", ")", ";", "}"], "docstring": "Creates a variable. If the variable name begins with an underscore \"_\", it will be anonymous, otherwise it will\nbe named.\n\n@param  name The name of the variable.\n\n@return A variable.", "docstring_tokens": ["Creates", "a", "variable", ".", "If", "the", "variable", "name", "begins", "with", "an", "underscore", "_", "it", "will", "be", "anonymous", "otherwise", "it", "will", "be", "named", "."], "sha": "ad494dc8bce2345567de7689d42291d4b30fbd51", "url": "https://github.com/rupertlssmith/lojix/blob/ad494dc8bce2345567de7689d42291d4b30fbd51/lojix/logic/src/main/com/thesett/aima/logic/fol/builder/TermBuilder.java#L100-L106", "partition": "test"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/WebMetaDataCreator.java", "func_name": "WebMetaDataCreator.createWebAppDescriptor", "original_string": "private void createWebAppDescriptor(final Deployment dep, final JBossWebMetaData jbossWebMD) {\n        WSLogger.ROOT_LOGGER.trace(\"Creating web.xml descriptor\");\n        createServlets(dep, jbossWebMD);\n        createServletMappings(dep, jbossWebMD);\n        createSecurityConstraints(dep, jbossWebMD);\n        createLoginConfig(dep, jbossWebMD);\n        createSecurityRoles(dep, jbossWebMD);\n    }", "language": "java", "code": "private void createWebAppDescriptor(final Deployment dep, final JBossWebMetaData jbossWebMD) {\n        WSLogger.ROOT_LOGGER.trace(\"Creating web.xml descriptor\");\n        createServlets(dep, jbossWebMD);\n        createServletMappings(dep, jbossWebMD);\n        createSecurityConstraints(dep, jbossWebMD);\n        createLoginConfig(dep, jbossWebMD);\n        createSecurityRoles(dep, jbossWebMD);\n    }", "code_tokens": ["private", "void", "createWebAppDescriptor", "(", "final", "Deployment", "dep", ",", "final", "JBossWebMetaData", "jbossWebMD", ")", "{", "WSLogger", ".", "ROOT_LOGGER", ".", "trace", "(", "\"Creating web.xml descriptor\"", ")", ";", "createServlets", "(", "dep", ",", "jbossWebMD", ")", ";", "createServletMappings", "(", "dep", ",", "jbossWebMD", ")", ";", "createSecurityConstraints", "(", "dep", ",", "jbossWebMD", ")", ";", "createLoginConfig", "(", "dep", ",", "jbossWebMD", ")", ";", "createSecurityRoles", "(", "dep", ",", "jbossWebMD", ")", ";", "}"], "docstring": "Creates web.xml descriptor meta data.\n\n@param dep        webservice deployment\n@param jbossWebMD jboss web meta data", "docstring_tokens": ["Creates", "web", ".", "xml", "descriptor", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/WebMetaDataCreator.java#L91-L98", "partition": "test"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java", "func_name": "CoverageData.getCoverageData", "original_string": "public static CoverageData<?> getCoverageData(GeoPackage geoPackage,\n                                                  TileDao tileDao, Integer width, Integer height,\n                                                  Projection requestProjection) {\n\n        TileMatrixSet tileMatrixSet = tileDao.getTileMatrixSet();\n        GriddedCoverageDao griddedCoverageDao = geoPackage\n                .getGriddedCoverageDao();\n\n        GriddedCoverage griddedCoverage = null;\n        try {\n            if (griddedCoverageDao.isTableExists()) {\n                griddedCoverage = griddedCoverageDao.query(tileMatrixSet);\n            }\n        } catch (SQLException e) {\n            throw new GeoPackageException(\n                    \"Failed to get Gridded Coverage for table name: \"\n                            + tileMatrixSet.getTableName(), e);\n        }\n\n        CoverageData<?> coverageData = null;\n\n        GriddedCoverageDataType dataType = griddedCoverage.getDataType();\n        switch (dataType) {\n            case INTEGER:\n                coverageData = new CoverageDataPng(geoPackage, tileDao, width,\n                        height, requestProjection);\n                break;\n            case FLOAT:\n                coverageData = new CoverageDataTiff(geoPackage, tileDao, width,\n                        height, requestProjection);\n                break;\n            default:\n                throw new GeoPackageException(\n                        \"Unsupported Gridded Coverage Data Type: \" + dataType);\n        }\n\n        return coverageData;\n    }", "language": "java", "code": "public static CoverageData<?> getCoverageData(GeoPackage geoPackage,\n                                                  TileDao tileDao, Integer width, Integer height,\n                                                  Projection requestProjection) {\n\n        TileMatrixSet tileMatrixSet = tileDao.getTileMatrixSet();\n        GriddedCoverageDao griddedCoverageDao = geoPackage\n                .getGriddedCoverageDao();\n\n        GriddedCoverage griddedCoverage = null;\n        try {\n            if (griddedCoverageDao.isTableExists()) {\n                griddedCoverage = griddedCoverageDao.query(tileMatrixSet);\n            }\n        } catch (SQLException e) {\n            throw new GeoPackageException(\n                    \"Failed to get Gridded Coverage for table name: \"\n                            + tileMatrixSet.getTableName(), e);\n        }\n\n        CoverageData<?> coverageData = null;\n\n        GriddedCoverageDataType dataType = griddedCoverage.getDataType();\n        switch (dataType) {\n            case INTEGER:\n                coverageData = new CoverageDataPng(geoPackage, tileDao, width,\n                        height, requestProjection);\n                break;\n            case FLOAT:\n                coverageData = new CoverageDataTiff(geoPackage, tileDao, width,\n                        height, requestProjection);\n                break;\n            default:\n                throw new GeoPackageException(\n                        \"Unsupported Gridded Coverage Data Type: \" + dataType);\n        }\n\n        return coverageData;\n    }", "code_tokens": ["public", "static", "CoverageData", "<", "?", ">", "getCoverageData", "(", "GeoPackage", "geoPackage", ",", "TileDao", "tileDao", ",", "Integer", "width", ",", "Integer", "height", ",", "Projection", "requestProjection", ")", "{", "TileMatrixSet", "tileMatrixSet", "=", "tileDao", ".", "getTileMatrixSet", "(", ")", ";", "GriddedCoverageDao", "griddedCoverageDao", "=", "geoPackage", ".", "getGriddedCoverageDao", "(", ")", ";", "GriddedCoverage", "griddedCoverage", "=", "null", ";", "try", "{", "if", "(", "griddedCoverageDao", ".", "isTableExists", "(", ")", ")", "{", "griddedCoverage", "=", "griddedCoverageDao", ".", "query", "(", "tileMatrixSet", ")", ";", "}", "}", "catch", "(", "SQLException", "e", ")", "{", "throw", "new", "GeoPackageException", "(", "\"Failed to get Gridded Coverage for table name: \"", "+", "tileMatrixSet", ".", "getTableName", "(", ")", ",", "e", ")", ";", "}", "CoverageData", "<", "?", ">", "coverageData", "=", "null", ";", "GriddedCoverageDataType", "dataType", "=", "griddedCoverage", ".", "getDataType", "(", ")", ";", "switch", "(", "dataType", ")", "{", "case", "INTEGER", ":", "coverageData", "=", "new", "CoverageDataPng", "(", "geoPackage", ",", "tileDao", ",", "width", ",", "height", ",", "requestProjection", ")", ";", "break", ";", "case", "FLOAT", ":", "coverageData", "=", "new", "CoverageDataTiff", "(", "geoPackage", ",", "tileDao", ",", "width", ",", "height", ",", "requestProjection", ")", ";", "break", ";", "default", ":", "throw", "new", "GeoPackageException", "(", "\"Unsupported Gridded Coverage Data Type: \"", "+", "dataType", ")", ";", "}", "return", "coverageData", ";", "}"], "docstring": "Get a Tiled Gridded Coverage Data\n\n@param geoPackage        GeoPackage\n@param tileDao           tile dao\n@param width             coverage data response width\n@param height            coverage data response height\n@param requestProjection request projection\n@return coverage data", "docstring_tokens": ["Get", "a", "Tiled", "Gridded", "Coverage", "Data"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java#L44-L81", "partition": "test"}
{"repo": "tiefaces/TieFaces", "path": "src/org/tiefaces/components/websheet/chart/ChartData.java", "func_name": "ChartData.getDPtFromListWithIndex", "original_string": "private CTDPt getDPtFromListWithIndex(final List<CTDPt> dptList,\r\n\t\t\tfinal int index) {\r\n\r\n\t\tif (dptList != null) {\r\n\t\t\tfor (CTDPt dpt : dptList) {\r\n\t\t\t\tif (dpt.getIdx().getVal() == index) {\r\n\t\t\t\t\treturn dpt;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}", "language": "java", "code": "private CTDPt getDPtFromListWithIndex(final List<CTDPt> dptList,\r\n\t\t\tfinal int index) {\r\n\r\n\t\tif (dptList != null) {\r\n\t\t\tfor (CTDPt dpt : dptList) {\r\n\t\t\t\tif (dpt.getIdx().getVal() == index) {\r\n\t\t\t\t\treturn dpt;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}", "code_tokens": ["private", "CTDPt", "getDPtFromListWithIndex", "(", "final", "List", "<", "CTDPt", ">", "dptList", ",", "final", "int", "index", ")", "{", "if", "(", "dptList", "!=", "null", ")", "{", "for", "(", "CTDPt", "dpt", ":", "dptList", ")", "{", "if", "(", "dpt", ".", "getIdx", "(", ")", ".", "getVal", "(", ")", "==", "index", ")", "{", "return", "dpt", ";", "}", "}", "}", "return", "null", ";", "}"], "docstring": "get dpt from list.\n\n@param dptList\ndptlist.\n@param index\nindex.\n@return ctdpt.", "docstring_tokens": ["get", "dpt", "from", "list", "."], "sha": "3b57b9701ed0f080b5fa4fa78269cc0c422b34ba", "url": "https://github.com/tiefaces/TieFaces/blob/3b57b9701ed0f080b5fa4fa78269cc0c422b34ba/src/org/tiefaces/components/websheet/chart/ChartData.java#L262-L273", "partition": "test"}
{"repo": "apache/parquet-mr", "path": "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileReader.java", "func_name": "ParquetFileReader.readSummaryFile", "original_string": "@Deprecated\n  public static List<Footer> readSummaryFile(Configuration configuration, FileStatus summaryStatus) throws IOException {\n    final Path parent = summaryStatus.getPath().getParent();\n    ParquetMetadata mergedFooters = readFooter(configuration, summaryStatus, filter(false));\n    return footersFromSummaryFile(parent, mergedFooters);\n  }", "language": "java", "code": "@Deprecated\n  public static List<Footer> readSummaryFile(Configuration configuration, FileStatus summaryStatus) throws IOException {\n    final Path parent = summaryStatus.getPath().getParent();\n    ParquetMetadata mergedFooters = readFooter(configuration, summaryStatus, filter(false));\n    return footersFromSummaryFile(parent, mergedFooters);\n  }", "code_tokens": ["@", "Deprecated", "public", "static", "List", "<", "Footer", ">", "readSummaryFile", "(", "Configuration", "configuration", ",", "FileStatus", "summaryStatus", ")", "throws", "IOException", "{", "final", "Path", "parent", "=", "summaryStatus", ".", "getPath", "(", ")", ".", "getParent", "(", ")", ";", "ParquetMetadata", "mergedFooters", "=", "readFooter", "(", "configuration", ",", "summaryStatus", ",", "filter", "(", "false", ")", ")", ";", "return", "footersFromSummaryFile", "(", "parent", ",", "mergedFooters", ")", ";", "}"], "docstring": "Specifically reads a given summary file\n@param configuration a configuration\n@param summaryStatus file status for a summary file\n@return the metadata translated for each file\n@throws IOException if an exception is thrown while reading the summary file\n@deprecated metadata files are not recommended and will be removed in 2.0.0", "docstring_tokens": ["Specifically", "reads", "a", "given", "summary", "file"], "sha": "62dcc68acaf64012bf731e103be780956f1f446d", "url": "https://github.com/apache/parquet-mr/blob/62dcc68acaf64012bf731e103be780956f1f446d/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileReader.java#L389-L394", "partition": "test"}
{"repo": "streamsets/datacollector", "path": "container/src/main/java/com/streamsets/datacollector/runner/PipeRunner.java", "func_name": "PipeRunner.forEach", "original_string": "public void forEach(ThrowingConsumer<Pipe> consumer) {\n    try {\n      MDC.put(LogConstants.RUNNER, String.valueOf(runnerId));\n      try {\n        for(Pipe p : pipes) {\n          MDC.put(LogConstants.STAGE, p.getStage().getInfo().getInstanceName());\n          acceptConsumer(consumer, p);\n        }\n      } finally {\n        MDC.put(LogConstants.RUNNER, \"\");\n        MDC.put(LogConstants.STAGE, \"\");\n      }\n    } catch (PipelineException|StageException e) {\n      throw new RuntimeException(e);\n    }\n  }", "language": "java", "code": "public void forEach(ThrowingConsumer<Pipe> consumer) {\n    try {\n      MDC.put(LogConstants.RUNNER, String.valueOf(runnerId));\n      try {\n        for(Pipe p : pipes) {\n          MDC.put(LogConstants.STAGE, p.getStage().getInfo().getInstanceName());\n          acceptConsumer(consumer, p);\n        }\n      } finally {\n        MDC.put(LogConstants.RUNNER, \"\");\n        MDC.put(LogConstants.STAGE, \"\");\n      }\n    } catch (PipelineException|StageException e) {\n      throw new RuntimeException(e);\n    }\n  }", "code_tokens": ["public", "void", "forEach", "(", "ThrowingConsumer", "<", "Pipe", ">", "consumer", ")", "{", "try", "{", "MDC", ".", "put", "(", "LogConstants", ".", "RUNNER", ",", "String", ".", "valueOf", "(", "runnerId", ")", ")", ";", "try", "{", "for", "(", "Pipe", "p", ":", "pipes", ")", "{", "MDC", ".", "put", "(", "LogConstants", ".", "STAGE", ",", "p", ".", "getStage", "(", ")", ".", "getInfo", "(", ")", ".", "getInstanceName", "(", ")", ")", ";", "acceptConsumer", "(", "consumer", ",", "p", ")", ";", "}", "}", "finally", "{", "MDC", ".", "put", "(", "LogConstants", ".", "RUNNER", ",", "\"\"", ")", ";", "MDC", ".", "put", "(", "LogConstants", ".", "STAGE", ",", "\"\"", ")", ";", "}", "}", "catch", "(", "PipelineException", "|", "StageException", "e", ")", "{", "throw", "new", "RuntimeException", "(", "e", ")", ";", "}", "}"], "docstring": "Execute given consumer for each pipe, rethrowing usual exceptions as RuntimeException.\n\nSuitable for consumer that is not suppose to throw PipelineException and StageException. This method will\nnot calculate usual stage metrics.", "docstring_tokens": ["Execute", "given", "consumer", "for", "each", "pipe", "rethrowing", "usual", "exceptions", "as", "RuntimeException", "."], "sha": "ea63245ea14d59d5229248387f0628f46131eae5", "url": "https://github.com/streamsets/datacollector/blob/ea63245ea14d59d5229248387f0628f46131eae5/container/src/main/java/com/streamsets/datacollector/runner/PipeRunner.java#L169-L184", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/deployment/profile/jpa/ConcreteProfileGenerator.java", "func_name": "ConcreteProfileGenerator.generateNamedUsageParameterGetter", "original_string": "private void generateNamedUsageParameterGetter(CtClass profileConcreteClass) {\r\n\t\tString methodName = \"getUsageParameterSet\";\r\n\t\tfor (CtMethod ctMethod : profileConcreteClass.getMethods()) {\r\n\t\t\tif (ctMethod.getName().equals(methodName)) {\t\t\t\t\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// copy method, we can't just add body becase it is in super\r\n\t\t\t\t\t// class and does not sees profileObject field\r\n\t\t\t\t\tCtMethod ctMethodCopy =  CtNewMethod.copy(ctMethod, profileConcreteClass, null);\r\n\t\t\t\t\t// create the method body\r\n\t\t\t\t\tString methodBody = \"{ return ($r)\"\r\n\t\t\t\t\t\t+ ClassGeneratorUtils.MANAGEMENT_HANDLER\r\n\t\t\t\t\t\t+ \".getUsageParameterSet(profileObject,$1); }\";\r\n\t\t\t\t\tif (logger.isTraceEnabled())\r\n\t\t\t\t\t\tlogger.trace(\"Implemented method \" + methodName\r\n\t\t\t\t\t\t\t\t+ \" , body = \" + methodBody);\r\n\t\t\t\t\tctMethodCopy.setBody(methodBody);\r\n\t\t\t\t\tprofileConcreteClass.addMethod(ctMethodCopy);\r\n\t\t\t\t} catch (CannotCompileException e) {\r\n\t\t\t\t\tthrow new SLEEException(e.getMessage(), e);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}", "language": "java", "code": "private void generateNamedUsageParameterGetter(CtClass profileConcreteClass) {\r\n\t\tString methodName = \"getUsageParameterSet\";\r\n\t\tfor (CtMethod ctMethod : profileConcreteClass.getMethods()) {\r\n\t\t\tif (ctMethod.getName().equals(methodName)) {\t\t\t\t\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// copy method, we can't just add body becase it is in super\r\n\t\t\t\t\t// class and does not sees profileObject field\r\n\t\t\t\t\tCtMethod ctMethodCopy =  CtNewMethod.copy(ctMethod, profileConcreteClass, null);\r\n\t\t\t\t\t// create the method body\r\n\t\t\t\t\tString methodBody = \"{ return ($r)\"\r\n\t\t\t\t\t\t+ ClassGeneratorUtils.MANAGEMENT_HANDLER\r\n\t\t\t\t\t\t+ \".getUsageParameterSet(profileObject,$1); }\";\r\n\t\t\t\t\tif (logger.isTraceEnabled())\r\n\t\t\t\t\t\tlogger.trace(\"Implemented method \" + methodName\r\n\t\t\t\t\t\t\t\t+ \" , body = \" + methodBody);\r\n\t\t\t\t\tctMethodCopy.setBody(methodBody);\r\n\t\t\t\t\tprofileConcreteClass.addMethod(ctMethodCopy);\r\n\t\t\t\t} catch (CannotCompileException e) {\r\n\t\t\t\t\tthrow new SLEEException(e.getMessage(), e);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}", "code_tokens": ["private", "void", "generateNamedUsageParameterGetter", "(", "CtClass", "profileConcreteClass", ")", "{", "String", "methodName", "=", "\"getUsageParameterSet\"", ";", "for", "(", "CtMethod", "ctMethod", ":", "profileConcreteClass", ".", "getMethods", "(", ")", ")", "{", "if", "(", "ctMethod", ".", "getName", "(", ")", ".", "equals", "(", "methodName", ")", ")", "{", "try", "{", "// copy method, we can't just add body becase it is in super\r", "// class and does not sees profileObject field\r", "CtMethod", "ctMethodCopy", "=", "CtNewMethod", ".", "copy", "(", "ctMethod", ",", "profileConcreteClass", ",", "null", ")", ";", "// create the method body\r", "String", "methodBody", "=", "\"{ return ($r)\"", "+", "ClassGeneratorUtils", ".", "MANAGEMENT_HANDLER", "+", "\".getUsageParameterSet(profileObject,$1); }\"", ";", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "logger", ".", "trace", "(", "\"Implemented method \"", "+", "methodName", "+", "\" , body = \"", "+", "methodBody", ")", ";", "ctMethodCopy", ".", "setBody", "(", "methodBody", ")", ";", "profileConcreteClass", ".", "addMethod", "(", "ctMethodCopy", ")", ";", "}", "catch", "(", "CannotCompileException", "e", ")", "{", "throw", "new", "SLEEException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "}", "}"], "docstring": "Create a named usage parameter getter.\n\n@param profileConcreteClass\n@throws SLEEException", "docstring_tokens": ["Create", "a", "named", "usage", "parameter", "getter", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/deployment/profile/jpa/ConcreteProfileGenerator.java#L248-L270", "partition": "test"}
{"repo": "Unidata/thredds", "path": "opendap/src/main/java/opendap/dap/DSequence.java", "func_name": "DSequence.oldDeserialize", "original_string": "private void oldDeserialize(DataInputStream source, ServerVersion sv,\r\n                                StatusUI statusUI)\r\n            throws IOException, DataReadException {\r\n        try {\r\n            for (; ;) {\r\n                deserializeSingle(source, sv, statusUI);\r\n            }\r\n        }\r\n        catch (EOFException e) {\r\n        }\r\n    }", "language": "java", "code": "private void oldDeserialize(DataInputStream source, ServerVersion sv,\r\n                                StatusUI statusUI)\r\n            throws IOException, DataReadException {\r\n        try {\r\n            for (; ;) {\r\n                deserializeSingle(source, sv, statusUI);\r\n            }\r\n        }\r\n        catch (EOFException e) {\r\n        }\r\n    }", "code_tokens": ["private", "void", "oldDeserialize", "(", "DataInputStream", "source", ",", "ServerVersion", "sv", ",", "StatusUI", "statusUI", ")", "throws", "IOException", ",", "DataReadException", "{", "try", "{", "for", "(", ";", ";", ")", "{", "deserializeSingle", "(", "source", ",", "sv", ",", "statusUI", ")", ";", "}", "}", "catch", "(", "EOFException", "e", ")", "{", "}", "}"], "docstring": "The old deserialize protocol has a number of limitations stemming from\nits inability to tell when the sequence is finished.  It's really only\ngood for a Dataset containing a single sequence, or where the sequence is\nthe last thing in the dataset.  To handle this, we just read single\ninstances until we get an IOException, then stop.\n\n@param source   a <code>DataInputStream</code> to read from.\n@param sv       the <code>ServerVersion</code> returned by the server.\n@param statusUI the <code>StatusUI</code> object to use for GUI updates\nand user cancellation notification (may be null).\n@throws IOException       thrown on any InputStream exception other than EOF\n(which is trapped here).\n@throws DataReadException if an unexpected value was read.", "docstring_tokens": ["The", "old", "deserialize", "protocol", "has", "a", "number", "of", "limitations", "stemming", "from", "its", "inability", "to", "tell", "when", "the", "sequence", "is", "finished", ".", "It", "s", "really", "only", "good", "for", "a", "Dataset", "containing", "a", "single", "sequence", "or", "where", "the", "sequence", "is", "the", "last", "thing", "in", "the", "dataset", ".", "To", "handle", "this", "we", "just", "read", "single", "instances", "until", "we", "get", "an", "IOException", "then", "stop", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/opendap/src/main/java/opendap/dap/DSequence.java#L497-L507", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-mail/src/main/java/jodd/mail/SendMailSession.java", "func_name": "SendMailSession.setPeople", "original_string": "private void setPeople(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException {\n\t\tmsgToSet.setFrom(emailWithData.from().toInternetAddress());\n\t\tmsgToSet.setReplyTo(EmailAddress.convert(emailWithData.replyTo()));\n\t\tsetRecipients(emailWithData, msgToSet);\n\t}", "language": "java", "code": "private void setPeople(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException {\n\t\tmsgToSet.setFrom(emailWithData.from().toInternetAddress());\n\t\tmsgToSet.setReplyTo(EmailAddress.convert(emailWithData.replyTo()));\n\t\tsetRecipients(emailWithData, msgToSet);\n\t}", "code_tokens": ["private", "void", "setPeople", "(", "final", "Email", "emailWithData", ",", "final", "MimeMessage", "msgToSet", ")", "throws", "MessagingException", "{", "msgToSet", ".", "setFrom", "(", "emailWithData", ".", "from", "(", ")", ".", "toInternetAddress", "(", ")", ")", ";", "msgToSet", ".", "setReplyTo", "(", "EmailAddress", ".", "convert", "(", "emailWithData", ".", "replyTo", "(", ")", ")", ")", ";", "setRecipients", "(", "emailWithData", ",", "msgToSet", ")", ";", "}"], "docstring": "Sets FROM, REPLY-TO and recipients.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure", "docstring_tokens": ["Sets", "FROM", "REPLY", "-", "TO", "and", "recipients", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-mail/src/main/java/jodd/mail/SendMailSession.java#L167-L171", "partition": "test"}
{"repo": "geomajas/geomajas-project-sld-editor", "path": "expert-common/src/main/java/org/geomajas/sld/editor/expert/common/server/service/InMemorySldServiceImpl.java", "func_name": "InMemorySldServiceImpl.toSldI", "original_string": "public StyledLayerDescriptorInfo toSldI(RawSld sld) throws SldException {\n\t\ttry {\n\t\t\treturn parseXml(sld.getName(), sld.getXml());\n\t\t} catch (JiBXException e) {\n\t\t\tthrow new SldException(\"Validation error\", e);\n\t\t}\n\t}", "language": "java", "code": "public StyledLayerDescriptorInfo toSldI(RawSld sld) throws SldException {\n\t\ttry {\n\t\t\treturn parseXml(sld.getName(), sld.getXml());\n\t\t} catch (JiBXException e) {\n\t\t\tthrow new SldException(\"Validation error\", e);\n\t\t}\n\t}", "code_tokens": ["public", "StyledLayerDescriptorInfo", "toSldI", "(", "RawSld", "sld", ")", "throws", "SldException", "{", "try", "{", "return", "parseXml", "(", "sld", ".", "getName", "(", ")", ",", "sld", ".", "getXml", "(", ")", ")", ";", "}", "catch", "(", "JiBXException", "e", ")", "{", "throw", "new", "SldException", "(", "\"Validation error\"", ",", "e", ")", ";", "}", "}"], "docstring": "Convert raw xml to StyledLayerDescriptorInfo.\n\n@param sld\n@return StyledLayerDescriptorInfo\n@throws SldException", "docstring_tokens": ["Convert", "raw", "xml", "to", "StyledLayerDescriptorInfo", "."], "sha": "c8571446a7172a08eada40d847f8813d0b07ec69", "url": "https://github.com/geomajas/geomajas-project-sld-editor/blob/c8571446a7172a08eada40d847f8813d0b07ec69/expert-common/src/main/java/org/geomajas/sld/editor/expert/common/server/service/InMemorySldServiceImpl.java#L154-L160", "partition": "test"}
{"repo": "deeplearning4j/nd4j", "path": "nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/api/ops/BaseBroadcastOp.java", "func_name": "BaseBroadcastOp.calculateOutputShape", "original_string": "public List<long[]> calculateOutputShape() {\n        List<long[]> ret = new ArrayList<>();\n        if (larg().getShape() != null && rarg().getShape() != null)\n            ret.add(Shape.broadcastOutputShape(larg().getShape(), rarg().getShape()));\n        else if(larg().getShape() != null)\n            ret.add(larg().getShape());\n\n        return ret;\n    }", "language": "java", "code": "public List<long[]> calculateOutputShape() {\n        List<long[]> ret = new ArrayList<>();\n        if (larg().getShape() != null && rarg().getShape() != null)\n            ret.add(Shape.broadcastOutputShape(larg().getShape(), rarg().getShape()));\n        else if(larg().getShape() != null)\n            ret.add(larg().getShape());\n\n        return ret;\n    }", "code_tokens": ["public", "List", "<", "long", "[", "]", ">", "calculateOutputShape", "(", ")", "{", "List", "<", "long", "[", "]", ">", "ret", "=", "new", "ArrayList", "<>", "(", ")", ";", "if", "(", "larg", "(", ")", ".", "getShape", "(", ")", "!=", "null", "&&", "rarg", "(", ")", ".", "getShape", "(", ")", "!=", "null", ")", "ret", ".", "add", "(", "Shape", ".", "broadcastOutputShape", "(", "larg", "(", ")", ".", "getShape", "(", ")", ",", "rarg", "(", ")", ".", "getShape", "(", ")", ")", ")", ";", "else", "if", "(", "larg", "(", ")", ".", "getShape", "(", ")", "!=", "null", ")", "ret", ".", "add", "(", "larg", "(", ")", ".", "getShape", "(", ")", ")", ";", "return", "ret", ";", "}"], "docstring": "Calculate the output shape for this op\n\n@return", "docstring_tokens": ["Calculate", "the", "output", "shape", "for", "this", "op"], "sha": "8f005bcecb240d1fbb83b9d390ad801d1d3b6933", "url": "https://github.com/deeplearning4j/nd4j/blob/8f005bcecb240d1fbb83b9d390ad801d1d3b6933/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/api/ops/BaseBroadcastOp.java#L147-L155", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/jmh/java/io/reactivex/PerfAsyncConsumer.java", "func_name": "PerfAsyncConsumer.await", "original_string": "public PerfAsyncConsumer await(int count) {\n        if (count <= 1000) {\n            while (getCount() != 0) { }\n        } else {\n            try {\n                await();\n            } catch (InterruptedException ex) {\n                throw new RuntimeException(ex);\n            }\n        }\n        return this;\n    }", "language": "java", "code": "public PerfAsyncConsumer await(int count) {\n        if (count <= 1000) {\n            while (getCount() != 0) { }\n        } else {\n            try {\n                await();\n            } catch (InterruptedException ex) {\n                throw new RuntimeException(ex);\n            }\n        }\n        return this;\n    }", "code_tokens": ["public", "PerfAsyncConsumer", "await", "(", "int", "count", ")", "{", "if", "(", "count", "<=", "1000", ")", "{", "while", "(", "getCount", "(", ")", "!=", "0", ")", "{", "}", "}", "else", "{", "try", "{", "await", "(", ")", ";", "}", "catch", "(", "InterruptedException", "ex", ")", "{", "throw", "new", "RuntimeException", "(", "ex", ")", ";", "}", "}", "return", "this", ";", "}"], "docstring": "Wait for the terminal signal.\n@param count if less than 1001, a spin-wait is used\n@return this", "docstring_tokens": ["Wait", "for", "the", "terminal", "signal", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/jmh/java/io/reactivex/PerfAsyncConsumer.java#L73-L84", "partition": "test"}
{"repo": "Unidata/thredds", "path": "cdm/src/main/java/ucar/ma2/ArrayStructureMA.java", "func_name": "ArrayStructureMA.factoryMA", "original_string": "static public ArrayStructureMA factoryMA(Structure from, int[] shape) throws IOException {\r\n    StructureMembers sm = from.makeStructureMembers();\r\n    for (Variable v : from.getVariables()) {\r\n      Array data;\r\n      if (v instanceof Sequence) {\r\n        data = Array.factory(DataType.SEQUENCE, shape);  // an array sequence - one for each parent element\r\n        //Structure s = (Structure) v;\r\n        //StructureMembers smn = s.makeStructureMembers();\r\n        // data = new ArraySequenceNested(smn, (int) Index.computeSize(v.getShapeAll())); // ??\r\n\r\n      } else if (v instanceof Structure)\r\n        data = ArrayStructureMA.factoryMA((Structure) v, combine(shape, v.getShape()));\r\n\r\n      else\r\n        data = Array.factory(v.getDataType(), combine(shape, v.getShape()));\r\n\r\n      StructureMembers.Member m = sm.findMember(v.getShortName());\r\n      m.setDataArray(data);\r\n    }\r\n\r\n    return new ArrayStructureMA(sm, shape);\r\n  }", "language": "java", "code": "static public ArrayStructureMA factoryMA(Structure from, int[] shape) throws IOException {\r\n    StructureMembers sm = from.makeStructureMembers();\r\n    for (Variable v : from.getVariables()) {\r\n      Array data;\r\n      if (v instanceof Sequence) {\r\n        data = Array.factory(DataType.SEQUENCE, shape);  // an array sequence - one for each parent element\r\n        //Structure s = (Structure) v;\r\n        //StructureMembers smn = s.makeStructureMembers();\r\n        // data = new ArraySequenceNested(smn, (int) Index.computeSize(v.getShapeAll())); // ??\r\n\r\n      } else if (v instanceof Structure)\r\n        data = ArrayStructureMA.factoryMA((Structure) v, combine(shape, v.getShape()));\r\n\r\n      else\r\n        data = Array.factory(v.getDataType(), combine(shape, v.getShape()));\r\n\r\n      StructureMembers.Member m = sm.findMember(v.getShortName());\r\n      m.setDataArray(data);\r\n    }\r\n\r\n    return new ArrayStructureMA(sm, shape);\r\n  }", "code_tokens": ["static", "public", "ArrayStructureMA", "factoryMA", "(", "Structure", "from", ",", "int", "[", "]", "shape", ")", "throws", "IOException", "{", "StructureMembers", "sm", "=", "from", ".", "makeStructureMembers", "(", ")", ";", "for", "(", "Variable", "v", ":", "from", ".", "getVariables", "(", ")", ")", "{", "Array", "data", ";", "if", "(", "v", "instanceof", "Sequence", ")", "{", "data", "=", "Array", ".", "factory", "(", "DataType", ".", "SEQUENCE", ",", "shape", ")", ";", "// an array sequence - one for each parent element\r", "//Structure s = (Structure) v;\r", "//StructureMembers smn = s.makeStructureMembers();\r", "// data = new ArraySequenceNested(smn, (int) Index.computeSize(v.getShapeAll())); // ??\r", "}", "else", "if", "(", "v", "instanceof", "Structure", ")", "data", "=", "ArrayStructureMA", ".", "factoryMA", "(", "(", "Structure", ")", "v", ",", "combine", "(", "shape", ",", "v", ".", "getShape", "(", ")", ")", ")", ";", "else", "data", "=", "Array", ".", "factory", "(", "v", ".", "getDataType", "(", ")", ",", "combine", "(", "shape", ",", "v", ".", "getShape", "(", ")", ")", ")", ";", "StructureMembers", ".", "Member", "m", "=", "sm", ".", "findMember", "(", "v", ".", "getShortName", "(", ")", ")", ";", "m", ".", "setDataArray", "(", "data", ")", ";", "}", "return", "new", "ArrayStructureMA", "(", "sm", ",", "shape", ")", ";", "}"], "docstring": "Create an ArrayStructure for a Structure. Allow nested Structures.\nCreate the data arrays, and an iterator.\n\n@param from copy from here. If from is a ArrayStructureMA, return it.\n@param shape the shape of the ArrayStructure\n@return equivilent ArrayStructureMA\n@throws java.io.IOException on error reading a sequence", "docstring_tokens": ["Create", "an", "ArrayStructure", "for", "a", "Structure", ".", "Allow", "nested", "Structures", ".", "Create", "the", "data", "arrays", "and", "an", "iterator", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/cdm/src/main/java/ucar/ma2/ArrayStructureMA.java#L281-L302", "partition": "test"}
{"repo": "kiegroup/droolsjbpm-tools", "path": "drools-eclipse/org.guvnor.eclipse.webdav/src/client/org/eclipse/webdav/client/AbstractResourceHandle.java", "func_name": "AbstractResourceHandle.unlock", "original_string": "public void unlock(LockToken token) throws DAVException {\n        // Send the lock token in the header of the request.\n        IContext context = newContext();\n        context.setLockToken(\"<\" + token.getToken() + \">\"); //$NON-NLS-1$ //$NON-NLS-2$\n\n        IResponse response = null;\n        try {\n            response = davClient.unlock(locator, context);\n            examineResponse(response);\n        } catch (IOException e) {\n            throw new SystemException(e);\n        } finally {\n            closeResponse(response);\n        }\n    }", "language": "java", "code": "public void unlock(LockToken token) throws DAVException {\n        // Send the lock token in the header of the request.\n        IContext context = newContext();\n        context.setLockToken(\"<\" + token.getToken() + \">\"); //$NON-NLS-1$ //$NON-NLS-2$\n\n        IResponse response = null;\n        try {\n            response = davClient.unlock(locator, context);\n            examineResponse(response);\n        } catch (IOException e) {\n            throw new SystemException(e);\n        } finally {\n            closeResponse(response);\n        }\n    }", "code_tokens": ["public", "void", "unlock", "(", "LockToken", "token", ")", "throws", "DAVException", "{", "// Send the lock token in the header of the request.", "IContext", "context", "=", "newContext", "(", ")", ";", "context", ".", "setLockToken", "(", "\"<\"", "+", "token", ".", "getToken", "(", ")", "+", "\">\"", ")", ";", "//$NON-NLS-1$ //$NON-NLS-2$", "IResponse", "response", "=", "null", ";", "try", "{", "response", "=", "davClient", ".", "unlock", "(", "locator", ",", "context", ")", ";", "examineResponse", "(", "response", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "throw", "new", "SystemException", "(", "e", ")", ";", "}", "finally", "{", "closeResponse", "(", "response", ")", ";", "}", "}"], "docstring": "Unlock this resource with the given lock token.\n\n@param token the lock token to remove from this resource\n@exception DAVException if there was a problem unlocking this resource\n@see IServer#unlock(Locator, Context)", "docstring_tokens": ["Unlock", "this", "resource", "with", "the", "given", "lock", "token", "."], "sha": "05e1f73c591178360a198dca29f99d73918991db", "url": "https://github.com/kiegroup/droolsjbpm-tools/blob/05e1f73c591178360a198dca29f99d73918991db/drools-eclipse/org.guvnor.eclipse.webdav/src/client/org/eclipse/webdav/client/AbstractResourceHandle.java#L1246-L1260", "partition": "test"}
{"repo": "wro4j/wro4j", "path": "wro4j-core/src/main/java/ro/isdc/wro/manager/ResourceBundleProcessor.java", "func_name": "ResourceBundleProcessor.serveProcessedBundle", "original_string": "public void serveProcessedBundle()\n      throws IOException {\n    final WroConfiguration configuration = context.getConfig();\n    final HttpServletRequest request = context.getRequest();\n    final HttpServletResponse response = context.getResponse();\n\n    OutputStream os = null;\n    try {\n\n      final CacheKey cacheKey = getSafeCacheKey(request);\n      initAggregatedFolderPath(request, cacheKey.getType());\n      final CacheValue cacheValue = cacheStrategy.get(cacheKey);\n\n      // TODO move ETag check in wroManagerFactory\n      final String ifNoneMatch = request.getHeader(HttpHeader.IF_NONE_MATCH.toString());\n\n      // enclose etag value in quotes to be compliant with the RFC\n      final String etagValue = String.format(\"\\\"%s\\\"\", cacheValue.getHash());\n\n      if (etagValue != null && etagValue.equals(ifNoneMatch)) {\n        LOG.debug(\"ETag hash detected: {}. Sending {} status code\", etagValue, HttpServletResponse.SC_NOT_MODIFIED);\n        response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n        // because we cannot return null, return a stream containing nothing.\n        // TODO close output stream?\n        return;\n      }\n      /**\n       * Set contentType before actual content is written, solves <br/>\n       * <a href=\"http://code.google.com/p/wro4j/issues/detail?id=341\">issue341</a>\n       */\n      response.setContentType(cacheKey.getType().getContentType() + \"; charset=\" + configuration.getEncoding());\n      // set ETag header\n      response.setHeader(HttpHeader.ETAG.toString(), etagValue);\n\n      os = response.getOutputStream();\n      if (cacheValue.getRawContent() != null) {\n        // use gziped response if supported & Set content length based on gzip flag\n        if (isGzipAllowed()) {\n          response.setContentLength(cacheValue.getGzippedContent().length);\n          // add gzip header and gzip response\n          response.setHeader(HttpHeader.CONTENT_ENCODING.toString(), \"gzip\");\n          response.setHeader(\"Vary\", \"Accept-Encoding\");\n          IOUtils.write(cacheValue.getGzippedContent(), os);\n        } else {\n          //using getRawContent().length() is not the same and can return 2Bytes smaller size.\n          response.setContentLength(cacheValue.getRawContent().getBytes(configuration.getEncoding()).length);\n          IOUtils.write(cacheValue.getRawContent(), os, configuration.getEncoding());\n        }\n      }\n    } finally {\n      if (os != null) {\n        IOUtils.closeQuietly(os);\n      }\n    }\n  }", "language": "java", "code": "public void serveProcessedBundle()\n      throws IOException {\n    final WroConfiguration configuration = context.getConfig();\n    final HttpServletRequest request = context.getRequest();\n    final HttpServletResponse response = context.getResponse();\n\n    OutputStream os = null;\n    try {\n\n      final CacheKey cacheKey = getSafeCacheKey(request);\n      initAggregatedFolderPath(request, cacheKey.getType());\n      final CacheValue cacheValue = cacheStrategy.get(cacheKey);\n\n      // TODO move ETag check in wroManagerFactory\n      final String ifNoneMatch = request.getHeader(HttpHeader.IF_NONE_MATCH.toString());\n\n      // enclose etag value in quotes to be compliant with the RFC\n      final String etagValue = String.format(\"\\\"%s\\\"\", cacheValue.getHash());\n\n      if (etagValue != null && etagValue.equals(ifNoneMatch)) {\n        LOG.debug(\"ETag hash detected: {}. Sending {} status code\", etagValue, HttpServletResponse.SC_NOT_MODIFIED);\n        response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n        // because we cannot return null, return a stream containing nothing.\n        // TODO close output stream?\n        return;\n      }\n      /**\n       * Set contentType before actual content is written, solves <br/>\n       * <a href=\"http://code.google.com/p/wro4j/issues/detail?id=341\">issue341</a>\n       */\n      response.setContentType(cacheKey.getType().getContentType() + \"; charset=\" + configuration.getEncoding());\n      // set ETag header\n      response.setHeader(HttpHeader.ETAG.toString(), etagValue);\n\n      os = response.getOutputStream();\n      if (cacheValue.getRawContent() != null) {\n        // use gziped response if supported & Set content length based on gzip flag\n        if (isGzipAllowed()) {\n          response.setContentLength(cacheValue.getGzippedContent().length);\n          // add gzip header and gzip response\n          response.setHeader(HttpHeader.CONTENT_ENCODING.toString(), \"gzip\");\n          response.setHeader(\"Vary\", \"Accept-Encoding\");\n          IOUtils.write(cacheValue.getGzippedContent(), os);\n        } else {\n          //using getRawContent().length() is not the same and can return 2Bytes smaller size.\n          response.setContentLength(cacheValue.getRawContent().getBytes(configuration.getEncoding()).length);\n          IOUtils.write(cacheValue.getRawContent(), os, configuration.getEncoding());\n        }\n      }\n    } finally {\n      if (os != null) {\n        IOUtils.closeQuietly(os);\n      }\n    }\n  }", "code_tokens": ["public", "void", "serveProcessedBundle", "(", ")", "throws", "IOException", "{", "final", "WroConfiguration", "configuration", "=", "context", ".", "getConfig", "(", ")", ";", "final", "HttpServletRequest", "request", "=", "context", ".", "getRequest", "(", ")", ";", "final", "HttpServletResponse", "response", "=", "context", ".", "getResponse", "(", ")", ";", "OutputStream", "os", "=", "null", ";", "try", "{", "final", "CacheKey", "cacheKey", "=", "getSafeCacheKey", "(", "request", ")", ";", "initAggregatedFolderPath", "(", "request", ",", "cacheKey", ".", "getType", "(", ")", ")", ";", "final", "CacheValue", "cacheValue", "=", "cacheStrategy", ".", "get", "(", "cacheKey", ")", ";", "// TODO move ETag check in wroManagerFactory", "final", "String", "ifNoneMatch", "=", "request", ".", "getHeader", "(", "HttpHeader", ".", "IF_NONE_MATCH", ".", "toString", "(", ")", ")", ";", "// enclose etag value in quotes to be compliant with the RFC", "final", "String", "etagValue", "=", "String", ".", "format", "(", "\"\\\"%s\\\"\"", ",", "cacheValue", ".", "getHash", "(", ")", ")", ";", "if", "(", "etagValue", "!=", "null", "&&", "etagValue", ".", "equals", "(", "ifNoneMatch", ")", ")", "{", "LOG", ".", "debug", "(", "\"ETag hash detected: {}. Sending {} status code\"", ",", "etagValue", ",", "HttpServletResponse", ".", "SC_NOT_MODIFIED", ")", ";", "response", ".", "setStatus", "(", "HttpServletResponse", ".", "SC_NOT_MODIFIED", ")", ";", "// because we cannot return null, return a stream containing nothing.", "// TODO close output stream?", "return", ";", "}", "/**\n       * Set contentType before actual content is written, solves <br/>\n       * <a href=\"http://code.google.com/p/wro4j/issues/detail?id=341\">issue341</a>\n       */", "response", ".", "setContentType", "(", "cacheKey", ".", "getType", "(", ")", ".", "getContentType", "(", ")", "+", "\"; charset=\"", "+", "configuration", ".", "getEncoding", "(", ")", ")", ";", "// set ETag header", "response", ".", "setHeader", "(", "HttpHeader", ".", "ETAG", ".", "toString", "(", ")", ",", "etagValue", ")", ";", "os", "=", "response", ".", "getOutputStream", "(", ")", ";", "if", "(", "cacheValue", ".", "getRawContent", "(", ")", "!=", "null", ")", "{", "// use gziped response if supported & Set content length based on gzip flag", "if", "(", "isGzipAllowed", "(", ")", ")", "{", "response", ".", "setContentLength", "(", "cacheValue", ".", "getGzippedContent", "(", ")", ".", "length", ")", ";", "// add gzip header and gzip response", "response", ".", "setHeader", "(", "HttpHeader", ".", "CONTENT_ENCODING", ".", "toString", "(", ")", ",", "\"gzip\"", ")", ";", "response", ".", "setHeader", "(", "\"Vary\"", ",", "\"Accept-Encoding\"", ")", ";", "IOUtils", ".", "write", "(", "cacheValue", ".", "getGzippedContent", "(", ")", ",", "os", ")", ";", "}", "else", "{", "//using getRawContent().length() is not the same and can return 2Bytes smaller size.", "response", ".", "setContentLength", "(", "cacheValue", ".", "getRawContent", "(", ")", ".", "getBytes", "(", "configuration", ".", "getEncoding", "(", ")", ")", ".", "length", ")", ";", "IOUtils", ".", "write", "(", "cacheValue", ".", "getRawContent", "(", ")", ",", "os", ",", "configuration", ".", "getEncoding", "(", ")", ")", ";", "}", "}", "}", "finally", "{", "if", "(", "os", "!=", "null", ")", "{", "IOUtils", ".", "closeQuietly", "(", "os", ")", ";", "}", "}", "}"], "docstring": "Write to stream the content of the processed resource bundle.", "docstring_tokens": ["Write", "to", "stream", "the", "content", "of", "the", "processed", "resource", "bundle", "."], "sha": "d2a3de71ab8bf0af7061fb6327501e08198338df", "url": "https://github.com/wro4j/wro4j/blob/d2a3de71ab8bf0af7061fb6327501e08198338df/wro4j-core/src/main/java/ro/isdc/wro/manager/ResourceBundleProcessor.java#L52-L106", "partition": "test"}
{"repo": "Unidata/thredds", "path": "dap4/d4core/src/main/java/dap4/core/dmr/DapNode.java", "func_name": "DapNode.getGroup", "original_string": "public DapGroup getGroup()\n    {\n        if(this.sort == DapSort.DATASET)\n            return null;\n        // Walk the parent node until we find a group\n        DapNode group = parent;\n        while(group != null) {\n            switch (group.getSort()) {\n            case DATASET:\n            case GROUP:\n                return (DapGroup) group;\n            default:\n                group = group.getParent();\n                break;\n            }\n        }\n        return (DapGroup) group;\n    }", "language": "java", "code": "public DapGroup getGroup()\n    {\n        if(this.sort == DapSort.DATASET)\n            return null;\n        // Walk the parent node until we find a group\n        DapNode group = parent;\n        while(group != null) {\n            switch (group.getSort()) {\n            case DATASET:\n            case GROUP:\n                return (DapGroup) group;\n            default:\n                group = group.getParent();\n                break;\n            }\n        }\n        return (DapGroup) group;\n    }", "code_tokens": ["public", "DapGroup", "getGroup", "(", ")", "{", "if", "(", "this", ".", "sort", "==", "DapSort", ".", "DATASET", ")", "return", "null", ";", "// Walk the parent node until we find a group", "DapNode", "group", "=", "parent", ";", "while", "(", "group", "!=", "null", ")", "{", "switch", "(", "group", ".", "getSort", "(", ")", ")", "{", "case", "DATASET", ":", "case", "GROUP", ":", "return", "(", "DapGroup", ")", "group", ";", "default", ":", "group", "=", "group", ".", "getParent", "(", ")", ";", "break", ";", "}", "}", "return", "(", "DapGroup", ")", "group", ";", "}"], "docstring": "Closest containing group\n\n@returns closest group not equal to this\nor null if this is a DapDataset", "docstring_tokens": ["Closest", "containing", "group"], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/dap4/d4core/src/main/java/dap4/core/dmr/DapNode.java#L287-L304", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/internal/util/ExceptionHelper.java", "func_name": "ExceptionHelper.throwIfThrowable", "original_string": "@SuppressWarnings(\"unchecked\")\n    public static <E extends Throwable> Exception throwIfThrowable(Throwable e) throws E {\n        if (e instanceof Exception) {\n            return (Exception)e;\n        }\n        throw (E)e;\n    }", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n    public static <E extends Throwable> Exception throwIfThrowable(Throwable e) throws E {\n        if (e instanceof Exception) {\n            return (Exception)e;\n        }\n        throw (E)e;\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "static", "<", "E", "extends", "Throwable", ">", "Exception", "throwIfThrowable", "(", "Throwable", "e", ")", "throws", "E", "{", "if", "(", "e", "instanceof", "Exception", ")", "{", "return", "(", "Exception", ")", "e", ";", "}", "throw", "(", "E", ")", "e", ";", "}"], "docstring": "Workaround for Java 6 not supporting throwing a final Throwable from a catch block.\n@param <E> the generic exception type\n@param e the Throwable error to return or throw\n@return the Throwable e if it is a subclass of Exception\n@throws E the generic exception thrown", "docstring_tokens": ["Workaround", "for", "Java", "6", "not", "supporting", "throwing", "a", "final", "Throwable", "from", "a", "catch", "block", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/internal/util/ExceptionHelper.java#L117-L123", "partition": "test"}
{"repo": "jboss/jboss-common-core", "path": "src/main/java/org/jboss/util/collection/WeakTypeCache.java", "func_name": "WeakTypeCache.getParameterizedType", "original_string": "protected T getParameterizedType(ParameterizedType type)\n   {\n      // First check if we already have it\n      T result = peek(type);\n      if (result != null)\n         return result;\n      \n      // Instantiate\n      result = instantiate(type);\n\n      // Put the perlimanary result into the cache\n      put(type, result);\n\n      // Generate the details\n      generate(type, result);\n      \n      return result;\n   }", "language": "java", "code": "protected T getParameterizedType(ParameterizedType type)\n   {\n      // First check if we already have it\n      T result = peek(type);\n      if (result != null)\n         return result;\n      \n      // Instantiate\n      result = instantiate(type);\n\n      // Put the perlimanary result into the cache\n      put(type, result);\n\n      // Generate the details\n      generate(type, result);\n      \n      return result;\n   }", "code_tokens": ["protected", "T", "getParameterizedType", "(", "ParameterizedType", "type", ")", "{", "// First check if we already have it", "T", "result", "=", "peek", "(", "type", ")", ";", "if", "(", "result", "!=", "null", ")", "return", "result", ";", "// Instantiate", "result", "=", "instantiate", "(", "type", ")", ";", "// Put the perlimanary result into the cache", "put", "(", "type", ",", "result", ")", ";", "// Generate the details", "generate", "(", "type", ",", "result", ")", ";", "return", "result", ";", "}"], "docstring": "Get the information for a parameterized type\n\n@param type the parameterized type\n@return the info", "docstring_tokens": ["Get", "the", "information", "for", "a", "parameterized", "type"], "sha": "c191bb18db83fa106c6913cf34ed47989b65dc97", "url": "https://github.com/jboss/jboss-common-core/blob/c191bb18db83fa106c6913cf34ed47989b65dc97/src/main/java/org/jboss/util/collection/WeakTypeCache.java#L132-L149", "partition": "test"}
{"repo": "lessthanoptimal/GeoRegression", "path": "main/src/georegression/geometry/ConvertRotation3D_F64.java", "func_name": "ConvertRotation3D_F64.matrixToQuaternion", "original_string": "public static Quaternion_F64 matrixToQuaternion( DMatrixRMaj R, Quaternion_F64 quat ) {\n\n\t\tif( quat == null )\n\t\t\tquat = new Quaternion_F64();\n\n\t\t// algorithm from:\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/\n\t\t//\n\t\t// Designed to minimize numerical error by not dividing by very small numbers\n\n\t\tdouble m00 = R.unsafe_get(0,0);\n\t\tdouble m01 = R.unsafe_get(0,1);\n\t\tdouble m02 = R.unsafe_get(0,2);\n\t\tdouble m10 = R.unsafe_get(1,0);\n\t\tdouble m11 = R.unsafe_get(1,1);\n\t\tdouble m12 = R.unsafe_get(1,2);\n\t\tdouble m20 = R.unsafe_get(2,0);\n\t\tdouble m21 = R.unsafe_get(2,1);\n\t\tdouble m22 = R.unsafe_get(2,2);\n\n\t\tdouble trace = m00 + m11 + m22;\n\n\t\tif (trace > 0) {\n\t\t\tdouble S = Math.sqrt(trace+1.0) * 2; // S=4*qw\n\t\t\tquat.w = 0.25 * S;\n\t\t\tquat.x = (m21 - m12) / S;\n\t\t\tquat.y = (m02 - m20) / S;\n\t\t\tquat.z = (m10 - m01) / S;\n\t\t} else if ((m00 > m11)&(m00 > m22)) {\n\t\t\tdouble S = Math.sqrt(1.0 + m00 - m11 - m22) * 2; // S=4*qx\n\t\t\tquat.w = (m21 - m12) / S;\n\t\t\tquat.x = 0.25 * S;\n\t\t\tquat.y = (m01 + m10) / S;\n\t\t\tquat.z = (m02 + m20) / S;\n\t\t} else if (m11 > m22) {\n\t\t\tdouble S = Math.sqrt(1.0 + m11 - m00 - m22) * 2; // S=4*qy\n\t\t\tquat.w = (m02 - m20) / S;\n\t\t\tquat.x = (m01 + m10) / S;\n\t\t\tquat.y = 0.25 * S;\n\t\t\tquat.z = (m12 + m21) / S;\n\t\t} else {\n\t\t\tdouble S = Math.sqrt(1.0 + m22 - m00 - m11) * 2; // S=4*qz\n\t\t\tquat.w = (m10 - m01) / S;\n\t\t\tquat.x = (m02 + m20) / S;\n\t\t\tquat.y = (m12 + m21) / S;\n\t\t\tquat.z = 0.25 * S;\n\t\t}\n\n\t\treturn quat;\n\t}", "language": "java", "code": "public static Quaternion_F64 matrixToQuaternion( DMatrixRMaj R, Quaternion_F64 quat ) {\n\n\t\tif( quat == null )\n\t\t\tquat = new Quaternion_F64();\n\n\t\t// algorithm from:\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/\n\t\t//\n\t\t// Designed to minimize numerical error by not dividing by very small numbers\n\n\t\tdouble m00 = R.unsafe_get(0,0);\n\t\tdouble m01 = R.unsafe_get(0,1);\n\t\tdouble m02 = R.unsafe_get(0,2);\n\t\tdouble m10 = R.unsafe_get(1,0);\n\t\tdouble m11 = R.unsafe_get(1,1);\n\t\tdouble m12 = R.unsafe_get(1,2);\n\t\tdouble m20 = R.unsafe_get(2,0);\n\t\tdouble m21 = R.unsafe_get(2,1);\n\t\tdouble m22 = R.unsafe_get(2,2);\n\n\t\tdouble trace = m00 + m11 + m22;\n\n\t\tif (trace > 0) {\n\t\t\tdouble S = Math.sqrt(trace+1.0) * 2; // S=4*qw\n\t\t\tquat.w = 0.25 * S;\n\t\t\tquat.x = (m21 - m12) / S;\n\t\t\tquat.y = (m02 - m20) / S;\n\t\t\tquat.z = (m10 - m01) / S;\n\t\t} else if ((m00 > m11)&(m00 > m22)) {\n\t\t\tdouble S = Math.sqrt(1.0 + m00 - m11 - m22) * 2; // S=4*qx\n\t\t\tquat.w = (m21 - m12) / S;\n\t\t\tquat.x = 0.25 * S;\n\t\t\tquat.y = (m01 + m10) / S;\n\t\t\tquat.z = (m02 + m20) / S;\n\t\t} else if (m11 > m22) {\n\t\t\tdouble S = Math.sqrt(1.0 + m11 - m00 - m22) * 2; // S=4*qy\n\t\t\tquat.w = (m02 - m20) / S;\n\t\t\tquat.x = (m01 + m10) / S;\n\t\t\tquat.y = 0.25 * S;\n\t\t\tquat.z = (m12 + m21) / S;\n\t\t} else {\n\t\t\tdouble S = Math.sqrt(1.0 + m22 - m00 - m11) * 2; // S=4*qz\n\t\t\tquat.w = (m10 - m01) / S;\n\t\t\tquat.x = (m02 + m20) / S;\n\t\t\tquat.y = (m12 + m21) / S;\n\t\t\tquat.z = 0.25 * S;\n\t\t}\n\n\t\treturn quat;\n\t}", "code_tokens": ["public", "static", "Quaternion_F64", "matrixToQuaternion", "(", "DMatrixRMaj", "R", ",", "Quaternion_F64", "quat", ")", "{", "if", "(", "quat", "==", "null", ")", "quat", "=", "new", "Quaternion_F64", "(", ")", ";", "// algorithm from:", "// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/", "//", "// Designed to minimize numerical error by not dividing by very small numbers", "double", "m00", "=", "R", ".", "unsafe_get", "(", "0", ",", "0", ")", ";", "double", "m01", "=", "R", ".", "unsafe_get", "(", "0", ",", "1", ")", ";", "double", "m02", "=", "R", ".", "unsafe_get", "(", "0", ",", "2", ")", ";", "double", "m10", "=", "R", ".", "unsafe_get", "(", "1", ",", "0", ")", ";", "double", "m11", "=", "R", ".", "unsafe_get", "(", "1", ",", "1", ")", ";", "double", "m12", "=", "R", ".", "unsafe_get", "(", "1", ",", "2", ")", ";", "double", "m20", "=", "R", ".", "unsafe_get", "(", "2", ",", "0", ")", ";", "double", "m21", "=", "R", ".", "unsafe_get", "(", "2", ",", "1", ")", ";", "double", "m22", "=", "R", ".", "unsafe_get", "(", "2", ",", "2", ")", ";", "double", "trace", "=", "m00", "+", "m11", "+", "m22", ";", "if", "(", "trace", ">", "0", ")", "{", "double", "S", "=", "Math", ".", "sqrt", "(", "trace", "+", "1.0", ")", "*", "2", ";", "// S=4*qw", "quat", ".", "w", "=", "0.25", "*", "S", ";", "quat", ".", "x", "=", "(", "m21", "-", "m12", ")", "/", "S", ";", "quat", ".", "y", "=", "(", "m02", "-", "m20", ")", "/", "S", ";", "quat", ".", "z", "=", "(", "m10", "-", "m01", ")", "/", "S", ";", "}", "else", "if", "(", "(", "m00", ">", "m11", ")", "&", "(", "m00", ">", "m22", ")", ")", "{", "double", "S", "=", "Math", ".", "sqrt", "(", "1.0", "+", "m00", "-", "m11", "-", "m22", ")", "*", "2", ";", "// S=4*qx", "quat", ".", "w", "=", "(", "m21", "-", "m12", ")", "/", "S", ";", "quat", ".", "x", "=", "0.25", "*", "S", ";", "quat", ".", "y", "=", "(", "m01", "+", "m10", ")", "/", "S", ";", "quat", ".", "z", "=", "(", "m02", "+", "m20", ")", "/", "S", ";", "}", "else", "if", "(", "m11", ">", "m22", ")", "{", "double", "S", "=", "Math", ".", "sqrt", "(", "1.0", "+", "m11", "-", "m00", "-", "m22", ")", "*", "2", ";", "// S=4*qy", "quat", ".", "w", "=", "(", "m02", "-", "m20", ")", "/", "S", ";", "quat", ".", "x", "=", "(", "m01", "+", "m10", ")", "/", "S", ";", "quat", ".", "y", "=", "0.25", "*", "S", ";", "quat", ".", "z", "=", "(", "m12", "+", "m21", ")", "/", "S", ";", "}", "else", "{", "double", "S", "=", "Math", ".", "sqrt", "(", "1.0", "+", "m22", "-", "m00", "-", "m11", ")", "*", "2", ";", "// S=4*qz", "quat", ".", "w", "=", "(", "m10", "-", "m01", ")", "/", "S", ";", "quat", ".", "x", "=", "(", "m02", "+", "m20", ")", "/", "S", ";", "quat", ".", "y", "=", "(", "m12", "+", "m21", ")", "/", "S", ";", "quat", ".", "z", "=", "0.25", "*", "S", ";", "}", "return", "quat", ";", "}"], "docstring": "Extracts quaternions from the provided rotation matrix.\n\n@param R (Input) rotation matrix\n@param quat (Output) Optional storage for quaternion.  If null a new class will be used.\n@return unit quaternion representation of the rotation matrix.", "docstring_tokens": ["Extracts", "quaternions", "from", "the", "provided", "rotation", "matrix", "."], "sha": "c067cd44a4e95bd826119f6e658bd82386ef289f", "url": "https://github.com/lessthanoptimal/GeoRegression/blob/c067cd44a4e95bd826119f6e658bd82386ef289f/main/src/georegression/geometry/ConvertRotation3D_F64.java#L296-L345", "partition": "test"}
{"repo": "Netflix/hollow", "path": "hollow/src/main/java/com/netflix/hollow/tools/query/HollowFieldMatchQuery.java", "func_name": "HollowFieldMatchQuery.findMatchingRecords", "original_string": "public Map<String, BitSet> findMatchingRecords(String typeName, String fieldName, String fieldValue) {\n        Map<String, BitSet> matches = new HashMap<String, BitSet>();\n\n        HollowTypeReadState typeState = readEngine.getTypeState(typeName);\n        if(typeState != null)\n            augmentMatchingRecords(typeState, fieldName, fieldValue, matches);\n        \n        return matches;\n    }", "language": "java", "code": "public Map<String, BitSet> findMatchingRecords(String typeName, String fieldName, String fieldValue) {\n        Map<String, BitSet> matches = new HashMap<String, BitSet>();\n\n        HollowTypeReadState typeState = readEngine.getTypeState(typeName);\n        if(typeState != null)\n            augmentMatchingRecords(typeState, fieldName, fieldValue, matches);\n        \n        return matches;\n    }", "code_tokens": ["public", "Map", "<", "String", ",", "BitSet", ">", "findMatchingRecords", "(", "String", "typeName", ",", "String", "fieldName", ",", "String", "fieldValue", ")", "{", "Map", "<", "String", ",", "BitSet", ">", "matches", "=", "new", "HashMap", "<", "String", ",", "BitSet", ">", "(", ")", ";", "HollowTypeReadState", "typeState", "=", "readEngine", ".", "getTypeState", "(", "typeName", ")", ";", "if", "(", "typeState", "!=", "null", ")", "augmentMatchingRecords", "(", "typeState", ",", "fieldName", ",", "fieldValue", ",", "matches", ")", ";", "return", "matches", ";", "}"], "docstring": "Match any records of the specified type, which have the specified field set to the specified value.\n\n@param typeName the type name\n@param fieldName the field name\n@param fieldValue the field value as a string that will be parsed as the type of the field to match.\n@return the matching records", "docstring_tokens": ["Match", "any", "records", "of", "the", "specified", "type", "which", "have", "the", "specified", "field", "set", "to", "the", "specified", "value", "."], "sha": "43ca100034a01050fb764170bd32b085ac9a3c22", "url": "https://github.com/Netflix/hollow/blob/43ca100034a01050fb764170bd32b085ac9a3c22/hollow/src/main/java/com/netflix/hollow/tools/query/HollowFieldMatchQuery.java#L83-L91", "partition": "test"}
{"repo": "streamsets/datacollector", "path": "commonlib/src/main/java/com/streamsets/pipeline/lib/util/AvroSchemaHelper.java", "func_name": "AvroSchemaHelper.getSchemaIdFromSubject", "original_string": "public int getSchemaIdFromSubject(String subject) throws SchemaRegistryException {\n    try {\n      SchemaMetadata metadata = registryClient.getLatestSchemaMetadata(subject);\n      return metadata.getId();\n    } catch (IOException | RestClientException e) {\n      throw new SchemaRegistryException(e);\n    }\n  }", "language": "java", "code": "public int getSchemaIdFromSubject(String subject) throws SchemaRegistryException {\n    try {\n      SchemaMetadata metadata = registryClient.getLatestSchemaMetadata(subject);\n      return metadata.getId();\n    } catch (IOException | RestClientException e) {\n      throw new SchemaRegistryException(e);\n    }\n  }", "code_tokens": ["public", "int", "getSchemaIdFromSubject", "(", "String", "subject", ")", "throws", "SchemaRegistryException", "{", "try", "{", "SchemaMetadata", "metadata", "=", "registryClient", ".", "getLatestSchemaMetadata", "(", "subject", ")", ";", "return", "metadata", ".", "getId", "(", ")", ";", "}", "catch", "(", "IOException", "|", "RestClientException", "e", ")", "{", "throw", "new", "SchemaRegistryException", "(", "e", ")", ";", "}", "}"], "docstring": "Looks up schema id for the specified subject from the schema registry\n@param subject subject for which schema Id must be looked up.\n@return the schema id\n@throws SchemaRegistryException if there is an error with the registry client", "docstring_tokens": ["Looks", "up", "schema", "id", "for", "the", "specified", "subject", "from", "the", "schema", "registry"], "sha": "ea63245ea14d59d5229248387f0628f46131eae5", "url": "https://github.com/streamsets/datacollector/blob/ea63245ea14d59d5229248387f0628f46131eae5/commonlib/src/main/java/com/streamsets/pipeline/lib/util/AvroSchemaHelper.java#L179-L186", "partition": "test"}
{"repo": "Unidata/thredds", "path": "legacy/src/main/java/thredds/catalog/InvDatasetImpl.java", "func_name": "InvDatasetImpl.removeLocalMetadata", "original_string": "public boolean removeLocalMetadata(InvMetadata metadata) {\n    InvDatasetImpl parentDataset = ((InvDatasetImpl) metadata.getParentDataset());\n    List localMdata = parentDataset.getLocalMetadata().getMetadata();\n    if (localMdata.contains(metadata)) {\n      if (localMdata.remove(metadata)) {\n        hashCode = 0; // Need to recalculate the hash code.\n        return (true);\n      }\n    }\n    return (false);\n  }", "language": "java", "code": "public boolean removeLocalMetadata(InvMetadata metadata) {\n    InvDatasetImpl parentDataset = ((InvDatasetImpl) metadata.getParentDataset());\n    List localMdata = parentDataset.getLocalMetadata().getMetadata();\n    if (localMdata.contains(metadata)) {\n      if (localMdata.remove(metadata)) {\n        hashCode = 0; // Need to recalculate the hash code.\n        return (true);\n      }\n    }\n    return (false);\n  }", "code_tokens": ["public", "boolean", "removeLocalMetadata", "(", "InvMetadata", "metadata", ")", "{", "InvDatasetImpl", "parentDataset", "=", "(", "(", "InvDatasetImpl", ")", "metadata", ".", "getParentDataset", "(", ")", ")", ";", "List", "localMdata", "=", "parentDataset", ".", "getLocalMetadata", "(", ")", ".", "getMetadata", "(", ")", ";", "if", "(", "localMdata", ".", "contains", "(", "metadata", ")", ")", "{", "if", "(", "localMdata", ".", "remove", "(", "metadata", ")", ")", "{", "hashCode", "=", "0", ";", "// Need to recalculate the hash code.", "return", "(", "true", ")", ";", "}", "}", "return", "(", "false", ")", ";", "}"], "docstring": "Remove the given InvMetadata from the set of metadata local to this dataset.\n\n@param metadata remove this\n@return true if an InvMetadata is removed, false otherwise.", "docstring_tokens": ["Remove", "the", "given", "InvMetadata", "from", "the", "set", "of", "metadata", "local", "to", "this", "dataset", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/legacy/src/main/java/thredds/catalog/InvDatasetImpl.java#L871-L881", "partition": "test"}
{"repo": "glytching/junit-extensions", "path": "src/main/java/io/github/glytching/junit/extension/system/RestoreContext.java", "func_name": "RestoreContext.restore", "original_string": "public void restore() {\n    for (String propertyName : propertyNames) {\n      if (restoreProperties.containsKey(propertyName)) {\n        // reinstate the original value\n        System.setProperty(propertyName, restoreProperties.get(propertyName));\n      } else {\n        // remove the (previously unset) property\n        System.clearProperty(propertyName);\n      }\n    }\n  }", "language": "java", "code": "public void restore() {\n    for (String propertyName : propertyNames) {\n      if (restoreProperties.containsKey(propertyName)) {\n        // reinstate the original value\n        System.setProperty(propertyName, restoreProperties.get(propertyName));\n      } else {\n        // remove the (previously unset) property\n        System.clearProperty(propertyName);\n      }\n    }\n  }", "code_tokens": ["public", "void", "restore", "(", ")", "{", "for", "(", "String", "propertyName", ":", "propertyNames", ")", "{", "if", "(", "restoreProperties", ".", "containsKey", "(", "propertyName", ")", ")", "{", "// reinstate the original value", "System", ".", "setProperty", "(", "propertyName", ",", "restoreProperties", ".", "get", "(", "propertyName", ")", ")", ";", "}", "else", "{", "// remove the (previously unset) property", "System", ".", "clearProperty", "(", "propertyName", ")", ";", "}", "}", "}"], "docstring": "Reverse the system property 'sets' performed on behalf of this restore context.\n\n<p>For each entry in {@link #propertyNames}, if {@link #restoreProperties} contains an entry\nthen reset the system property with the value from {@link #restoreProperties} otherwise just\nremove the system property for that property name.", "docstring_tokens": ["Reverse", "the", "system", "property", "sets", "performed", "on", "behalf", "of", "this", "restore", "context", "."], "sha": "ad687cb3a5db38db3ae1a0a7129fe94a7494b0e1", "url": "https://github.com/glytching/junit-extensions/blob/ad687cb3a5db38db3ae1a0a7129fe94a7494b0e1/src/main/java/io/github/glytching/junit/extension/system/RestoreContext.java#L59-L69", "partition": "test"}
{"repo": "orientechnologies/orientdb", "path": "core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/atomicoperations/OAtomicOperation.java", "func_name": "OAtomicOperation.checkChangesFilledUpTo", "original_string": "private static boolean checkChangesFilledUpTo(final FileChanges changesContainer, final long pageIndex) {\n    if (changesContainer == null) {\n      return true;\n    } else if (changesContainer.isNew || changesContainer.maxNewPageIndex > -2) {\n      return pageIndex < changesContainer.maxNewPageIndex + 1;\n    } else\n      return !changesContainer.truncate;\n  }", "language": "java", "code": "private static boolean checkChangesFilledUpTo(final FileChanges changesContainer, final long pageIndex) {\n    if (changesContainer == null) {\n      return true;\n    } else if (changesContainer.isNew || changesContainer.maxNewPageIndex > -2) {\n      return pageIndex < changesContainer.maxNewPageIndex + 1;\n    } else\n      return !changesContainer.truncate;\n  }", "code_tokens": ["private", "static", "boolean", "checkChangesFilledUpTo", "(", "final", "FileChanges", "changesContainer", ",", "final", "long", "pageIndex", ")", "{", "if", "(", "changesContainer", "==", "null", ")", "{", "return", "true", ";", "}", "else", "if", "(", "changesContainer", ".", "isNew", "||", "changesContainer", ".", "maxNewPageIndex", ">", "-", "2", ")", "{", "return", "pageIndex", "<", "changesContainer", ".", "maxNewPageIndex", "+", "1", ";", "}", "else", "return", "!", "changesContainer", ".", "truncate", ";", "}"], "docstring": "This check if a file was trimmed or trunked in the current atomic operation.\n\n@param changesContainer changes container to check\n@param pageIndex        limit to check against the changes\n\n@return true if there are no changes or pageIndex still fit, false if the pageIndex do not fit anymore", "docstring_tokens": ["This", "check", "if", "a", "file", "was", "trimmed", "or", "trunked", "in", "the", "current", "atomic", "operation", "."], "sha": "d970b12033f0462f0239ea0ad8ed41207e6e26f1", "url": "https://github.com/orientechnologies/orientdb/blob/d970b12033f0462f0239ea0ad8ed41207e6e26f1/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/atomicoperations/OAtomicOperation.java#L298-L305", "partition": "test"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/security/ElytronSubjectFactory.java", "func_name": "ElytronSubjectFactory.addPrivateCredential", "original_string": "private void addPrivateCredential(final Subject subject, final Object credential) {\n        if (!WildFlySecurityManager.isChecking()) {\n            subject.getPrivateCredentials().add(credential);\n        }\n        else {\n            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n                subject.getPrivateCredentials().add(credential);\n                return null;\n            });\n        }\n    }", "language": "java", "code": "private void addPrivateCredential(final Subject subject, final Object credential) {\n        if (!WildFlySecurityManager.isChecking()) {\n            subject.getPrivateCredentials().add(credential);\n        }\n        else {\n            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n                subject.getPrivateCredentials().add(credential);\n                return null;\n            });\n        }\n    }", "code_tokens": ["private", "void", "addPrivateCredential", "(", "final", "Subject", "subject", ",", "final", "Object", "credential", ")", "{", "if", "(", "!", "WildFlySecurityManager", ".", "isChecking", "(", ")", ")", "{", "subject", ".", "getPrivateCredentials", "(", ")", ".", "add", "(", "credential", ")", ";", "}", "else", "{", "AccessController", ".", "doPrivileged", "(", "(", "PrivilegedAction", "<", "Void", ">", ")", "(", ")", "->", "{", "subject", ".", "getPrivateCredentials", "(", ")", ".", "add", "(", "credential", ")", ";", "return", "null", ";", "}", ")", ";", "}", "}"], "docstring": "Add the specified credential to the subject's private credentials set.\n\n@param subject the {@link Subject} to add the credential to.\n@param credential a reference to the credential.", "docstring_tokens": ["Add", "the", "specified", "credential", "to", "the", "subject", "s", "private", "credentials", "set", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/security/ElytronSubjectFactory.java#L175-L185", "partition": "test"}
{"repo": "playframework/playframework", "path": "core/play/src/main/java/play/libs/reflect/MemberUtils.java", "func_name": "MemberUtils.setAccessibleWorkaround", "original_string": "static boolean setAccessibleWorkaround(final AccessibleObject o) {\n    if (o == null || o.isAccessible()) {\n      return false;\n    }\n    final Member m = (Member) o;\n    if (!o.isAccessible()\n        && Modifier.isPublic(m.getModifiers())\n        && isPackageAccess(m.getDeclaringClass().getModifiers())) {\n      try {\n        o.setAccessible(true);\n        return true;\n      } catch (final SecurityException e) { // NOPMD\n        // ignore in favor of subsequent IllegalAccessException\n      }\n    }\n    return false;\n  }", "language": "java", "code": "static boolean setAccessibleWorkaround(final AccessibleObject o) {\n    if (o == null || o.isAccessible()) {\n      return false;\n    }\n    final Member m = (Member) o;\n    if (!o.isAccessible()\n        && Modifier.isPublic(m.getModifiers())\n        && isPackageAccess(m.getDeclaringClass().getModifiers())) {\n      try {\n        o.setAccessible(true);\n        return true;\n      } catch (final SecurityException e) { // NOPMD\n        // ignore in favor of subsequent IllegalAccessException\n      }\n    }\n    return false;\n  }", "code_tokens": ["static", "boolean", "setAccessibleWorkaround", "(", "final", "AccessibleObject", "o", ")", "{", "if", "(", "o", "==", "null", "||", "o", ".", "isAccessible", "(", ")", ")", "{", "return", "false", ";", "}", "final", "Member", "m", "=", "(", "Member", ")", "o", ";", "if", "(", "!", "o", ".", "isAccessible", "(", ")", "&&", "Modifier", ".", "isPublic", "(", "m", ".", "getModifiers", "(", ")", ")", "&&", "isPackageAccess", "(", "m", ".", "getDeclaringClass", "(", ")", ".", "getModifiers", "(", ")", ")", ")", "{", "try", "{", "o", ".", "setAccessible", "(", "true", ")", ";", "return", "true", ";", "}", "catch", "(", "final", "SecurityException", "e", ")", "{", "// NOPMD", "// ignore in favor of subsequent IllegalAccessException", "}", "}", "return", "false", ";", "}"], "docstring": "XXX Default access superclass workaround.\n\n<p>When a {@code public} class has a default access superclass with {@code public} members,\nthese members are accessible. Calling them from compiled code works fine. Unfortunately, on\nsome JVMs, using reflection to invoke these members seems to (wrongly) prevent access even when\nthe modifier is {@code public}. Calling {@code setAccessible(true)} solves the problem but will\nonly work from sufficiently privileged code. Better workarounds would be gratefully accepted.\n\n@param o the AccessibleObject to set as accessible\n@return a boolean indicating whether the accessibility of the object was set to true.", "docstring_tokens": ["XXX", "Default", "access", "superclass", "workaround", "."], "sha": "3c46dca803d24e715d85de678c59dcfac9525a00", "url": "https://github.com/playframework/playframework/blob/3c46dca803d24e715d85de678c59dcfac9525a00/core/play/src/main/java/play/libs/reflect/MemberUtils.java#L63-L79", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-bean/src/main/java/jodd/introspector/Fields.java", "func_name": "Fields.getAllFieldDescriptors", "original_string": "public FieldDescriptor[] getAllFieldDescriptors() {\n\t\tif (allFields == null) {\n\t\t\tFieldDescriptor[] allFields = new FieldDescriptor[fieldsMap.size()];\n\n\t\t\tint index = 0;\n\t\t\tfor (FieldDescriptor fieldDescriptor : fieldsMap.values()) {\n\t\t\t\tallFields[index] = fieldDescriptor;\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\tArrays.sort(allFields, Comparator.comparing(fd -> fd.getField().getName()));\n\n\t\t\tthis.allFields = allFields;\n\t\t}\n\t\treturn allFields;\n\t}", "language": "java", "code": "public FieldDescriptor[] getAllFieldDescriptors() {\n\t\tif (allFields == null) {\n\t\t\tFieldDescriptor[] allFields = new FieldDescriptor[fieldsMap.size()];\n\n\t\t\tint index = 0;\n\t\t\tfor (FieldDescriptor fieldDescriptor : fieldsMap.values()) {\n\t\t\t\tallFields[index] = fieldDescriptor;\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\tArrays.sort(allFields, Comparator.comparing(fd -> fd.getField().getName()));\n\n\t\t\tthis.allFields = allFields;\n\t\t}\n\t\treturn allFields;\n\t}", "code_tokens": ["public", "FieldDescriptor", "[", "]", "getAllFieldDescriptors", "(", ")", "{", "if", "(", "allFields", "==", "null", ")", "{", "FieldDescriptor", "[", "]", "allFields", "=", "new", "FieldDescriptor", "[", "fieldsMap", ".", "size", "(", ")", "]", ";", "int", "index", "=", "0", ";", "for", "(", "FieldDescriptor", "fieldDescriptor", ":", "fieldsMap", ".", "values", "(", ")", ")", "{", "allFields", "[", "index", "]", "=", "fieldDescriptor", ";", "index", "++", ";", "}", "Arrays", ".", "sort", "(", "allFields", ",", "Comparator", ".", "comparing", "(", "fd", "->", "fd", ".", "getField", "(", ")", ".", "getName", "(", ")", ")", ")", ";", "this", ".", "allFields", "=", "allFields", ";", "}", "return", "allFields", ";", "}"], "docstring": "Returns all fields of this collection. Returns empty array\nif no fields exist. Initialized lazy.", "docstring_tokens": ["Returns", "all", "fields", "of", "this", "collection", ".", "Returns", "empty", "array", "if", "no", "fields", "exist", ".", "Initialized", "lazy", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-bean/src/main/java/jodd/introspector/Fields.java#L113-L128", "partition": "test"}
{"repo": "basis-technology-corp/tcl-regex-java", "path": "src/main/java/com/basistech/tclre/ColorMap.java", "func_name": "ColorMap.okcolors", "original_string": "void okcolors(Nfa nfa) {\n        ColorDesc cd;\n        ColorDesc scd;\n        Arc a;\n        short sco;\n\n        for (short co = 0; co < colorDescs.size(); co++) {\n            cd = colorDescs.get(co);\n            if (cd == null) {\n                continue; // not in use at all, so can't have a subcolor.\n            }\n\n            sco = cd.sub;\n\n            if (sco == Constants.NOSUB) {\n            /* has no subcolor, no further action */\n            } else if (sco == co) {\n            /* is subcolor, let parent deal with it */\n            } else if (cd.getNChars() == 0) {\n            /* parent empty, its arcs change color to subcolor */\n                cd.sub = Constants.NOSUB;\n                scd = colorDescs.get(sco);\n\n                assert scd.getNChars() > 0;\n                assert scd.sub == sco;\n\n                scd.sub = Constants.NOSUB;\n                while ((a = cd.arcs) != null) {\n                    assert a.co == co;\n                    cd.arcs = a.colorchain;\n                    a.setColor(sco);\n                    a.colorchain = scd.arcs;\n                    scd.arcs = a;\n                }\n                freecolor(co);\n            } else {\n                /* parent's arcs must gain parallel subcolor arcs */\n                cd.sub = Constants.NOSUB;\n                scd = colorDescs.get(sco);\n\n                assert scd.getNChars() > 0;\n                assert scd.sub == sco;\n\n                scd.sub = Constants.NOSUB;\n\n                for (a = cd.arcs; a != null; a = a.colorchain) {\n                    assert a.co == co;\n                    nfa.newarc(a.type, sco, a.from, a.to);\n                }\n            }\n        }\n    }", "language": "java", "code": "void okcolors(Nfa nfa) {\n        ColorDesc cd;\n        ColorDesc scd;\n        Arc a;\n        short sco;\n\n        for (short co = 0; co < colorDescs.size(); co++) {\n            cd = colorDescs.get(co);\n            if (cd == null) {\n                continue; // not in use at all, so can't have a subcolor.\n            }\n\n            sco = cd.sub;\n\n            if (sco == Constants.NOSUB) {\n            /* has no subcolor, no further action */\n            } else if (sco == co) {\n            /* is subcolor, let parent deal with it */\n            } else if (cd.getNChars() == 0) {\n            /* parent empty, its arcs change color to subcolor */\n                cd.sub = Constants.NOSUB;\n                scd = colorDescs.get(sco);\n\n                assert scd.getNChars() > 0;\n                assert scd.sub == sco;\n\n                scd.sub = Constants.NOSUB;\n                while ((a = cd.arcs) != null) {\n                    assert a.co == co;\n                    cd.arcs = a.colorchain;\n                    a.setColor(sco);\n                    a.colorchain = scd.arcs;\n                    scd.arcs = a;\n                }\n                freecolor(co);\n            } else {\n                /* parent's arcs must gain parallel subcolor arcs */\n                cd.sub = Constants.NOSUB;\n                scd = colorDescs.get(sco);\n\n                assert scd.getNChars() > 0;\n                assert scd.sub == sco;\n\n                scd.sub = Constants.NOSUB;\n\n                for (a = cd.arcs; a != null; a = a.colorchain) {\n                    assert a.co == co;\n                    nfa.newarc(a.type, sco, a.from, a.to);\n                }\n            }\n        }\n    }", "code_tokens": ["void", "okcolors", "(", "Nfa", "nfa", ")", "{", "ColorDesc", "cd", ";", "ColorDesc", "scd", ";", "Arc", "a", ";", "short", "sco", ";", "for", "(", "short", "co", "=", "0", ";", "co", "<", "colorDescs", ".", "size", "(", ")", ";", "co", "++", ")", "{", "cd", "=", "colorDescs", ".", "get", "(", "co", ")", ";", "if", "(", "cd", "==", "null", ")", "{", "continue", ";", "// not in use at all, so can't have a subcolor.", "}", "sco", "=", "cd", ".", "sub", ";", "if", "(", "sco", "==", "Constants", ".", "NOSUB", ")", "{", "/* has no subcolor, no further action */", "}", "else", "if", "(", "sco", "==", "co", ")", "{", "/* is subcolor, let parent deal with it */", "}", "else", "if", "(", "cd", ".", "getNChars", "(", ")", "==", "0", ")", "{", "/* parent empty, its arcs change color to subcolor */", "cd", ".", "sub", "=", "Constants", ".", "NOSUB", ";", "scd", "=", "colorDescs", ".", "get", "(", "sco", ")", ";", "assert", "scd", ".", "getNChars", "(", ")", ">", "0", ";", "assert", "scd", ".", "sub", "==", "sco", ";", "scd", ".", "sub", "=", "Constants", ".", "NOSUB", ";", "while", "(", "(", "a", "=", "cd", ".", "arcs", ")", "!=", "null", ")", "{", "assert", "a", ".", "co", "==", "co", ";", "cd", ".", "arcs", "=", "a", ".", "colorchain", ";", "a", ".", "setColor", "(", "sco", ")", ";", "a", ".", "colorchain", "=", "scd", ".", "arcs", ";", "scd", ".", "arcs", "=", "a", ";", "}", "freecolor", "(", "co", ")", ";", "}", "else", "{", "/* parent's arcs must gain parallel subcolor arcs */", "cd", ".", "sub", "=", "Constants", ".", "NOSUB", ";", "scd", "=", "colorDescs", ".", "get", "(", "sco", ")", ";", "assert", "scd", ".", "getNChars", "(", ")", ">", "0", ";", "assert", "scd", ".", "sub", "==", "sco", ";", "scd", ".", "sub", "=", "Constants", ".", "NOSUB", ";", "for", "(", "a", "=", "cd", ".", "arcs", ";", "a", "!=", "null", ";", "a", "=", "a", ".", "colorchain", ")", "{", "assert", "a", ".", "co", "==", "co", ";", "nfa", ".", "newarc", "(", "a", ".", "type", ",", "sco", ",", "a", ".", "from", ",", "a", ".", "to", ")", ";", "}", "}", "}", "}"], "docstring": "okcolors - promote subcolors to full colors", "docstring_tokens": ["okcolors", "-", "promote", "subcolors", "to", "full", "colors"], "sha": "de0d5eaccf9a61b694cb8793f234cc229c395b43", "url": "https://github.com/basis-technology-corp/tcl-regex-java/blob/de0d5eaccf9a61b694cb8793f234cc229c395b43/src/main/java/com/basistech/tclre/ColorMap.java#L261-L312", "partition": "test"}
{"repo": "real-logic/aeron", "path": "aeron-client/src/main/java/io/aeron/command/CounterMessageFlyweight.java", "func_name": "CounterMessageFlyweight.labelBuffer", "original_string": "public CounterMessageFlyweight labelBuffer(\n        final DirectBuffer labelBuffer, final int labelOffset, final int labelLength)\n    {\n        buffer.putInt(labelOffset(), labelLength);\n        buffer.putBytes(labelBufferOffset(), labelBuffer, labelOffset, labelLength);\n\n        return this;\n    }", "language": "java", "code": "public CounterMessageFlyweight labelBuffer(\n        final DirectBuffer labelBuffer, final int labelOffset, final int labelLength)\n    {\n        buffer.putInt(labelOffset(), labelLength);\n        buffer.putBytes(labelBufferOffset(), labelBuffer, labelOffset, labelLength);\n\n        return this;\n    }", "code_tokens": ["public", "CounterMessageFlyweight", "labelBuffer", "(", "final", "DirectBuffer", "labelBuffer", ",", "final", "int", "labelOffset", ",", "final", "int", "labelLength", ")", "{", "buffer", ".", "putInt", "(", "labelOffset", "(", ")", ",", "labelLength", ")", ";", "buffer", ".", "putBytes", "(", "labelBufferOffset", "(", ")", ",", "labelBuffer", ",", "labelOffset", ",", "labelLength", ")", ";", "return", "this", ";", "}"], "docstring": "Fill the label buffer.\n\n@param labelBuffer containing the mandatory label for the counter.\n@param labelOffset within the labelBuffer at which the label begins.\n@param labelLength of the label in the labelBuffer.\n@return flyweight", "docstring_tokens": ["Fill", "the", "label", "buffer", "."], "sha": "045c32f0256d1ea35d562520216affc281a41239", "url": "https://github.com/real-logic/aeron/blob/045c32f0256d1ea35d562520216affc281a41239/aeron-client/src/main/java/io/aeron/command/CounterMessageFlyweight.java#L146-L153", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-http/src/main/java/jodd/http/HeadersMultiMap.java", "func_name": "HeadersMultiMap.addHeader", "original_string": "public void addHeader(final String name, final String value) {\n\t\tList<String> valuesList = super.getAll(name);\n\t\tif (valuesList.isEmpty()) {\n\t\t\tsuper.add(name, value);\n\t\t\treturn;\n\t\t}\n\t\tsuper.remove(name);\n\t\tvaluesList.add(value);\n\t\tsuper.addAll(name, valuesList);\n\t}", "language": "java", "code": "public void addHeader(final String name, final String value) {\n\t\tList<String> valuesList = super.getAll(name);\n\t\tif (valuesList.isEmpty()) {\n\t\t\tsuper.add(name, value);\n\t\t\treturn;\n\t\t}\n\t\tsuper.remove(name);\n\t\tvaluesList.add(value);\n\t\tsuper.addAll(name, valuesList);\n\t}", "code_tokens": ["public", "void", "addHeader", "(", "final", "String", "name", ",", "final", "String", "value", ")", "{", "List", "<", "String", ">", "valuesList", "=", "super", ".", "getAll", "(", "name", ")", ";", "if", "(", "valuesList", ".", "isEmpty", "(", ")", ")", "{", "super", ".", "add", "(", "name", ",", "value", ")", ";", "return", ";", "}", "super", ".", "remove", "(", "name", ")", ";", "valuesList", ".", "add", "(", "value", ")", ";", "super", ".", "addAll", "(", "name", ",", "valuesList", ")", ";", "}"], "docstring": "Adds new header value. If existing value exist, it will be removed\nso the store the new key value.", "docstring_tokens": ["Adds", "new", "header", "value", ".", "If", "existing", "value", "exist", "it", "will", "be", "removed", "so", "the", "store", "the", "new", "key", "value", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-http/src/main/java/jodd/http/HeadersMultiMap.java#L40-L49", "partition": "test"}
{"repo": "Unidata/thredds", "path": "ui/src/main/java/ucar/nc2/util/net/HttpClientManager.java", "func_name": "HttpClientManager.getContentAsString", "original_string": "@Urlencoded\n  @Deprecated\n  public static String getContentAsString(HTTPSession session, String urlencoded) throws IOException\n  {\n    HTTPSession useSession = session;\n    try {\n      if (useSession == null)\n        useSession = HTTPFactory.newSession(urlencoded);\n      try (HTTPMethod m = HTTPFactory.Get(useSession, urlencoded)) {\n          m.execute();\n          return m.getResponseAsString();\n      }\n    } finally {\n      if ((session == null) && (useSession != null))\n        useSession.close();\n    }\n  }", "language": "java", "code": "@Urlencoded\n  @Deprecated\n  public static String getContentAsString(HTTPSession session, String urlencoded) throws IOException\n  {\n    HTTPSession useSession = session;\n    try {\n      if (useSession == null)\n        useSession = HTTPFactory.newSession(urlencoded);\n      try (HTTPMethod m = HTTPFactory.Get(useSession, urlencoded)) {\n          m.execute();\n          return m.getResponseAsString();\n      }\n    } finally {\n      if ((session == null) && (useSession != null))\n        useSession.close();\n    }\n  }", "code_tokens": ["@", "Urlencoded", "@", "Deprecated", "public", "static", "String", "getContentAsString", "(", "HTTPSession", "session", ",", "String", "urlencoded", ")", "throws", "IOException", "{", "HTTPSession", "useSession", "=", "session", ";", "try", "{", "if", "(", "useSession", "==", "null", ")", "useSession", "=", "HTTPFactory", ".", "newSession", "(", "urlencoded", ")", ";", "try", "(", "HTTPMethod", "m", "=", "HTTPFactory", ".", "Get", "(", "useSession", ",", "urlencoded", ")", ")", "{", "m", ".", "execute", "(", ")", ";", "return", "m", ".", "getResponseAsString", "(", ")", ";", "}", "}", "finally", "{", "if", "(", "(", "session", "==", "null", ")", "&&", "(", "useSession", "!=", "null", ")", ")", "useSession", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Get the content from a url. For large returns, its better to use getResponseAsStream.\n\n@param session    use this session, if null, create a new one\n@param urlencoded url as a String\n@return contents of url as a String\n@throws java.io.IOException on error", "docstring_tokens": ["Get", "the", "content", "from", "a", "url", ".", "For", "large", "returns", "its", "better", "to", "use", "getResponseAsStream", "."], "sha": "d2d68f9eee87f345625211324d71d5dc3e162ee1", "url": "https://github.com/Unidata/thredds/blob/d2d68f9eee87f345625211324d71d5dc3e162ee1/ui/src/main/java/ucar/nc2/util/net/HttpClientManager.java#L73-L89", "partition": "test"}
{"repo": "lessthanoptimal/GeoRegression", "path": "main/src/georegression/geometry/UtilVector3D_F64.java", "func_name": "UtilVector3D_F64.createRandom", "original_string": "public static Vector3D_F64 createRandom( double min, double max, Random rand ) {\n\t\tdouble range = max - min;\n\n\t\tVector3D_F64 a = new Vector3D_F64();\n\n\t\ta.x = range * rand.nextDouble() + min;\n\t\ta.y = range * rand.nextDouble() + min;\n\t\ta.z = range * rand.nextDouble() + min;\n\n\t\treturn a;\n\t}", "language": "java", "code": "public static Vector3D_F64 createRandom( double min, double max, Random rand ) {\n\t\tdouble range = max - min;\n\n\t\tVector3D_F64 a = new Vector3D_F64();\n\n\t\ta.x = range * rand.nextDouble() + min;\n\t\ta.y = range * rand.nextDouble() + min;\n\t\ta.z = range * rand.nextDouble() + min;\n\n\t\treturn a;\n\t}", "code_tokens": ["public", "static", "Vector3D_F64", "createRandom", "(", "double", "min", ",", "double", "max", ",", "Random", "rand", ")", "{", "double", "range", "=", "max", "-", "min", ";", "Vector3D_F64", "a", "=", "new", "Vector3D_F64", "(", ")", ";", "a", ".", "x", "=", "range", "*", "rand", ".", "nextDouble", "(", ")", "+", "min", ";", "a", ".", "y", "=", "range", "*", "rand", ".", "nextDouble", "(", ")", "+", "min", ";", "a", ".", "z", "=", "range", "*", "rand", ".", "nextDouble", "(", ")", "+", "min", ";", "return", "a", ";", "}"], "docstring": "Creates a random vector where each axis is selected from a uniform distribution.\n\n@param min  minimum value\n@param max  maximum value\n@param rand random number generator\n@return the new random vector", "docstring_tokens": ["Creates", "a", "random", "vector", "where", "each", "axis", "is", "selected", "from", "a", "uniform", "distribution", "."], "sha": "c067cd44a4e95bd826119f6e658bd82386ef289f", "url": "https://github.com/lessthanoptimal/GeoRegression/blob/c067cd44a4e95bd826119f6e658bd82386ef289f/main/src/georegression/geometry/UtilVector3D_F64.java#L43-L53", "partition": "test"}
{"repo": "alipay/sofa-bolt", "path": "src/main/java/com/alipay/remoting/util/RemotingUtil.java", "func_name": "RemotingUtil.parseSocketAddressToHostIp", "original_string": "public static String parseSocketAddressToHostIp(SocketAddress socketAddress) {\n        final InetSocketAddress addrs = (InetSocketAddress) socketAddress;\n        if (addrs != null) {\n            InetAddress addr = addrs.getAddress();\n            if (null != addr) {\n                return addr.getHostAddress();\n            }\n        }\n        return StringUtils.EMPTY;\n    }", "language": "java", "code": "public static String parseSocketAddressToHostIp(SocketAddress socketAddress) {\n        final InetSocketAddress addrs = (InetSocketAddress) socketAddress;\n        if (addrs != null) {\n            InetAddress addr = addrs.getAddress();\n            if (null != addr) {\n                return addr.getHostAddress();\n            }\n        }\n        return StringUtils.EMPTY;\n    }", "code_tokens": ["public", "static", "String", "parseSocketAddressToHostIp", "(", "SocketAddress", "socketAddress", ")", "{", "final", "InetSocketAddress", "addrs", "=", "(", "InetSocketAddress", ")", "socketAddress", ";", "if", "(", "addrs", "!=", "null", ")", "{", "InetAddress", "addr", "=", "addrs", ".", "getAddress", "(", ")", ";", "if", "(", "null", "!=", "addr", ")", "{", "return", "addr", ".", "getHostAddress", "(", ")", ";", "}", "}", "return", "StringUtils", ".", "EMPTY", ";", "}"], "docstring": "Parse the host ip of socket address.\n\ne.g. /127.0.0.1:1234 -> 127.0.0.1\n\n@param socketAddress\n@return String", "docstring_tokens": ["Parse", "the", "host", "ip", "of", "socket", "address", "."], "sha": "0ad7b46b2649bfc4e2ecc1f5e1c1f935d179c046", "url": "https://github.com/alipay/sofa-bolt/blob/0ad7b46b2649bfc4e2ecc1f5e1c1f935d179c046/src/main/java/com/alipay/remoting/util/RemotingUtil.java#L172-L181", "partition": "test"}
{"repo": "objectify/objectify", "path": "src/main/java/com/googlecode/objectify/impl/translate/Translators.java", "func_name": "Translators.get", "original_string": "public <P, D> Translator<P, D> get(final TypeKey tk, final CreateContext ctx, final Path path) {\n\n\t\tTranslator<?, ?> translator = translators.get(tk);\n\t\tif (translator == null) {\n\t\t\ttranslator = create(tk, ctx, path);\n\t\t\ttranslators.put(tk, translator);\n\t\t}\n\n\t\t//noinspection unchecked\n\t\treturn (Translator<P, D>)translator;\n\t}", "language": "java", "code": "public <P, D> Translator<P, D> get(final TypeKey tk, final CreateContext ctx, final Path path) {\n\n\t\tTranslator<?, ?> translator = translators.get(tk);\n\t\tif (translator == null) {\n\t\t\ttranslator = create(tk, ctx, path);\n\t\t\ttranslators.put(tk, translator);\n\t\t}\n\n\t\t//noinspection unchecked\n\t\treturn (Translator<P, D>)translator;\n\t}", "code_tokens": ["public", "<", "P", ",", "D", ">", "Translator", "<", "P", ",", "D", ">", "get", "(", "final", "TypeKey", "tk", ",", "final", "CreateContext", "ctx", ",", "final", "Path", "path", ")", "{", "Translator", "<", "?", ",", "?", ">", "translator", "=", "translators", ".", "get", "(", "tk", ")", ";", "if", "(", "translator", "==", "null", ")", "{", "translator", "=", "create", "(", "tk", ",", "ctx", ",", "path", ")", ";", "translators", ".", "put", "(", "tk", ",", "translator", ")", ";", "}", "//noinspection unchecked", "return", "(", "Translator", "<", "P", ",", "D", ">", ")", "translator", ";", "}"], "docstring": "Obtains the Translator appropriate for this type and annotations. May be a cached\ntranslator; if not, one will be discovered and cached.", "docstring_tokens": ["Obtains", "the", "Translator", "appropriate", "for", "this", "type", "and", "annotations", ".", "May", "be", "a", "cached", "translator", ";", "if", "not", "one", "will", "be", "discovered", "and", "cached", "."], "sha": "4bf325d2e49b400326416977c7d9bbdf5380175b", "url": "https://github.com/objectify/objectify/blob/4bf325d2e49b400326416977c7d9bbdf5380175b/src/main/java/com/googlecode/objectify/impl/translate/Translators.java#L121-L131", "partition": "test"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java", "func_name": "ActivityContextImpl.removeNamingBindings", "original_string": "private void removeNamingBindings() {\n\t\tActivityContextNamingFacility acf = sleeContainer\n\t\t\t\t.getActivityContextNamingFacility();\n\t\tfor (Object obj : cacheData.getNamesBoundCopy()) {\n\t\t\tString aciName = (String) obj;\n\t\t\ttry {\n\t\t\t\tacf.removeName(aciName);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.warn(\"failed to unbind name: \" + aciName + \" from ac:\"\n\t\t\t\t\t\t+ getActivityContextHandle(), e);\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "private void removeNamingBindings() {\n\t\tActivityContextNamingFacility acf = sleeContainer\n\t\t\t\t.getActivityContextNamingFacility();\n\t\tfor (Object obj : cacheData.getNamesBoundCopy()) {\n\t\t\tString aciName = (String) obj;\n\t\t\ttry {\n\t\t\t\tacf.removeName(aciName);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.warn(\"failed to unbind name: \" + aciName + \" from ac:\"\n\t\t\t\t\t\t+ getActivityContextHandle(), e);\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["private", "void", "removeNamingBindings", "(", ")", "{", "ActivityContextNamingFacility", "acf", "=", "sleeContainer", ".", "getActivityContextNamingFacility", "(", ")", ";", "for", "(", "Object", "obj", ":", "cacheData", ".", "getNamesBoundCopy", "(", ")", ")", "{", "String", "aciName", "=", "(", "String", ")", "obj", ";", "try", "{", "acf", ".", "removeName", "(", "aciName", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "warn", "(", "\"failed to unbind name: \"", "+", "aciName", "+", "\" from ac:\"", "+", "getActivityContextHandle", "(", ")", ",", "e", ")", ";", "}", "}", "}"], "docstring": "This is called to release all the name bindings after the activity end\nevent is delivered to the sbb.", "docstring_tokens": ["This", "is", "called", "to", "release", "all", "the", "name", "bindings", "after", "the", "activity", "end", "event", "is", "delivered", "to", "the", "sbb", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java#L239-L251", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-lagarto/src/main/java/jodd/lagarto/dom/LagartoDOMBuilder.java", "func_name": "LagartoDOMBuilder.parse", "original_string": "@Override\n\tpublic Document parse(final char[] content) {\n\t\tLagartoParser lagartoParser = new LagartoParser(content);\n\t\treturn doParse(lagartoParser);\n\t}", "language": "java", "code": "@Override\n\tpublic Document parse(final char[] content) {\n\t\tLagartoParser lagartoParser = new LagartoParser(content);\n\t\treturn doParse(lagartoParser);\n\t}", "code_tokens": ["@", "Override", "public", "Document", "parse", "(", "final", "char", "[", "]", "content", ")", "{", "LagartoParser", "lagartoParser", "=", "new", "LagartoParser", "(", "content", ")", ";", "return", "doParse", "(", "lagartoParser", ")", ";", "}"], "docstring": "Creates DOM tree from provided content.", "docstring_tokens": ["Creates", "DOM", "tree", "from", "provided", "content", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-lagarto/src/main/java/jodd/lagarto/dom/LagartoDOMBuilder.java#L133-L137", "partition": "test"}
{"repo": "real-logic/aeron", "path": "aeron-driver/src/main/java/io/aeron/driver/media/UdpChannelTransport.java", "func_name": "UdpChannelTransport.receive", "original_string": "public InetSocketAddress receive(final ByteBuffer buffer)\n    {\n        buffer.clear();\n\n        InetSocketAddress address = null;\n        try\n        {\n            if (receiveDatagramChannel.isOpen())\n            {\n                address = (InetSocketAddress)receiveDatagramChannel.receive(buffer);\n            }\n        }\n        catch (final PortUnreachableException ignored)\n        {\n        }\n        catch (final Exception ex)\n        {\n            LangUtil.rethrowUnchecked(ex);\n        }\n\n        return address;\n    }", "language": "java", "code": "public InetSocketAddress receive(final ByteBuffer buffer)\n    {\n        buffer.clear();\n\n        InetSocketAddress address = null;\n        try\n        {\n            if (receiveDatagramChannel.isOpen())\n            {\n                address = (InetSocketAddress)receiveDatagramChannel.receive(buffer);\n            }\n        }\n        catch (final PortUnreachableException ignored)\n        {\n        }\n        catch (final Exception ex)\n        {\n            LangUtil.rethrowUnchecked(ex);\n        }\n\n        return address;\n    }", "code_tokens": ["public", "InetSocketAddress", "receive", "(", "final", "ByteBuffer", "buffer", ")", "{", "buffer", ".", "clear", "(", ")", ";", "InetSocketAddress", "address", "=", "null", ";", "try", "{", "if", "(", "receiveDatagramChannel", ".", "isOpen", "(", ")", ")", "{", "address", "=", "(", "InetSocketAddress", ")", "receiveDatagramChannel", ".", "receive", "(", "buffer", ")", ";", "}", "}", "catch", "(", "final", "PortUnreachableException", "ignored", ")", "{", "}", "catch", "(", "final", "Exception", "ex", ")", "{", "LangUtil", ".", "rethrowUnchecked", "(", "ex", ")", ";", "}", "return", "address", ";", "}"], "docstring": "Receive a datagram from the media layer.\n\n@param buffer into which the datagram will be received.\n@return the source address of the datagram if one is available otherwise false.", "docstring_tokens": ["Receive", "a", "datagram", "from", "the", "media", "layer", "."], "sha": "045c32f0256d1ea35d562520216affc281a41239", "url": "https://github.com/real-logic/aeron/blob/045c32f0256d1ea35d562520216affc281a41239/aeron-driver/src/main/java/io/aeron/driver/media/UdpChannelTransport.java#L302-L323", "partition": "test"}
{"repo": "1gravity/Android-RTEditor", "path": "RTEditor/src/main/java/com/onegravity/rteditor/converter/tagsoup/Parser.java", "func_name": "Parser.setup", "original_string": "private void setup() {\n        if (theSchema == null) theSchema = new HTMLSchema();\n        if (theScanner == null) theScanner = new HTMLScanner();\n        if (theAutoDetector == null) {\n            theAutoDetector = new AutoDetector() {\n                public Reader autoDetectingReader(InputStream i) {\n                    return new InputStreamReader(i);\n                }\n            };\n        }\n        theStack = new Element(theSchema.getElementType(\"<root>\"), defaultAttributes);\n        thePCDATA = new Element(theSchema.getElementType(\"<pcdata>\"), defaultAttributes);\n        theNewElement = null;\n        theAttributeName = null;\n        thePITarget = null;\n        theSaved = null;\n        theEntity = 0;\n        virginStack = true;\n        theDoctypeName = theDoctypePublicId = theDoctypeSystemId = null;\n    }", "language": "java", "code": "private void setup() {\n        if (theSchema == null) theSchema = new HTMLSchema();\n        if (theScanner == null) theScanner = new HTMLScanner();\n        if (theAutoDetector == null) {\n            theAutoDetector = new AutoDetector() {\n                public Reader autoDetectingReader(InputStream i) {\n                    return new InputStreamReader(i);\n                }\n            };\n        }\n        theStack = new Element(theSchema.getElementType(\"<root>\"), defaultAttributes);\n        thePCDATA = new Element(theSchema.getElementType(\"<pcdata>\"), defaultAttributes);\n        theNewElement = null;\n        theAttributeName = null;\n        thePITarget = null;\n        theSaved = null;\n        theEntity = 0;\n        virginStack = true;\n        theDoctypeName = theDoctypePublicId = theDoctypeSystemId = null;\n    }", "code_tokens": ["private", "void", "setup", "(", ")", "{", "if", "(", "theSchema", "==", "null", ")", "theSchema", "=", "new", "HTMLSchema", "(", ")", ";", "if", "(", "theScanner", "==", "null", ")", "theScanner", "=", "new", "HTMLScanner", "(", ")", ";", "if", "(", "theAutoDetector", "==", "null", ")", "{", "theAutoDetector", "=", "new", "AutoDetector", "(", ")", "{", "public", "Reader", "autoDetectingReader", "(", "InputStream", "i", ")", "{", "return", "new", "InputStreamReader", "(", "i", ")", ";", "}", "}", ";", "}", "theStack", "=", "new", "Element", "(", "theSchema", ".", "getElementType", "(", "\"<root>\"", ")", ",", "defaultAttributes", ")", ";", "thePCDATA", "=", "new", "Element", "(", "theSchema", ".", "getElementType", "(", "\"<pcdata>\"", ")", ",", "defaultAttributes", ")", ";", "theNewElement", "=", "null", ";", "theAttributeName", "=", "null", ";", "thePITarget", "=", "null", ";", "theSaved", "=", "null", ";", "theEntity", "=", "0", ";", "virginStack", "=", "true", ";", "theDoctypeName", "=", "theDoctypePublicId", "=", "theDoctypeSystemId", "=", "null", ";", "}"], "docstring": "Sets up instance variables that haven't been set by setFeature", "docstring_tokens": ["Sets", "up", "instance", "variables", "that", "haven", "t", "been", "set", "by", "setFeature"], "sha": "9d8fb4bb865b3b3d011e7633afedcdfb8d21754f", "url": "https://github.com/1gravity/Android-RTEditor/blob/9d8fb4bb865b3b3d011e7633afedcdfb8d21754f/RTEditor/src/main/java/com/onegravity/rteditor/converter/tagsoup/Parser.java#L451-L470", "partition": "test"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java", "func_name": "ComponentConfiguration.setComponentCreateServiceFactory", "original_string": "public void setComponentCreateServiceFactory(final ComponentCreateServiceFactory componentCreateServiceFactory) {\n        if (componentCreateServiceFactory == null) {\n            throw EeLogger.ROOT_LOGGER.nullVar(\"componentCreateServiceFactory\", \"component\", getComponentName());\n        }\n        this.componentCreateServiceFactory = componentCreateServiceFactory;\n    }", "language": "java", "code": "public void setComponentCreateServiceFactory(final ComponentCreateServiceFactory componentCreateServiceFactory) {\n        if (componentCreateServiceFactory == null) {\n            throw EeLogger.ROOT_LOGGER.nullVar(\"componentCreateServiceFactory\", \"component\", getComponentName());\n        }\n        this.componentCreateServiceFactory = componentCreateServiceFactory;\n    }", "code_tokens": ["public", "void", "setComponentCreateServiceFactory", "(", "final", "ComponentCreateServiceFactory", "componentCreateServiceFactory", ")", "{", "if", "(", "componentCreateServiceFactory", "==", "null", ")", "{", "throw", "EeLogger", ".", "ROOT_LOGGER", ".", "nullVar", "(", "\"componentCreateServiceFactory\"", ",", "\"component\"", ",", "getComponentName", "(", ")", ")", ";", "}", "this", ".", "componentCreateServiceFactory", "=", "componentCreateServiceFactory", ";", "}"], "docstring": "Set the component create service factory for this component.\n\n@param componentCreateServiceFactory the component create service factory", "docstring_tokens": ["Set", "the", "component", "create", "service", "factory", "for", "this", "component", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java#L526-L531", "partition": "test"}
{"repo": "tiefaces/TieFaces", "path": "src/org/tiefaces/components/websheet/utility/CellStyleUtility.java", "func_name": "CellStyleUtility.getColumnStyle", "original_string": "public static String getColumnStyle(final Workbook wb,\r\n\t\t\tfinal FacesCell fcell, final Cell poiCell,\r\n\t\t\tfinal float rowHeight) {\r\n\r\n\t\tString inputType = fcell.getInputType();\r\n\t\tCellStyle cellStyle = poiCell.getCellStyle();\r\n\t\tStringBuilder webStyle = new StringBuilder();\r\n\t\tif (cellStyle != null) {\r\n\t\t\tif (fcell.isContainPic() || fcell.isContainChart()) {\r\n\t\t\t\twebStyle.append(\"vertical-align: top;\");\r\n\t\t\t} else {\r\n\t\t\t\twebStyle.append(getAlignmentFromCell(poiCell, cellStyle));\r\n\t\t\t\twebStyle.append(getVerticalAlignmentFromCell(cellStyle));\r\n\t\t\t}\r\n\t\t\twebStyle.append(ColorUtility.getBgColorFromCell(wb, poiCell,\r\n\t\t\t\t\tcellStyle));\r\n\t\t\twebStyle.append(getRowStyle(wb, poiCell, inputType, rowHeight,\r\n\t\t\t\t\tfcell.getRowspan()));\r\n\t\t} else {\r\n\t\t\twebStyle.append(getAlignmentFromCellType(poiCell));\r\n\t\t}\r\n\t\treturn webStyle.toString();\r\n\r\n\t}", "language": "java", "code": "public static String getColumnStyle(final Workbook wb,\r\n\t\t\tfinal FacesCell fcell, final Cell poiCell,\r\n\t\t\tfinal float rowHeight) {\r\n\r\n\t\tString inputType = fcell.getInputType();\r\n\t\tCellStyle cellStyle = poiCell.getCellStyle();\r\n\t\tStringBuilder webStyle = new StringBuilder();\r\n\t\tif (cellStyle != null) {\r\n\t\t\tif (fcell.isContainPic() || fcell.isContainChart()) {\r\n\t\t\t\twebStyle.append(\"vertical-align: top;\");\r\n\t\t\t} else {\r\n\t\t\t\twebStyle.append(getAlignmentFromCell(poiCell, cellStyle));\r\n\t\t\t\twebStyle.append(getVerticalAlignmentFromCell(cellStyle));\r\n\t\t\t}\r\n\t\t\twebStyle.append(ColorUtility.getBgColorFromCell(wb, poiCell,\r\n\t\t\t\t\tcellStyle));\r\n\t\t\twebStyle.append(getRowStyle(wb, poiCell, inputType, rowHeight,\r\n\t\t\t\t\tfcell.getRowspan()));\r\n\t\t} else {\r\n\t\t\twebStyle.append(getAlignmentFromCellType(poiCell));\r\n\t\t}\r\n\t\treturn webStyle.toString();\r\n\r\n\t}", "code_tokens": ["public", "static", "String", "getColumnStyle", "(", "final", "Workbook", "wb", ",", "final", "FacesCell", "fcell", ",", "final", "Cell", "poiCell", ",", "final", "float", "rowHeight", ")", "{", "String", "inputType", "=", "fcell", ".", "getInputType", "(", ")", ";", "CellStyle", "cellStyle", "=", "poiCell", ".", "getCellStyle", "(", ")", ";", "StringBuilder", "webStyle", "=", "new", "StringBuilder", "(", ")", ";", "if", "(", "cellStyle", "!=", "null", ")", "{", "if", "(", "fcell", ".", "isContainPic", "(", ")", "||", "fcell", ".", "isContainChart", "(", ")", ")", "{", "webStyle", ".", "append", "(", "\"vertical-align: top;\"", ")", ";", "}", "else", "{", "webStyle", ".", "append", "(", "getAlignmentFromCell", "(", "poiCell", ",", "cellStyle", ")", ")", ";", "webStyle", ".", "append", "(", "getVerticalAlignmentFromCell", "(", "cellStyle", ")", ")", ";", "}", "webStyle", ".", "append", "(", "ColorUtility", ".", "getBgColorFromCell", "(", "wb", ",", "poiCell", ",", "cellStyle", ")", ")", ";", "webStyle", ".", "append", "(", "getRowStyle", "(", "wb", ",", "poiCell", ",", "inputType", ",", "rowHeight", ",", "fcell", ".", "getRowspan", "(", ")", ")", ")", ";", "}", "else", "{", "webStyle", ".", "append", "(", "getAlignmentFromCellType", "(", "poiCell", ")", ")", ";", "}", "return", "webStyle", ".", "toString", "(", ")", ";", "}"], "docstring": "Gets the column style.\n\n@param wb\nthe wb\n@param fcell\nthe fcell\n@param poiCell\nthe poi cell\n@param rowHeight\nthe row height\n@return the column style", "docstring_tokens": ["Gets", "the", "column", "style", "."], "sha": "3b57b9701ed0f080b5fa4fa78269cc0c422b34ba", "url": "https://github.com/tiefaces/TieFaces/blob/3b57b9701ed0f080b5fa4fa78269cc0c422b34ba/src/org/tiefaces/components/websheet/utility/CellStyleUtility.java#L190-L213", "partition": "test"}
{"repo": "nyla-solutions/gedi-geode", "path": "gedi-geode-extensions-core/src/main/java/gedi/solutions/geode/operations/gfd/SnapshotRecordReader.java", "func_name": "SnapshotRecordReader.readSnapshotRecord", "original_string": "public SnapshotRecord readSnapshotRecord() throws IOException, ClassNotFoundException {\n      byte[] key = DataSerializer.readByteArray(dis);\n      if (key == null) {\n        return null;\n      }\n\n      byte[] value = DataSerializer.readByteArray(dis);\n      return new SnapshotRecord(key, value);\n    }", "language": "java", "code": "public SnapshotRecord readSnapshotRecord() throws IOException, ClassNotFoundException {\n      byte[] key = DataSerializer.readByteArray(dis);\n      if (key == null) {\n        return null;\n      }\n\n      byte[] value = DataSerializer.readByteArray(dis);\n      return new SnapshotRecord(key, value);\n    }", "code_tokens": ["public", "SnapshotRecord", "readSnapshotRecord", "(", ")", "throws", "IOException", ",", "ClassNotFoundException", "{", "byte", "[", "]", "key", "=", "DataSerializer", ".", "readByteArray", "(", "dis", ")", ";", "if", "(", "key", "==", "null", ")", "{", "return", "null", ";", "}", "byte", "[", "]", "value", "=", "DataSerializer", ".", "readByteArray", "(", "dis", ")", ";", "return", "new", "SnapshotRecord", "(", "key", ",", "value", ")", ";", "}"], "docstring": "Reads a snapshot entry. If the last entry has been read, a null value will be returned.\n\n@return the entry or null\n@throws IOException unable to read entry\n@throws ClassNotFoundException unable to create entry", "docstring_tokens": ["Reads", "a", "snapshot", "entry", ".", "If", "the", "last", "entry", "has", "been", "read", "a", "null", "value", "will", "be", "returned", "."], "sha": "3dd71d6e66e941ce350b306b70677ee95a7d9eee", "url": "https://github.com/nyla-solutions/gedi-geode/blob/3dd71d6e66e941ce350b306b70677ee95a7d9eee/gedi-geode-extensions-core/src/main/java/gedi/solutions/geode/operations/gfd/SnapshotRecordReader.java#L141-L149", "partition": "test"}
{"repo": "orientechnologies/orientdb", "path": "server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedConfiguration.java", "func_name": "ODistributedConfiguration.getDataCenterServers", "original_string": "public List<String> getDataCenterServers(final String dataCenter) {\n\n    final ODocument dc = getDataCenterConfiguration(dataCenter);\n\n    final List<String> servers = dc.field(SERVERS);\n    if (servers == null || servers.isEmpty())\n      throw new OConfigurationException(\n          \"Data center '\" + dataCenter + \"' does not contain any server in distributed database configuration\");\n\n    return new ArrayList<String>(servers);\n  }", "language": "java", "code": "public List<String> getDataCenterServers(final String dataCenter) {\n\n    final ODocument dc = getDataCenterConfiguration(dataCenter);\n\n    final List<String> servers = dc.field(SERVERS);\n    if (servers == null || servers.isEmpty())\n      throw new OConfigurationException(\n          \"Data center '\" + dataCenter + \"' does not contain any server in distributed database configuration\");\n\n    return new ArrayList<String>(servers);\n  }", "code_tokens": ["public", "List", "<", "String", ">", "getDataCenterServers", "(", "final", "String", "dataCenter", ")", "{", "final", "ODocument", "dc", "=", "getDataCenterConfiguration", "(", "dataCenter", ")", ";", "final", "List", "<", "String", ">", "servers", "=", "dc", ".", "field", "(", "SERVERS", ")", ";", "if", "(", "servers", "==", "null", "||", "servers", ".", "isEmpty", "(", ")", ")", "throw", "new", "OConfigurationException", "(", "\"Data center '\"", "+", "dataCenter", "+", "\"' does not contain any server in distributed database configuration\"", ")", ";", "return", "new", "ArrayList", "<", "String", ">", "(", "servers", ")", ";", "}"], "docstring": "Returns the list of servers in a data center.\n\n@param dataCenter Data center name\n\n@throws OConfigurationException if the list of servers is not found in data center configuration", "docstring_tokens": ["Returns", "the", "list", "of", "servers", "in", "a", "data", "center", "."], "sha": "d970b12033f0462f0239ea0ad8ed41207e6e26f1", "url": "https://github.com/orientechnologies/orientdb/blob/d970b12033f0462f0239ea0ad8ed41207e6e26f1/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedConfiguration.java#L636-L646", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-lagarto/src/main/java/jodd/csselly/CssSelector.java", "func_name": "CssSelector.accept", "original_string": "@Override\n\tpublic boolean accept(final Node node) {\n\t\t// match element name with node name\n\t\tif (!matchElement(node)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// match attributes\n\t\tint totalSelectors = selectorsCount();\n\t\tfor (int i = 0; i < totalSelectors; i++) {\n\t\t\tSelector selector = getSelector(i);\n\n\t\t\t// just attr name existence\n\t\t\tswitch (selector.getType()) {\n\t\t\t\tcase ATTRIBUTE:\n\t\t\t\t\tif (!((AttributeSelector) selector).accept(node)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase PSEUDO_CLASS:\n\t\t\t\t\tif (!((PseudoClassSelector) selector).accept(node)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase PSEUDO_FUNCTION:\n\t\t\t\t\tif (!((PseudoFunctionSelector) selector).accept(node)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}", "language": "java", "code": "@Override\n\tpublic boolean accept(final Node node) {\n\t\t// match element name with node name\n\t\tif (!matchElement(node)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// match attributes\n\t\tint totalSelectors = selectorsCount();\n\t\tfor (int i = 0; i < totalSelectors; i++) {\n\t\t\tSelector selector = getSelector(i);\n\n\t\t\t// just attr name existence\n\t\t\tswitch (selector.getType()) {\n\t\t\t\tcase ATTRIBUTE:\n\t\t\t\t\tif (!((AttributeSelector) selector).accept(node)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase PSEUDO_CLASS:\n\t\t\t\t\tif (!((PseudoClassSelector) selector).accept(node)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase PSEUDO_FUNCTION:\n\t\t\t\t\tif (!((PseudoFunctionSelector) selector).accept(node)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}", "code_tokens": ["@", "Override", "public", "boolean", "accept", "(", "final", "Node", "node", ")", "{", "// match element name with node name", "if", "(", "!", "matchElement", "(", "node", ")", ")", "{", "return", "false", ";", "}", "// match attributes", "int", "totalSelectors", "=", "selectorsCount", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "totalSelectors", ";", "i", "++", ")", "{", "Selector", "selector", "=", "getSelector", "(", "i", ")", ";", "// just attr name existence", "switch", "(", "selector", ".", "getType", "(", ")", ")", "{", "case", "ATTRIBUTE", ":", "if", "(", "!", "(", "(", "AttributeSelector", ")", "selector", ")", ".", "accept", "(", "node", ")", ")", "{", "return", "false", ";", "}", "break", ";", "case", "PSEUDO_CLASS", ":", "if", "(", "!", "(", "(", "PseudoClassSelector", ")", "selector", ")", ".", "accept", "(", "node", ")", ")", "{", "return", "false", ";", "}", "break", ";", "case", "PSEUDO_FUNCTION", ":", "if", "(", "!", "(", "(", "PseudoFunctionSelector", ")", "selector", ")", ".", "accept", "(", "node", ")", ")", "{", "return", "false", ";", "}", "break", ";", "}", "}", "return", "true", ";", "}"], "docstring": "Accepts single node.", "docstring_tokens": ["Accepts", "single", "node", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-lagarto/src/main/java/jodd/csselly/CssSelector.java#L224-L256", "partition": "test"}
{"repo": "fabric8io/fabric8-maven-plugin", "path": "core/src/main/java/io/fabric8/maven/core/util/kubernetes/KubernetesHelper.java", "func_name": "KubernetesHelper.getResourceVersion", "original_string": "public static String getResourceVersion(HasMetadata entity) {\n        if (entity != null) {\n            ObjectMeta metadata = entity.getMetadata();\n            if (metadata != null) {\n                String resourceVersion = metadata.getResourceVersion();\n                if (StringUtils.isNotBlank(resourceVersion)) {\n                    return resourceVersion;\n                }\n            }\n        }\n        return null;\n    }", "language": "java", "code": "public static String getResourceVersion(HasMetadata entity) {\n        if (entity != null) {\n            ObjectMeta metadata = entity.getMetadata();\n            if (metadata != null) {\n                String resourceVersion = metadata.getResourceVersion();\n                if (StringUtils.isNotBlank(resourceVersion)) {\n                    return resourceVersion;\n                }\n            }\n        }\n        return null;\n    }", "code_tokens": ["public", "static", "String", "getResourceVersion", "(", "HasMetadata", "entity", ")", "{", "if", "(", "entity", "!=", "null", ")", "{", "ObjectMeta", "metadata", "=", "entity", ".", "getMetadata", "(", ")", ";", "if", "(", "metadata", "!=", "null", ")", "{", "String", "resourceVersion", "=", "metadata", ".", "getResourceVersion", "(", ")", ";", "if", "(", "StringUtils", ".", "isNotBlank", "(", "resourceVersion", ")", ")", "{", "return", "resourceVersion", ";", "}", "}", "}", "return", "null", ";", "}"], "docstring": "Returns the resource version for the entity or null if it does not have one", "docstring_tokens": ["Returns", "the", "resource", "version", "for", "the", "entity", "or", "null", "if", "it", "does", "not", "have", "one"], "sha": "b0e7ad860a5bbe4ab71be3d0613862a1f14a8be3", "url": "https://github.com/fabric8io/fabric8-maven-plugin/blob/b0e7ad860a5bbe4ab71be3d0613862a1f14a8be3/core/src/main/java/io/fabric8/maven/core/util/kubernetes/KubernetesHelper.java#L130-L141", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-core/src/main/java/jodd/util/ProcessRunner.java", "func_name": "ProcessRunner.run", "original_string": "public static ProcessResult run(final Process process) throws InterruptedException {\n\t\tfinal ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n\t\tfinal StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), baos, OUTPUT_PREFIX);\n\t\tfinal StreamGobbler errorGobbler = new StreamGobbler(process.getErrorStream(), baos, ERROR_PREFIX);\n\n\t\toutputGobbler.start();\n\t\terrorGobbler.start();\n\n\t\tfinal int result = process.waitFor();\n\n\t\toutputGobbler.waitFor();\n\t\terrorGobbler.waitFor();\n\n\t\treturn new ProcessResult(result, baos.toString());\n\t}", "language": "java", "code": "public static ProcessResult run(final Process process) throws InterruptedException {\n\t\tfinal ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n\t\tfinal StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), baos, OUTPUT_PREFIX);\n\t\tfinal StreamGobbler errorGobbler = new StreamGobbler(process.getErrorStream(), baos, ERROR_PREFIX);\n\n\t\toutputGobbler.start();\n\t\terrorGobbler.start();\n\n\t\tfinal int result = process.waitFor();\n\n\t\toutputGobbler.waitFor();\n\t\terrorGobbler.waitFor();\n\n\t\treturn new ProcessResult(result, baos.toString());\n\t}", "code_tokens": ["public", "static", "ProcessResult", "run", "(", "final", "Process", "process", ")", "throws", "InterruptedException", "{", "final", "ByteArrayOutputStream", "baos", "=", "new", "ByteArrayOutputStream", "(", ")", ";", "final", "StreamGobbler", "outputGobbler", "=", "new", "StreamGobbler", "(", "process", ".", "getInputStream", "(", ")", ",", "baos", ",", "OUTPUT_PREFIX", ")", ";", "final", "StreamGobbler", "errorGobbler", "=", "new", "StreamGobbler", "(", "process", ".", "getErrorStream", "(", ")", ",", "baos", ",", "ERROR_PREFIX", ")", ";", "outputGobbler", ".", "start", "(", ")", ";", "errorGobbler", ".", "start", "(", ")", ";", "final", "int", "result", "=", "process", ".", "waitFor", "(", ")", ";", "outputGobbler", ".", "waitFor", "(", ")", ";", "errorGobbler", ".", "waitFor", "(", ")", ";", "return", "new", "ProcessResult", "(", "result", ",", "baos", ".", "toString", "(", ")", ")", ";", "}"], "docstring": "Executes a process and returns the process output and exit code.", "docstring_tokens": ["Executes", "a", "process", "and", "returns", "the", "process", "output", "and", "exit", "code", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-core/src/main/java/jodd/util/ProcessRunner.java#L68-L83", "partition": "test"}
{"repo": "oblac/jodd", "path": "jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java", "func_name": "ProxettaAsmUtil.storeMethodArgument", "original_string": "public static void storeMethodArgument(final MethodVisitor mv, final MethodInfo methodInfo, final int index) {\n\t\tint offset = methodInfo.getArgumentOffset(index);\n\t\tint type = methodInfo.getArgument(index).getOpcode();\n\t\tswitch (type) {\n\t\t\tcase 'V':\n\t\t\t\tbreak;\n\t\t\tcase 'B':\n\t\t\tcase 'C':\n\t\t\tcase 'S':\n\t\t\tcase 'I':\n\t\t\tcase 'Z':\n\t\t\t\tmv.visitVarInsn(ISTORE, offset); break;\n\t\t\tcase 'J':\n\t\t\t\tmv.visitVarInsn(LSTORE, offset); break;\n\t\t\tcase 'F':\n\t\t\t\tmv.visitVarInsn(FSTORE, offset); break;\n\t\t\tcase 'D':\n\t\t\t\tmv.visitVarInsn(DSTORE, offset); break;\n\t\t\tdefault:\n\t\t\t\tmv.visitVarInsn(ASTORE, offset);\n\t\t}\n\t}", "language": "java", "code": "public static void storeMethodArgument(final MethodVisitor mv, final MethodInfo methodInfo, final int index) {\n\t\tint offset = methodInfo.getArgumentOffset(index);\n\t\tint type = methodInfo.getArgument(index).getOpcode();\n\t\tswitch (type) {\n\t\t\tcase 'V':\n\t\t\t\tbreak;\n\t\t\tcase 'B':\n\t\t\tcase 'C':\n\t\t\tcase 'S':\n\t\t\tcase 'I':\n\t\t\tcase 'Z':\n\t\t\t\tmv.visitVarInsn(ISTORE, offset); break;\n\t\t\tcase 'J':\n\t\t\t\tmv.visitVarInsn(LSTORE, offset); break;\n\t\t\tcase 'F':\n\t\t\t\tmv.visitVarInsn(FSTORE, offset); break;\n\t\t\tcase 'D':\n\t\t\t\tmv.visitVarInsn(DSTORE, offset); break;\n\t\t\tdefault:\n\t\t\t\tmv.visitVarInsn(ASTORE, offset);\n\t\t}\n\t}", "code_tokens": ["public", "static", "void", "storeMethodArgument", "(", "final", "MethodVisitor", "mv", ",", "final", "MethodInfo", "methodInfo", ",", "final", "int", "index", ")", "{", "int", "offset", "=", "methodInfo", ".", "getArgumentOffset", "(", "index", ")", ";", "int", "type", "=", "methodInfo", ".", "getArgument", "(", "index", ")", ".", "getOpcode", "(", ")", ";", "switch", "(", "type", ")", "{", "case", "'", "'", ":", "break", ";", "case", "'", "'", ":", "case", "'", "'", ":", "case", "'", "'", ":", "case", "'", "'", ":", "case", "'", "'", ":", "mv", ".", "visitVarInsn", "(", "ISTORE", ",", "offset", ")", ";", "break", ";", "case", "'", "'", ":", "mv", ".", "visitVarInsn", "(", "LSTORE", ",", "offset", ")", ";", "break", ";", "case", "'", "'", ":", "mv", ".", "visitVarInsn", "(", "FSTORE", ",", "offset", ")", ";", "break", ";", "case", "'", "'", ":", "mv", ".", "visitVarInsn", "(", "DSTORE", ",", "offset", ")", ";", "break", ";", "default", ":", "mv", ".", "visitVarInsn", "(", "ASTORE", ",", "offset", ")", ";", "}", "}"], "docstring": "Stores one argument. Index is 1-based. No conversion occurs.", "docstring_tokens": ["Stores", "one", "argument", ".", "Index", "is", "1", "-", "based", ".", "No", "conversion", "occurs", "."], "sha": "85ad7f813ec0e07ecd27042aeb47ff2047631fa5", "url": "https://github.com/oblac/jodd/blob/85ad7f813ec0e07ecd27042aeb47ff2047631fa5/jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java#L308-L329", "partition": "test"}
{"repo": "real-logic/aeron", "path": "aeron-client/src/main/java/io/aeron/BufferBuilder.java", "func_name": "BufferBuilder.limit", "original_string": "public void limit(final int limit)\n    {\n        if (limit < 0 || limit >= buffer.capacity())\n        {\n            throw new IllegalArgumentException(\n                \"limit outside range: capacity=\" + buffer.capacity() + \" limit=\" + limit);\n        }\n\n        this.limit = limit;\n    }", "language": "java", "code": "public void limit(final int limit)\n    {\n        if (limit < 0 || limit >= buffer.capacity())\n        {\n            throw new IllegalArgumentException(\n                \"limit outside range: capacity=\" + buffer.capacity() + \" limit=\" + limit);\n        }\n\n        this.limit = limit;\n    }", "code_tokens": ["public", "void", "limit", "(", "final", "int", "limit", ")", "{", "if", "(", "limit", "<", "0", "||", "limit", ">=", "buffer", ".", "capacity", "(", ")", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"limit outside range: capacity=\"", "+", "buffer", ".", "capacity", "(", ")", "+", "\" limit=\"", "+", "limit", ")", ";", "}", "this", ".", "limit", "=", "limit", ";", "}"], "docstring": "Set this limit for this buffer as the position at which the next append operation will occur.\n\n@param limit to be the new value.", "docstring_tokens": ["Set", "this", "limit", "for", "this", "buffer", "as", "the", "position", "at", "which", "the", "next", "append", "operation", "will", "occur", "."], "sha": "045c32f0256d1ea35d562520216affc281a41239", "url": "https://github.com/real-logic/aeron/blob/045c32f0256d1ea35d562520216affc281a41239/aeron-client/src/main/java/io/aeron/BufferBuilder.java#L104-L113", "partition": "test"}
{"repo": "playframework/playframework", "path": "core/play/src/main/java/play/http/DefaultHttpErrorHandler.java", "func_name": "DefaultHttpErrorHandler.onClientError", "original_string": "@Override\n  public CompletionStage<Result> onClientError(\n      RequestHeader request, int statusCode, String message) {\n    if (statusCode == 400) {\n      return onBadRequest(request, message);\n    } else if (statusCode == 403) {\n      return onForbidden(request, message);\n    } else if (statusCode == 404) {\n      return onNotFound(request, message);\n    } else if (statusCode >= 400 && statusCode < 500) {\n      return onOtherClientError(request, statusCode, message);\n    } else {\n      throw new IllegalArgumentException(\n          \"onClientError invoked with non client error status code \" + statusCode + \": \" + message);\n    }\n  }", "language": "java", "code": "@Override\n  public CompletionStage<Result> onClientError(\n      RequestHeader request, int statusCode, String message) {\n    if (statusCode == 400) {\n      return onBadRequest(request, message);\n    } else if (statusCode == 403) {\n      return onForbidden(request, message);\n    } else if (statusCode == 404) {\n      return onNotFound(request, message);\n    } else if (statusCode >= 400 && statusCode < 500) {\n      return onOtherClientError(request, statusCode, message);\n    } else {\n      throw new IllegalArgumentException(\n          \"onClientError invoked with non client error status code \" + statusCode + \": \" + message);\n    }\n  }", "code_tokens": ["@", "Override", "public", "CompletionStage", "<", "Result", ">", "onClientError", "(", "RequestHeader", "request", ",", "int", "statusCode", ",", "String", "message", ")", "{", "if", "(", "statusCode", "==", "400", ")", "{", "return", "onBadRequest", "(", "request", ",", "message", ")", ";", "}", "else", "if", "(", "statusCode", "==", "403", ")", "{", "return", "onForbidden", "(", "request", ",", "message", ")", ";", "}", "else", "if", "(", "statusCode", "==", "404", ")", "{", "return", "onNotFound", "(", "request", ",", "message", ")", ";", "}", "else", "if", "(", "statusCode", ">=", "400", "&&", "statusCode", "<", "500", ")", "{", "return", "onOtherClientError", "(", "request", ",", "statusCode", ",", "message", ")", ";", "}", "else", "{", "throw", "new", "IllegalArgumentException", "(", "\"onClientError invoked with non client error status code \"", "+", "statusCode", "+", "\": \"", "+", "message", ")", ";", "}", "}"], "docstring": "Invoked when a client error occurs, that is, an error in the 4xx series.\n\n<p>The base implementation calls onBadRequest, onForbidden, onNotFound, or onOtherClientError\ndepending on the HTTP status code.\n\n@param request The request that caused the client error.\n@param statusCode The error status code. Must be greater or equal to 400, and less than 500.\n@param message The error message.\n@return a CompletionStage containing the Result.", "docstring_tokens": ["Invoked", "when", "a", "client", "error", "occurs", "that", "is", "an", "error", "in", "the", "4xx", "series", "."], "sha": "3c46dca803d24e715d85de678c59dcfac9525a00", "url": "https://github.com/playframework/playframework/blob/3c46dca803d24e715d85de678c59dcfac9525a00/core/play/src/main/java/play/http/DefaultHttpErrorHandler.java#L70-L85", "partition": "test"}
{"repo": "tiefaces/TieFaces", "path": "src/org/tiefaces/components/websheet/utility/ChartUtility.java", "func_name": "ChartUtility.getChartType", "original_string": "public static ChartType getChartType(final CTChart ctChart) {\r\n        CTPlotArea plotArea = ctChart.getPlotArea();\r\n\r\n        for (ChartType chartType : ChartType.values()) {\r\n            if (chartType.isThisType(plotArea)) {\r\n                return chartType;\r\n            }\r\n        }\r\n        return null;\r\n    }", "language": "java", "code": "public static ChartType getChartType(final CTChart ctChart) {\r\n        CTPlotArea plotArea = ctChart.getPlotArea();\r\n\r\n        for (ChartType chartType : ChartType.values()) {\r\n            if (chartType.isThisType(plotArea)) {\r\n                return chartType;\r\n            }\r\n        }\r\n        return null;\r\n    }", "code_tokens": ["public", "static", "ChartType", "getChartType", "(", "final", "CTChart", "ctChart", ")", "{", "CTPlotArea", "plotArea", "=", "ctChart", ".", "getPlotArea", "(", ")", ";", "for", "(", "ChartType", "chartType", ":", "ChartType", ".", "values", "(", ")", ")", "{", "if", "(", "chartType", ".", "isThisType", "(", "plotArea", ")", ")", "{", "return", "chartType", ";", "}", "}", "return", "null", ";", "}"], "docstring": "return chart type from CTChart object.\n\n@param ctChart\nobject.\n@return ChartType.", "docstring_tokens": ["return", "chart", "type", "from", "CTChart", "object", "."], "sha": "3b57b9701ed0f080b5fa4fa78269cc0c422b34ba", "url": "https://github.com/tiefaces/TieFaces/blob/3b57b9701ed0f080b5fa4fa78269cc0c422b34ba/src/org/tiefaces/components/websheet/utility/ChartUtility.java#L74-L83", "partition": "test"}
